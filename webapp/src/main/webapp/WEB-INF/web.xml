<web-app xmlns="https://java.sun.com/xml/ns/javaee"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
		 version="3.0">
	<display-name>Frank!Framework</display-name>

	<description>
		The Frank!Framework provides functionality to listen to some event (e.g. a JMS message arrival) and perform some predefined actions.
		These actions are configured in an XML file. On the event several actions, called pipes, grouped in a pipeline, are fired.
	</description>

	<!-- Spring Security -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!--
		First a 'ROOT' Spring WebApplicationContext is started. This in turn registers all dynamic servlets and IbisInitializers
		After loading the ROOT context with all HTTP/CXF servlets (endpoints) all servlets will be initialized.
		IbisApplicationServlet will start the IbisContext. It must be the first servlet to start up.
	-->
	<servlet>
		<description>Initializes the configuration</description>
		<display-name>Ibis Application Servlet</display-name>
		<servlet-name>IbisApplicationServlet</servlet-name>
		<servlet-class>nl.nn.adapterframework.lifecycle.IbisApplicationServlet</servlet-class>
		<load-on-startup>0</load-on-startup>
	</servlet>

	<!-- Error pages -->
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<location>/jsp/errorPage.jsp</location>
	</error-page>
</web-app>
