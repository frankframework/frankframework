<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.ibissource</groupId>
		<artifactId>ibis-adapterframework-parent</artifactId>
		<version>${revision}</version>
	</parent>

	<artifactId>ibis-adapterframework-test</artifactId>
	<name>Ibis AdapterFramework Test</name>
	<packaging>war</packaging>

	<properties>
		<m2eclipse.wtp.contextRoot>iaf-test</m2eclipse.wtp.contextRoot>
		<failOnMissingWebXml>false</failOnMissingWebXml>
		<maven.build.timestamp.format>dd-MM-yyyy HH:mm</maven.build.timestamp.format>
	</properties>

	<dependencies>
		<!-- This dependency is here because of the CustomHighDeliveryCountEsbJmsListener -->
		<dependency>
			<groupId>org.apache.geronimo.specs</groupId>
			<artifactId>geronimo-jms_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- This dependency is here because of the IbisMetricsPipe -->
		<dependency>
			<groupId>org.ibissource</groupId>
			<artifactId>ibis-adapterframework-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.ibissource</groupId>
			<artifactId>ibis-adapterframework-webapp</artifactId>
			<type>war</type>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
	</dependencies>

	<build>
		<defaultGoal>package</defaultGoal>
		<plugins>
<!--
			<plugin>
				<groupId>org.ibissource</groupId>
				<artifactId>ibis-war-plugin</artifactId>
				<version>0.2</version>
				<extensions>true</extensions>
				<configuration>
					<enableSecurityConstraints>false</enableSecurityConstraints>
					<webResources>
						<resource>
							<directory>src/main/configurations</directory>
							<targetPath>WEB-INF/classes/configurations</targetPath>
						</resource>
					</webResources>
				</configuration>
			</plugin>
-->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<id>copy-resources-and-configurations</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/full-configuration</outputDirectory>
							<resources>
								<resource>
									<directory>${project.basedir}/src/main/configurations</directory>
									<filtering>false</filtering>
									<targetPath>configurations</targetPath>
								</resource>
								<resource>
									<directory>${project.build.outputDirectory}</directory>
									<filtering>false</filtering>
								</resource>
								<resource>
									<directory>${project.build.sourceDirectory}</directory>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- use maven-jar-plugin to make separate artifacts of context, configurations, resources and testscenarios, to inject them into WebSphere Docker deployment -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<executions>
					<execution>
						<id>zip-context</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<classifier>context</classifier>
							<classesDirectory>src/main/webapp/META-INF</classesDirectory>
							<includes>context.xml</includes>
						</configuration>
					</execution>
					<execution>
						<id>zip-configurations</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<classifier>configurations</classifier>
							<classesDirectory>src/main</classesDirectory>
							<includes>configurations/</includes>
						</configuration>
					</execution>
					<execution>
						<id>zip-resources</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<classifier>resources</classifier>
							<classesDirectory>src/main/resources</classesDirectory>
						</configuration>
					</execution>
					<execution>
						<id>zip-scenarios</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<classifier>scenarios</classifier>
							<classesDirectory>src/test/testtool</classesDirectory>
						</configuration>
					</execution>
					<execution>
						<id>zip-secrets</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<classifier>secrets</classifier>
							<classesDirectory>src/main/secrets</classesDirectory>
						</configuration>
					</execution>
					<execution>
						<id>full-configuration</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<classifier>full-configuration</classifier>
							<packagingExcludes>.gitignore</packagingExcludes>
							<attachClasses>true</attachClasses>
							<classesDirectory>${project.build.directory}/full-configuration</classesDirectory>
							<archive>
								<manifestEntries>
									<IAF-Version>${revision}</IAF-Version>
									<Maven-Version>${maven.version}</Maven-Version>
									<Creation-Time>${maven.build.timestamp}</Creation-Time>
									<Build-Version>${project.version}</Build-Version>
									<Build-Artifact>${project.artifactId}</Build-Artifact>
								</manifestEntries>
								<addMavenDescriptor>true</addMavenDescriptor>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<packagingExcludes>.gitignore</packagingExcludes>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<attachClasses>true</attachClasses>
					<archive>
						<manifestEntries>
							<IAF-Version>${revision}</IAF-Version>
							<Maven-Version>${maven.version}</Maven-Version>
							<Creation-Time>${maven.build.timestamp}</Creation-Time>
							<Build-Version>${project.version}</Build-Version>
							<Build-Artifact>${project.artifactId}</Build-Artifact>
						</manifestEntries>
						<addMavenDescriptor>true</addMavenDescriptor>
					</archive>

					<webResources>
						<resource>
							<directory>${project.build.sourceDirectory}</directory>
							<targetPath>WEB-INF/classes</targetPath>
						</resource>
						<resource>
							<directory>src/main/configurations</directory>
							<targetPath>WEB-INF/classes/configurations</targetPath>
						</resource>
 						<resource>
							<directory>src/test/testtool</directory>
							<targetPath>testtool</targetPath>
						</resource>
					</webResources>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<!--
		Copy dependencies from iaf-webapp/pom.xml to make m2e add dependent-module
		elements to org.eclipse.wst.common.component. Maven doesn't need this copy
		to add the jar files to the war file. Might be a bug in m2e:
		https://bugs.eclipse.org/bugs/show_bug.cgi?id=398138
		Note: Maven will copy the jar files from the war in the local repository
		which might be an old snapshot.

		In older versions of Eclipse (Kepler - 20140224-0627) the larva and ladybug modules are not automatically added to the (correct) classpath.
		Because of this the example module will throw a FileNotFoundException on springIbisTestTool.xml which prevents the IBIS from starting up.
		In newer versions of Eclipse (at least version 20181214-0600 onwards) this seems to have been resolved.
		-->
		<profile>
			<id>m2e</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.ibissource</groupId>
					<artifactId>ibis-adapterframework-larva</artifactId>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.ibissource</groupId>
					<artifactId>ibis-adapterframework-ladybug</artifactId>
					<scope>runtime</scope>
				</dependency>
		 </dependencies>
		</profile>
		<profile>
			<id>database-drivers</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>com.oracle.database.jdbc</groupId>
					<artifactId>ojdbc${oracle.driver.jdkversion}</artifactId>
					<version>${oracle.driver.version}</version>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>com.h2database</groupId>
					<artifactId>h2</artifactId>
					<version>${h2.driver.version}</version>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>com.microsoft.sqlserver</groupId>
					<artifactId>mssql-jdbc</artifactId>
					<version>${mssql.driver.version}</version>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>com.mysql</groupId>
					<artifactId>mysql-connector-j</artifactId>
					<version>${mysql.driver.version}</version>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.mariadb.jdbc</groupId>
					<artifactId>mariadb-java-client</artifactId>
					<version>${mariadb.driver.version}</version>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.postgresql</groupId>
					<artifactId>postgresql</artifactId>
					<version>${postgresql.driver.version}</version>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>com.ibm.db2</groupId>
					<artifactId>jcc</artifactId>
					<version>${db2.driver.version}</version>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-j2ee-management_1.1_spec</artifactId>
					<version>${geronimo.j2ee.spec.version}</version>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-jms_1.1_spec</artifactId>
					<scope>compile</scope>
				</dependency>
				<dependency>
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-jta_1.1_spec</artifactId>
					<version>${geronimo.jta.spec.version}</version>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.apache.activemq</groupId>
					<artifactId>artemis-jms-client-all</artifactId>
					<version>${artemis.driver.version}</version>
					<scope>runtime</scope>
				</dependency>
				<!-- required for ActiveMQ classic-->
				<dependency>
					<groupId>org.apache.activemq</groupId>
					<artifactId>activemq-client</artifactId>
					<version>${activemq.driver.version}</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>
	</profiles>
</project>
