<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <xs:element name="Configuration" type="ConfigurationType" />
  <xs:element name="Module" type="ModuleType" />
  <xs:element name="Adapter" type="AdapterType" />
  <xs:complexType name="ModuleType">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="Adapter" type="AdapterType" minOccurs="0" />
      <xs:element name="Job" type="JobType" minOccurs="0" />
    </xs:choice>
  </xs:complexType>
  <xs:complexType name="AdapterType">
    <xs:sequence>
      <xs:element name="Receiver" type="ReceiverType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Pipeline" type="PipelineType" minOccurs="0" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether adapter is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the receiver is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoStart" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether adapters starts when configuration loads (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>description of the adapter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorMessageFormatter" type="xs:string">
      <xs:annotation>
        <xs:documentation />
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorState" type="xs:string" />
    <xs:attribute name="messageKeeperSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>number of message displayed in ibisconsole (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="msgLogHidden" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set to &lt;code&gt;true&lt;/code&gt;, the length of the message is shown in the msg log instead of the content of the message (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="msgLogLevel" type="xs:string">
      <xs:annotation>
        <xs:documentation>defines behaviour for logging messages. Configuration is done in the MSG appender in log4j4ibis.properties. Possible values are: &lt;table border='1'&gt;&lt;tr&gt;&lt;th&gt;msgLogLevel&lt;/th&gt;&lt;th&gt;messages which are logged&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan='1'&gt;Off&lt;/td&gt; &lt;td&gt;No logging&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan='1'&gt;Basic&lt;/td&gt;&lt;td&gt;Logs information from adapter level messages &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan='1'&gt;Terse&lt;/td&gt;&lt;td&gt;Logs information from pipe messages.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan='1'&gt;All&lt;/td&gt; &lt;td&gt;Logs all messages.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: BASIC)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the adapter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="recover" type="xs:string" />
    <xs:attribute name="replaceNullMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt; a null message is replaced by an empty message (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetDesignDocument" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="Adios2XmlPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="adiosDefinities" type="xs:string" />
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noConversionForwardName" type="xs:string" />
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rekenbox" type="xs:string" />
    <xs:attribute name="rekenboxSessionKey" type="xs:string" />
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="Afm2EdiFactErrorSenderType">
    <xs:attribute name="destination" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="postbus" type="xs:string" />
    <xs:attribute name="tpnummer" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="Afm2EdiFactSenderType">
    <xs:attribute name="destination" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="postbus" type="xs:string" />
    <xs:attribute name="tpnummer" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="AmazonS3ErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="accessKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>access key to access to the AWS resources owned by the account</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain AWS credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bucketCreationEnabled" type="xs:string">
      <xs:annotation>
        <xs:documentation>enables creating bucket by upload and copy action if the bucket does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bucketName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the bucket to access</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bucketRegion" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the bucket region for create action</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chunkedEncodingDisabled" type="xs:string">
      <xs:annotation>
        <xs:documentation>setting this flag will result in disabling chunked encoding for all requests. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientRegion" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the region that the client will be created from (default: eu-west-1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationBucketName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the destination bucket name can be used for copy action</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expirationInDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time, in days, between when an object is restored to thebucket and when it expires</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceGlobalBucketAccessEnabled" type="xs:string">
      <xs:annotation>
        <xs:documentation>set whether the client should be configured with global bucket access enabled. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>setting proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>setting proxy port</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secretKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>secret key to access to the AWS resources owned by the account</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storageClass" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the storage class for copy action. If storage class is enabled must be specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storageClassEnabled" type="xs:string">
      <xs:annotation>
        <xs:documentation>enables storage class for copy action (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tier" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of tier for restore action</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="AmazonS3SenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="accessKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>access key to access to the AWS resources owned by the account</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain AWS credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bucketCreationEnabled" type="xs:string">
      <xs:annotation>
        <xs:documentation>enables creating bucket by upload and copy action if the bucket does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bucketName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the bucket to access</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bucketRegion" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the bucket region for create action</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chunkedEncodingDisabled" type="xs:string">
      <xs:annotation>
        <xs:documentation>setting this flag will result in disabling chunked encoding for all requests. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientRegion" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the region that the client will be created from (default: eu-west-1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationBucketName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the destination bucket name can be used for copy action</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expirationInDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time, in days, between when an object is restored to thebucket and when it expires</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceGlobalBucketAccessEnabled" type="xs:string">
      <xs:annotation>
        <xs:documentation>set whether the client should be configured with global bucket access enabled. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>setting proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>setting proxy port</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secretKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>secret key to access to the AWS resources owned by the account</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storageClass" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the storage class for copy action. If storage class is enabled must be specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storageClassEnabled" type="xs:string">
      <xs:annotation>
        <xs:documentation>enables storage class for copy action (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tier" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of tier for restore action</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ApiListenerType">
    <xs:attribute name="applicationFaultsAsExceptions" type="xs:string" />
    <xs:attribute name="authenticationMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>enables security for this listener, must be one of [NONE, COOKIE, HEADER, AUTHROLE]. If you wish to use the application servers authorisation roles [AUTHROLE], you need to enable them globally for all ApiListeners with the `servlet.ApiListenerServlet.securityroles=ibistester,ibiswebservice` property (default: NONE)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authenticationRoles" type="xs:string">
      <xs:annotation>
        <xs:documentation>only active when AuthenticationMethod=AUTHROLE. comma separated list of authorization roles which are granted for this service, eq. ibistester,ibisobserver</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="characterEncoding" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the specified character encoding on the response contentType header (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consumes" type="xs:string">
      <xs:annotation>
        <xs:documentation>the specified contentType on requests, if it doesn't match the request will fail (default: ANY)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIdHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the header which contains the message-id (default: message-id)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="method" type="xs:string">
      <xs:annotation>
        <xs:documentation>HTTP method eq. GET POST PUT DELETE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartBodyName" type="xs:string">
      <xs:annotation>
        <xs:documentation>specify the form-part you wish to enter the pipeline (default: name of the first form-part)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener as known to the adapter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produces" type="xs:string">
      <xs:annotation>
        <xs:documentation>the specified contentType on response (default: ANY)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="running" type="xs:string" />
    <xs:attribute name="updateEtag" type="xs:string">
      <xs:annotation>
        <xs:documentation>automatically generate and validate etags (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uriPattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>uri pattern to register this listener on, eq. `/my-listener/{something}/here`</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ApiPrincipalPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string" />
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authenticationMethod" type="xs:string" />
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ApiSoapInputWrapperType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ApiSoapOutputWrapperType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ApiSoapWrapperPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ApiStreamPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusFailureAsSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) when true and the antivirusfailed forward is specified and the antivirus scan did not pass, a soap fault is returned instead of only a plain error message (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusFailureReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) if not empty and the antivirusfailed forward is specified and the antivirus scan did not pass, the error message (or soap fault) is stored in this session key and the first string part is returned to the pipeline</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusMessagePartName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) name of antivirus scan message parts (default: &lt;code&gt;antivirus_msg&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusPartName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) name of antivirus scan status parts (default: &lt;code&gt;antivirus_rc&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusPassedMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) message of antivirus scan parts which indicates the antivirus scan passed (default: &lt;code&gt;pass&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkAntiVirus" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt;) when true parts are checked for antivirus scan returncode. these antivirus scan parts have been added by another application (so the antivirus scan is not performed in this pipe). for each file part an antivirus scan part have been added by this other application (directly after this file part) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="extractFirstStringPart" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt;) when true the first part is not put in a session key but returned to the pipeline (as the result of this pipe) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsRealm" type="xs:string" />
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;extractfirststringpart=true&lt;/code&gt;) the session key to put the xml in with info about the stored parts (default: &lt;code&gt;multipartxml&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ApiWsdlXmlInputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipart" type="xs:string" />
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocationToAdd" type="xs:string">
      <xs:annotation>
        <xs:documentation>pairs of uri references which will be added to the wsdl (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>creates &lt;code&gt;schemalocation&lt;/code&gt; attribute based on the wsdl and replaces the namespace of the soap body element (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wsdl" type="xs:string">
      <xs:annotation>
        <xs:documentation>the wsdl to read the xsd's from (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ApiWsdlXmlOutputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipart" type="xs:string" />
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocationToAdd" type="xs:string">
      <xs:annotation>
        <xs:documentation>pairs of uri references which will be added to the wsdl (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>creates &lt;code&gt;schemalocation&lt;/code&gt; attribute based on the wsdl and replaces the namespace of the soap body element (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wsdl" type="xs:string">
      <xs:annotation>
        <xs:documentation>the wsdl to read the xsd's from (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ApiWsdlXmlValidatorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipart" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocationToAdd" type="xs:string">
      <xs:annotation>
        <xs:documentation>pairs of uri references which will be added to the wsdl (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>creates &lt;code&gt;schemalocation&lt;/code&gt; attribute based on the wsdl and replaces the namespace of the soap body element (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wsdl" type="xs:string">
      <xs:annotation>
        <xs:documentation>the wsdl to read the xsd's from (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Base64PipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Character encoding to be used to encode or decode message to or from string. (Only used when outputType=string or convert2string=true) (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;encode&lt;/code&gt; or &lt;code&gt;decode&lt;/code&gt; (default: encode)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when direction=encode) Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). If linelength &amp;lt;= 0, then the output will not be divided into lines (default: 76)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when direction=encode) Defines separator between lines. Special values: &lt;code&gt;auto&lt;/code&gt;: platform default, &lt;code&gt;dos&lt;/code&gt;: crlf, &lt;code&gt;unix&lt;/code&gt;: lf (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt; or &lt;code&gt;stream&lt;/code&gt; (default: string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="BatchBlobTransformerPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>characterset used for reading file or inputstream (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="query" type="xs:string" />
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeOriginalBlock" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; the original block is stored under the session key originalblock (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="BatchClobTransformerPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>characterset used for reading file or inputstream (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="query" type="xs:string" />
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeOriginalBlock" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; the original block is stored under the session key originalblock (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="BatchFileTransformerPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>characterset used for reading file or inputstream (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delete" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the file processed will deleted after being processed, and not stored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="move2dirAfterError" type="xs:string">
      <xs:annotation>
        <xs:documentation>directory to which the inputfile is moved in case an error occurs</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="move2dirAfterTransform" type="xs:string">
      <xs:annotation>
        <xs:documentation>directory in which the transformed file(s) is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>number of copies held of a file with the same name. backup files have a dot and a number suffixed to their name. if set to 0, no backups will be kept. (default: 5)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the destination file will be deleted if it already exists (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeOriginalBlock" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; the original block is stored under the session key originalblock (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="BisInputWrapperType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addOutputNamespace" type="xs:string" />
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bisActionName" type="xs:string" />
    <xs:attribute name="bisConversationIdSessionKey" type="xs:string" />
    <xs:attribute name="bisErrorCodeSessionKey" type="xs:string" />
    <xs:attribute name="bisErrorReasonSessionKey" type="xs:string" />
    <xs:attribute name="bisErrorTextSessionKey" type="xs:string" />
    <xs:attribute name="bisExternalRefToMessageIdSessionKey" type="xs:string" />
    <xs:attribute name="bisMessageHeaderInSoapBody" type="xs:string" />
    <xs:attribute name="bisMessageHeaderSessionKey" type="xs:string" />
    <xs:attribute name="bisResultInPayload" type="xs:string" />
    <xs:attribute name="bisServiceName" type="xs:string" />
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputNamespaceDefs" type="xs:string" />
    <xs:attribute name="inputXPath" type="xs:string" />
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitResult" type="xs:string" />
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputRoot" type="xs:string" />
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="BisJmsErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="conversationIdSessionKey" type="xs:string" />
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="errorListSessionKey" type="xs:string" />
    <xs:attribute name="externalRefToMessageIdSessionKey" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageHeaderInSoapBody" type="xs:string" />
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeResponseNamespaces" type="xs:string" />
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="requestNamespace" type="xs:string" />
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseNamespaceDefs" type="xs:string" />
    <xs:attribute name="responseXPath" type="xs:string" />
    <xs:attribute name="resultInPayload" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="BisJmsListenerType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="actionName" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheMode" type="xs:string" />
    <xs:attribute name="commitOnState" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;i&gt;deprecated&lt;/i&gt; exit state to control commit or rollback of jmssession. only used if &lt;code&gt;jmstransacted&lt;/code&gt; is set true. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorCodeSessionKey" type="xs:string" />
    <xs:attribute name="errorReasonSessionKey" type="xs:string" />
    <xs:attribute name="errorTextSessionKey" type="xs:string" />
    <xs:attribute name="forceMessageIdAsCorrelationId" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="layByNamespace" type="xs:string" />
    <xs:attribute name="listenerPort" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageHeaderInSoapBody" type="xs:string" />
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitResult" type="xs:string" />
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pollGuardInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>interval in milliseconds for the poll guard to check whether a successful poll was done by the receive (https://docs.oracle.com/javaee/7/api/javax/jms/messageconsumer.html#receive-long-) since last check. when polling has stopped this will be logged and the listener will be stopped and started in an attempt to workaround problems with polling. polling might stop due to bugs in the jms driver/implementation which should be fixed by the supplier. as the poll time includes reading and processing of the message no successful poll might be registered since the last check when message processing takes a long time, hence while messages are being processed the check on last successful poll will be skipped. set to -1 to disable (default: ten times the specified timeout)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeRequestNamespaces" type="xs:string" />
    <xs:attribute name="replyDeliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that reply messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyEncodingStyleURI" type="xs:string" />
    <xs:attribute name="replyMessageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>time that replymessage will live (default: 0 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field of the reply message (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNamespaceURI" type="xs:string" />
    <xs:attribute name="replyPriority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the reply message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapAction" type="xs:string" />
    <xs:attribute name="requestNamespaceDefs" type="xs:string" />
    <xs:attribute name="requestXPath" type="xs:string" />
    <xs:attribute name="resultInPayload" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceName" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>receive timeout in milliseconds as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long- (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useReplyTo" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xPathLoggingKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of all xpath keys that need to be logged. (overrides &lt;code&gt;msg.log.keys&lt;/code&gt; property)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="BisJmsSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="conversationIdSessionKey" type="xs:string" />
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="errorListSessionKey" type="xs:string" />
    <xs:attribute name="externalRefToMessageIdSessionKey" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageHeaderInSoapBody" type="xs:string" />
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeResponseNamespaces" type="xs:string" />
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="requestNamespace" type="xs:string" />
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseNamespaceDefs" type="xs:string" />
    <xs:attribute name="responseXPath" type="xs:string" />
    <xs:attribute name="resultInPayload" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="BisOutputWrapperType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addOutputNamespace" type="xs:string" />
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bisActionName" type="xs:string" />
    <xs:attribute name="bisConversationIdSessionKey" type="xs:string" />
    <xs:attribute name="bisErrorCodeSessionKey" type="xs:string" />
    <xs:attribute name="bisErrorReasonSessionKey" type="xs:string" />
    <xs:attribute name="bisErrorTextSessionKey" type="xs:string" />
    <xs:attribute name="bisExternalRefToMessageIdSessionKey" type="xs:string" />
    <xs:attribute name="bisMessageHeaderInSoapBody" type="xs:string" />
    <xs:attribute name="bisMessageHeaderSessionKey" type="xs:string" />
    <xs:attribute name="bisResultInPayload" type="xs:string" />
    <xs:attribute name="bisServiceName" type="xs:string" />
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputNamespaceDefs" type="xs:string" />
    <xs:attribute name="inputXPath" type="xs:string" />
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitResult" type="xs:string" />
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputRoot" type="xs:string" />
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="BisWrapperPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addOutputNamespace" type="xs:string" />
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bisActionName" type="xs:string" />
    <xs:attribute name="bisConversationIdSessionKey" type="xs:string" />
    <xs:attribute name="bisErrorCodeSessionKey" type="xs:string" />
    <xs:attribute name="bisErrorReasonSessionKey" type="xs:string" />
    <xs:attribute name="bisErrorTextSessionKey" type="xs:string" />
    <xs:attribute name="bisExternalRefToMessageIdSessionKey" type="xs:string" />
    <xs:attribute name="bisMessageHeaderInSoapBody" type="xs:string" />
    <xs:attribute name="bisMessageHeaderSessionKey" type="xs:string" />
    <xs:attribute name="bisResultInPayload" type="xs:string" />
    <xs:attribute name="bisServiceName" type="xs:string" />
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputNamespaceDefs" type="xs:string" />
    <xs:attribute name="inputXPath" type="xs:string" />
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitResult" type="xs:string" />
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputRoot" type="xs:string" />
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="BlobLineIteratingPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addInputToResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset used to read and write blobs (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. when set to a value greater than 0, it specifies the number of rows send in a block to the sender. (default: 0 (one line at a time, no prefix of suffix))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned. Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreExceptions" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemNoSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>either MESSAGEID or CORRELATIONID. For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxChildThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe) (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxItems" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either 'text' or 'xml'. only valid for xpathexpression (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parallel" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time (in seconds) after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts (default: 10 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text to be excecuted each time sendMessage() is called. When not set, the input message is taken as the query</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeDuplicates" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeXmlDeclarationInResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopConditionXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Expression evaluated on each result if set. Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used. This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is first base64 decoded and then streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trimSpaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, every string in the message which equals &lt;code&gt;?{paramname+UNP_END+&lt;/code&gt; will be replaced by the setter method for the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="BytesOutputPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="CacheType">
    <xs:attribute name="cacheEmptyKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether empty keys are used for caching. when set true, cache entries with empty keys can exist. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheEmptyValues" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether empty values will be cached. when set true, empty cache entries can exist for any key. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="diskExpiryThreadIntervalSeconds" type="xs:string">
      <xs:annotation>
        <xs:documentation>How often to run the disk store expiry thread (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="diskPersistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the the cache is reloaded after the JVM restarts (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="eternal" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the elements in the cache are eternal, i.e. never expire (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyInputSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to use as input for transformation of request message to key by keyxpath or keystylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for keyxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract cache key from request message. Use in combination with {@link #setCacheEmptyKeys(boolean) cacheEmptyKeys} to inhibit caching for certain groups of request messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract cache key from request message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyXPathOutputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>output type of xpath expression to extract cache key from request message, must be 'xml' or 'text' (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxElementsInMemory" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of elements in memory, before they are evicted (default: 100)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxElementsOnDisk" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of elements on disk, before they are removed (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="memoryStoreEvictionPolicy" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;LRU&lt;/code&gt;=Least Recent Use,&lt;code&gt;LFU&lt;/code&gt;=Least Frequent Use or &lt;code&gt;FIFO&lt;/code&gt;=First In - First Out (default: LRU)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the cache, will be set from owner</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overflowToDisk" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the elements that are evicted from memory are spooled to disk (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeToIdleSeconds" type="xs:string">
      <xs:annotation>
        <xs:documentation>The amount of time to live for an element from its last accessed or modified date (default: 36000 (=10 hours))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeToLiveSeconds" type="xs:string">
      <xs:annotation>
        <xs:documentation>The amount of time to live for an element from its creation date (default: 36000 (=10 hours))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueInputSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to use as input for transformation of response message to cached value by valuexpath or valuestylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for valuexpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract value to be cached from response message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract value to be cached key from response message. Use in combination with {@link #setCacheEmptyValues(boolean) cacheEmptyValues} to inhibit caching for certain groups of response messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueXPathOutputType" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ChecksumPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>character encoding to be used to encode message before calculating checksum (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputIsFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be a filename; otherwise the input itself is used in the calculations (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of checksum to be calculated. must be one of md5, sha, crc32, adler32 (default: md5)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="CleanupOldFilesPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteEmptySubdirectories" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, empty subdirectories will be deleted, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeWildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>filter of files to be excluded for deletion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>files that match this pattern will be deleted. parameters of the pipe are applied to this pattern. if this attribute is not set, the input of the pipe is interpreted as the file to be removed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filePatternSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lastModifiedDelta" type="xs:string">
      <xs:annotation>
        <xs:documentation>time in milliseconds after last modification that must have passed at least before a file will be deleted (set to negative value to disable) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minStableTime" type="xs:string">
      <xs:annotation>
        <xs:documentation>minimal age of file in milliseconds, to avoid deleting a file while it is still being written (only used when wildcard is set) (set to 0 or negative value to disable) (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subdirectories" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, files  in subdirectories will be deleted, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>filter of files to delete. if not set and a directory is specified, all files in the directory are interpreted to be deleted</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ClobLineIteratingPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addInputToResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. when set to a value greater than 0, it specifies the number of rows send in a block to the sender. (default: 0 (one line at a time, no prefix of suffix))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned. Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreExceptions" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemNoSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>either MESSAGEID or CORRELATIONID. For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxChildThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe) (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxItems" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either 'text' or 'xml'. only valid for xpathexpression (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parallel" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time (in seconds) after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts (default: 10 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text to be excecuted each time sendMessage() is called. When not set, the input message is taken as the query</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeDuplicates" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeXmlDeclarationInResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopConditionXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Expression evaluated on each result if set. Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used. This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is first base64 decoded and then streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trimSpaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, every string in the message which equals &lt;code&gt;?{paramname+UNP_END+&lt;/code&gt; will be replaced by the setter method for the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="CmisErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies action to perform. Must be one of 
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;get&lt;/code&gt;: get the content of a document (and optional the properties)&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;create&lt;/code&gt;: create a document&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;find&lt;/code&gt;: perform a query that returns properties&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;update&lt;/code&gt;: update the properties of an existing document&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;fetch&lt;/code&gt;: get the (meta)data of a folder or document&lt;/li&gt;
 * &lt;/ul&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>Accept self signed certificates (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bindingType" type="xs:string">
      <xs:annotation>
        <xs:documentation>'atompub', 'webservices' or 'browser' (default: 'atompub')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Auth Alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Certificate Password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path (or resource url) to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMediaType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=create&lt;/code&gt;) the mime type used to store the document when it's not set in the input message by a property (default: 'application/octet-stream')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileContentSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;action=create&lt;/code&gt;: the session key that contains the base64 encoded content of the file to use. when &lt;code&gt;action=get&lt;/code&gt; and &lt;code&gt;getproperties=true&lt;/code&gt;: the session key in which the base64 encoded content of the document is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileInputStreamSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;action=create&lt;/code&gt;: the session key that contains the input stream of the file to use. when &lt;code&gt;action=get&lt;/code&gt; and &lt;code&gt;getproperties=true&lt;/code&gt;: the session key in which the input stream of the document is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=create&lt;/code&gt;) the session key that contains the name of the file to use. if not set, the value of the property &lt;code&gt;filename&lt;/code&gt; from the input message is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getDocumentContent" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=get&lt;/code&gt;) if true, the attachment for the document is streamed to &lt;code&gt;fileInputStreamSessionKey&lt;/code&gt; otherwise only the properties are returned (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getProperties" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=get&lt;/code&gt;) if true, the content of the document is streamed to &lt;code&gt;fileinputstreamsessionkey&lt;/code&gt; and all document properties are put in the result as a xml string (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Ignore expired certificate exceptions (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keepSession" type="xs:string">
      <xs:annotation>
        <xs:documentation>if true, the session is not closed at the end and it will be used in the next call (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>KeyManager Algorithm (default: pkix)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Keystore Type (default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overrideEntryPointWSDL" type="xs:string">
      <xs:annotation>
        <xs:documentation>override entrypoint wsdl by reading it from the classpath, overrides url attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation />
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy host url</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy Password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy host port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy Username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="repository" type="xs:string">
      <xs:annotation>
        <xs:documentation>repository id</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnNotFound" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=get&lt;/code&gt;) result returned when no document was found for the given id (e.g. '[not_found]'). if empty an exception is thrown</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=get&lt;/code&gt;) if true, the content of the document is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>the connection timeout in seconds (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>TrustManager Algorithm (default: pkix)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path (or resource url) to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Truststore Password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Truststore Type (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>url to connect to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useRootFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=create&lt;/code&gt;) if true, the document is created in the root folder of the repository. otherwise the document is created in the repository (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string" />
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>Ignore certificate hostname validation (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="CmisEventListenerType">
    <xs:attribute name="applicationFaultsAsExceptions" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener as known to the adapter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="running" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="CmisHttpErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods (default: text/html)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="xs:string">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of method to be executed, either 'GET', 'POST', 'PUT', 'DELETE', 'HEAD' or 'REPORT' (default: GET)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>&gt;(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. (default: url)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="CmisHttpSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods (default: text/html)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="xs:string">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of method to be executed, either 'GET', 'POST', 'PUT', 'DELETE', 'HEAD' or 'REPORT' (default: GET)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>&gt;(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. (default: url)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="CmisSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies action to perform. Must be one of 
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;get&lt;/code&gt;: get the content of a document (and optional the properties)&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;create&lt;/code&gt;: create a document&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;find&lt;/code&gt;: perform a query that returns properties&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;update&lt;/code&gt;: update the properties of an existing document&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;fetch&lt;/code&gt;: get the (meta)data of a folder or document&lt;/li&gt;
 * &lt;/ul&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>Accept self signed certificates (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bindingType" type="xs:string">
      <xs:annotation>
        <xs:documentation>'atompub', 'webservices' or 'browser' (default: 'atompub')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Auth Alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Certificate Password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path (or resource url) to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMediaType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=create&lt;/code&gt;) the mime type used to store the document when it's not set in the input message by a property (default: 'application/octet-stream')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileContentSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;action=create&lt;/code&gt;: the session key that contains the base64 encoded content of the file to use. when &lt;code&gt;action=get&lt;/code&gt; and &lt;code&gt;getproperties=true&lt;/code&gt;: the session key in which the base64 encoded content of the document is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileInputStreamSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;action=create&lt;/code&gt;: the session key that contains the input stream of the file to use. when &lt;code&gt;action=get&lt;/code&gt; and &lt;code&gt;getproperties=true&lt;/code&gt;: the session key in which the input stream of the document is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=create&lt;/code&gt;) the session key that contains the name of the file to use. if not set, the value of the property &lt;code&gt;filename&lt;/code&gt; from the input message is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getDocumentContent" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=get&lt;/code&gt;) if true, the attachment for the document is streamed to &lt;code&gt;fileInputStreamSessionKey&lt;/code&gt; otherwise only the properties are returned (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getProperties" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=get&lt;/code&gt;) if true, the content of the document is streamed to &lt;code&gt;fileinputstreamsessionkey&lt;/code&gt; and all document properties are put in the result as a xml string (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Ignore expired certificate exceptions (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keepSession" type="xs:string">
      <xs:annotation>
        <xs:documentation>if true, the session is not closed at the end and it will be used in the next call (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>KeyManager Algorithm (default: pkix)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Keystore Type (default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overrideEntryPointWSDL" type="xs:string">
      <xs:annotation>
        <xs:documentation>override entrypoint wsdl by reading it from the classpath, overrides url attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation />
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy host url</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy Password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy host port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy Username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="repository" type="xs:string">
      <xs:annotation>
        <xs:documentation>repository id</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnNotFound" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=get&lt;/code&gt;) result returned when no document was found for the given id (e.g. '[not_found]'). if empty an exception is thrown</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=get&lt;/code&gt;) if true, the content of the document is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>the connection timeout in seconds (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>TrustManager Algorithm (default: pkix)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path (or resource url) to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Truststore Password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Truststore Type (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>url to connect to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useRootFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;action=create&lt;/code&gt;) if true, the document is created in the root folder of the repository. otherwise the document is created in the repository (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string" />
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>Ignore certificate hostname validation (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="CommandErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="command" type="xs:string" />
    <xs:attribute name="commandWithArguments" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOut" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="CommandSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="command" type="xs:string" />
    <xs:attribute name="commandWithArguments" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOut" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="CompareIntegerPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey1" type="xs:string">
      <xs:annotation>
        <xs:documentation>reference to one of the session variables to be compared</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey2" type="xs:string">
      <xs:annotation>
        <xs:documentation>reference to the other session variables to be compared</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="CompareStringPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey1" type="xs:string">
      <xs:annotation>
        <xs:documentation>reference to one of the session variables to be compared. Do not use, but use Parameter operand1 instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey2" type="xs:string">
      <xs:annotation>
        <xs:documentation>reference to the other session variables to be compared. Do not use, but use Parameter operand2 instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; the string values to compare are considered to be xml strings and before the actual compare both xml strings are transformed to a canonical form (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="CompressPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compress" type="xs:string">
      <xs:annotation>
        <xs:documentation>if &lt;code&gt;true&lt;/code&gt; the pipe compresses, otherwise it decompress (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="convert2String" type="xs:string">
      <xs:annotation>
        <xs:documentation>if &lt;code&gt;true&lt;/code&gt; result is returned as a string, otherwise as a byte array (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to gz, the gzip format is used. when set to another value, the zip format is used. if not set and direction is compress, the resultiscontent specifies the output format used (resultiscontent=&lt;code&gt;true&lt;/code&gt; -&gt; gzip format, resultiscontent=&lt;code&gt;false&lt;/code&gt; -&gt; zip format) if not set and direction is decompress, the messageiscontent specifies the output format used (messageiscontent=&lt;code&gt;true&lt;/code&gt; -&gt; gzip format, messageiscontent=&lt;code&gt;false&lt;/code&gt; -&gt; zip format)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filenamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>required if result is a file, the pattern for the result filename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIsContent" type="xs:string">
      <xs:annotation>
        <xs:documentation>flag indicates whether the message is the content or the path to a file with the contents. for multiple files use ';' as delimiter (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>required if result is a file, the directory in which to store the result file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultIsContent" type="xs:string">
      <xs:annotation>
        <xs:documentation>flag indicates whether the result must be written to the message or to a file (filename = message) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="zipEntryPattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>the pattern for the zipentry name in case a zipfile is read or written</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ConfigurationType">
    <xs:sequence>
      <xs:element name="Adapter" type="AdapterType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Job" type="JobType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="autoStart" type="xs:string" />
    <xs:attribute name="loadedConfiguration" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="originalConfiguration" type="xs:string" />
    <xs:attribute name="unloadInProgressOrDone" type="xs:string" />
    <xs:attribute name="version" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="CounterSwitchPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="divisor" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: 2)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="CredentialCheckingPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string" />
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultPassword" type="xs:string" />
    <xs:attribute name="defaultUserid" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetPassword" type="xs:string" />
    <xs:attribute name="targetUserid" type="xs:string" />
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="CrlPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="issuerSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the sessionkey that holds a stream to the certificate of the issuer who signed the crl. the steam is closed after reading</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="DelayErrorSenderType">
    <xs:attribute name="delayTime" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time the thread will be put to sleep (default: 5000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="DelayPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delayTime" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time the thread will be put to sleep (default: 5000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="DelaySenderType">
    <xs:attribute name="delayTime" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time the thread will be put to sleep (default: 5000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="DigesterPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="digesterRulesFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of file that containts the rules for xml parsing (default: (none))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="DirectInputWrapperType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, a piperunexception is thrown. otherwise the output is only logged as an error (and returned in a xml string with 'error' tags) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in seconds of obtaining a result (default: 30)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="DirectOutputWrapperType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, a piperunexception is thrown. otherwise the output is only logged as an error (and returned in a xml string with 'error' tags) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in seconds of obtaining a result (default: 30)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="DirectQueryErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobBase64Direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether the streamed blobdata will need to be base64 &lt;code&gt;encode&lt;/code&gt; or &lt;code&gt;decode&lt;/code&gt; or not.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data. If blobCharset and blobSessionKey are not set, blobs are base64 encoded after being read to accommodate for the fact that senders need to return a String (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateBlob': column that contains the BLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateBlob': key of session variable that contains the data (String or InputStream) to be loaded to the BLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the BLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateClob': column that contains the CLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateClob': key of session variable that contains the CLOB (String or InputStream) to be loaded to the CLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the CLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Inputstream is not closed after it has been used to read a BLOB or CLOB (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOutputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Outputstream is not closed after BLOB or CLOB has been written to it (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnsReturned" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of columns whose values are to be returned. Works only if the driver implements jdbc 3.0 getGeneratedKeys()</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="includeFieldDefinition" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the result contains besides the returned rows also a header with information about the fetched fields (default: application default (true))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lockRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of rows to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries (default: -1 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value used in result as contents of fields that contain no value (sql-null) (default: &lt;i&gt;empty string&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="packageContent" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryType" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of: &lt;ul&gt;&lt;li&gt;&lt;code&gt;select&lt;/code&gt; for queries that return data&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateBlob&lt;/code&gt; for queries that update a BLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateClob&lt;/code&gt; for queries that update a CLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;package&lt;/code&gt; to execute Oracle PL/SQL package&lt;/li&gt;&lt;li&gt;&lt;code&gt;other&lt;/code&gt; or anything else for queries that return no data.&lt;/li&gt;&lt;/ul&gt; (default: &lt;code&gt;other&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>Query that can be used to obtain result of side-effect of update-query, like generated value of sequence. Example: SELECT mysequence.currval FROM dual</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rowIdSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If specified, the rowid of the processed row is put in the pipelinesession under the specified key (only applicable for &lt;code&gt;querytype=other&lt;/code&gt;). &lt;b&gt;Note:&lt;/b&gt; If multiple rows are processed a SqlException is thrown.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalar" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the value of the first column of the first row (or the startrow) is returned as the only result, as a simple non-xml value (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalarExtended" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;scalar&lt;/code&gt; is also &lt;code&gt;true&lt;/code&gt;, but returns no value, one of the following is returned: &lt;ul&gt;&lt;li&gt;'[absent]' no row is found&lt;/li&gt;&lt;li&gt;'[null]' a row is found, but the value is a SQL-NULL&lt;/li&gt;&lt;li&gt;'[empty]' a row is found, but the value is a empty string&lt;/li&gt;&lt;/ul&gt; (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startRow" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of the first row to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries. Rows before this are skipped from the output. (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset used when reading a stream (that is e.g. going to be written to a BLOB or CLOB). When empty, the stream is copied directly to the BLOB, without conversion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is streamed to the HttpServletResponse object of the RestServiceDispatcher (instead of passed as a String) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of seconds the driver will wait for a statement object to execute. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="trimSpaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, every string in the message which equals &lt;code&gt;?{paramname+UNP_END+&lt;/code&gt; will be replaced by the setter method for the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="DirectQuerySenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobBase64Direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether the streamed blobdata will need to be base64 &lt;code&gt;encode&lt;/code&gt; or &lt;code&gt;decode&lt;/code&gt; or not.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data. If blobCharset and blobSessionKey are not set, blobs are base64 encoded after being read to accommodate for the fact that senders need to return a String (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateBlob': column that contains the BLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateBlob': key of session variable that contains the data (String or InputStream) to be loaded to the BLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the BLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateClob': column that contains the CLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateClob': key of session variable that contains the CLOB (String or InputStream) to be loaded to the CLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the CLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Inputstream is not closed after it has been used to read a BLOB or CLOB (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOutputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Outputstream is not closed after BLOB or CLOB has been written to it (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnsReturned" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of columns whose values are to be returned. Works only if the driver implements jdbc 3.0 getGeneratedKeys()</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="includeFieldDefinition" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the result contains besides the returned rows also a header with information about the fetched fields (default: application default (true))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lockRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of rows to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries (default: -1 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value used in result as contents of fields that contain no value (sql-null) (default: &lt;i&gt;empty string&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="packageContent" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryType" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of: &lt;ul&gt;&lt;li&gt;&lt;code&gt;select&lt;/code&gt; for queries that return data&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateBlob&lt;/code&gt; for queries that update a BLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateClob&lt;/code&gt; for queries that update a CLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;package&lt;/code&gt; to execute Oracle PL/SQL package&lt;/li&gt;&lt;li&gt;&lt;code&gt;other&lt;/code&gt; or anything else for queries that return no data.&lt;/li&gt;&lt;/ul&gt; (default: &lt;code&gt;other&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>Query that can be used to obtain result of side-effect of update-query, like generated value of sequence. Example: SELECT mysequence.currval FROM dual</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rowIdSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If specified, the rowid of the processed row is put in the pipelinesession under the specified key (only applicable for &lt;code&gt;querytype=other&lt;/code&gt;). &lt;b&gt;Note:&lt;/b&gt; If multiple rows are processed a SqlException is thrown.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalar" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the value of the first column of the first row (or the startrow) is returned as the only result, as a simple non-xml value (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalarExtended" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;scalar&lt;/code&gt; is also &lt;code&gt;true&lt;/code&gt;, but returns no value, one of the following is returned: &lt;ul&gt;&lt;li&gt;'[absent]' no row is found&lt;/li&gt;&lt;li&gt;'[null]' a row is found, but the value is a SQL-NULL&lt;/li&gt;&lt;li&gt;'[empty]' a row is found, but the value is a empty string&lt;/li&gt;&lt;/ul&gt; (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startRow" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of the first row to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries. Rows before this are skipped from the output. (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset used when reading a stream (that is e.g. going to be written to a BLOB or CLOB). When empty, the stream is copied directly to the BLOB, without conversion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is streamed to the HttpServletResponse object of the RestServiceDispatcher (instead of passed as a String) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of seconds the driver will wait for a statement object to execute. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="trimSpaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, every string in the message which equals &lt;code&gt;?{paramname+UNP_END+&lt;/code&gt; will be replaced by the setter method for the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="DirectWrapperPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, a piperunexception is thrown. otherwise the output is only logged as an error (and returned in a xml string with 'error' tags) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in seconds of obtaining a result (default: 30)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="DirectoryCleanerType">
    <xs:attribute name="deleteEmptySubdirectories" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, empty subdirectories will be deleted, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="directory" type="xs:string">
      <xs:annotation>
        <xs:documentation>directory to be cleaned up</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notExistWarn" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about not existing directories (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retention" type="xs:string">
      <xs:annotation>
        <xs:documentation>time (with suffix 'd', 'h', 'm' or 's' in milliseconds) that must have passed at least before a file will be deleted (default: 30d)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subdirectories" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, files in subdirectories will be deleted, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="DirectoryListenerType">
    <xs:attribute name="createFolders" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the folders to look for files and to move files to when being processed and after being processed are created if they are specified and do not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delete" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the file processed will deleted after being processed, and not stored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed, in case the exit-state was not equal to &lt;code&gt;success&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeWildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to be excluded when looking in inputdirectory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileTimeSensitive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the file modification time is used in addition to the filename to determine if a file has been seen before (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inProcessFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;while&lt;/i&gt; being processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files. If not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where a copy of every files that is received is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Determines the contents of the message that is sent to the pipeline. Can be 'name', for the filename, 'path', for the full file path, 'contents' for the contents of the file. For any other value, the attributes of the file are searched and used (default: path)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minStableTime" type="xs:string">
      <xs:annotation>
        <xs:documentation>Minimal age of file in milliseconds, to avoid receiving a file while it is still being written (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>Number of copies held of a file with the same name. Backup files have a dot and a number suffixed to their name. If set to 0, no backups will be kept. (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the destination file will be deleted if it already exists (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processedFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional base folder, that serves as root for all other folders</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to look for in inputdirectory, e.g. '*.inp'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="DomainTransformerPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column labels are stored in (default: label)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the table that contains the mapping (default: mapping)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueInField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column source values are stored in (default: valuein)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueOutField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column destination values are stored in (default: valueout)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="DummyErrorStorageType">
    <xs:attribute name="active" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the messages are stored compressed (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commentField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column comments are stored in (default: comments)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="correlationIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column correlation-ids are stored in (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createTable" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the table is created if it does not exist (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column the timestamp is stored in (default: messagedate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column the timestamps are stored in (default: timestamp)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expiryDateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column the timestamp for expiry is stored in (default: expirydate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hostField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column that stores the hostname of the server (default: host)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="idField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column messageids are stored in (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indexName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the index, to be used in hints for query optimizer too (only for oracle) (default: ix_ibisstore)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column that contains the primary key of the table (default: messagekey)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column that contains the primary key of the table (default: int default autoincrement)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column labels are stored in (default: label)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column message themselves are stored in (default: message)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column message themselves are stored in (default: long binary)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyStoreWhenMessageIdUnique" type="xs:string" />
    <xs:attribute name="order" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to be prefixed on all database objects (tables, indices, sequences), e.q. to access a different oracle schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retention" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in days) to keep the record in the database before making it eligible for deletion by a cleanup process. when set to -1, the record will live on forever (default: 30)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaOwner4Check" type="xs:string">
      <xs:annotation>
        <xs:documentation>schema owner to be used to check the database (default: &amp;lt;current_schema&amp;gt; (only for oracle))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sequenceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the sequence used to generate the primary key (only for oracle) n.b. the default name has been changed in version 4.6 (default: seq_ibisstore)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotId" type="xs:string" />
    <xs:attribute name="slotIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column slotids are stored in (default: slotid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeFullMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the full message is stored with the log. can be set to &lt;code&gt;false&lt;/code&gt; to reduce table size, by avoiding to store the full message (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the table messages are stored in (default: IBISSTORE)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the columns messageid and correlationid, slotid and comments are stored in. n.b. (100) is appended for id's, (1000) is appended for comments. (default: varchar)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are E (error store), M (message store), L (message log for pipe) or A (message log for receiver). ReceiverBase will always set type to E for errorStorage and always set type to A for messageLog. GenericMessageSendingPipe will set type to L for messageLog (when type isn't specified). See {@link MessagestoreSender} for type M (default: E for errorstorage on receiver, A for messageLog on receiver and L for messageLog on Pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="typeField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column types are stored in (default: type)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="DummyMessageLogType">
    <xs:attribute name="active" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the messages are stored compressed (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commentField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column comments are stored in (default: comments)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="correlationIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column correlation-ids are stored in (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createTable" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the table is created if it does not exist (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column the timestamp is stored in (default: messagedate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column the timestamps are stored in (default: timestamp)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expiryDateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column the timestamp for expiry is stored in (default: expirydate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hostField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column that stores the hostname of the server (default: host)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="idField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column messageids are stored in (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indexName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the index, to be used in hints for query optimizer too (only for oracle) (default: ix_ibisstore)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column that contains the primary key of the table (default: messagekey)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column that contains the primary key of the table (default: int default autoincrement)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column labels are stored in (default: label)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column message themselves are stored in (default: message)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column message themselves are stored in (default: long binary)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyStoreWhenMessageIdUnique" type="xs:string" />
    <xs:attribute name="order" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to be prefixed on all database objects (tables, indices, sequences), e.q. to access a different oracle schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retention" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in days) to keep the record in the database before making it eligible for deletion by a cleanup process. when set to -1, the record will live on forever (default: 30)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaOwner4Check" type="xs:string">
      <xs:annotation>
        <xs:documentation>schema owner to be used to check the database (default: &amp;lt;current_schema&amp;gt; (only for oracle))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sequenceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the sequence used to generate the primary key (only for oracle) n.b. the default name has been changed in version 4.6 (default: seq_ibisstore)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotId" type="xs:string" />
    <xs:attribute name="slotIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column slotids are stored in (default: slotid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeFullMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the full message is stored with the log. can be set to &lt;code&gt;false&lt;/code&gt; to reduce table size, by avoiding to store the full message (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the table messages are stored in (default: IBISSTORE)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the columns messageid and correlationid, slotid and comments are stored in. n.b. (100) is appended for id's, (1000) is appended for comments. (default: varchar)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are E (error store), M (message store), L (message log for pipe) or A (message log for receiver). ReceiverBase will always set type to E for errorStorage and always set type to A for messageLog. GenericMessageSendingPipe will set type to L for messageLog (when type isn't specified). See {@link MessagestoreSender} for type M (default: E for errorstorage on receiver, A for messageLog on receiver and L for messageLog on Pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="typeField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column types are stored in (default: type)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EchoErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>hack to allow to introduce a correlationid (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EchoPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="EchoSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>hack to allow to introduce a correlationid (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EsbJmsErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageProtocol" type="xs:string" />
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOut" type="xs:string" />
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EsbJmsErrorStorageType">
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotId" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout for receiving a message from the queue (default: 3000 ms)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are E (error store), M (message store), L (message log for pipe) or A (message log for receiver). ReceiverBase will always set type to E for errorStorage and always set type to A for messageLog. GenericMessageSendingPipe will set type to L for messageLog (when type isn't specified). See {@link MessagestoreSender} for type M (default: E for errorstorage on receiver, A for messageLog on receiver and L for messageLog on Pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EsbJmsListenerType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheMode" type="xs:string" />
    <xs:attribute name="commitOnState" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;i&gt;deprecated&lt;/i&gt; exit state to control commit or rollback of jmssession. only used if &lt;code&gt;jmstransacted&lt;/code&gt; is set true. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="copyAEProperties" type="xs:string" />
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceMessageIdAsCorrelationId" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="listenerPort" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageProtocol" type="xs:string" />
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pollGuardInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>interval in milliseconds for the poll guard to check whether a successful poll was done by the receive (https://docs.oracle.com/javaee/7/api/javax/jms/messageconsumer.html#receive-long-) since last check. when polling has stopped this will be logged and the listener will be stopped and started in an attempt to workaround problems with polling. polling might stop due to bugs in the jms driver/implementation which should be fixed by the supplier. as the poll time includes reading and processing of the message no successful poll might be registered since the last check when message processing takes a long time, hence while messages are being processed the check on last successful poll will be skipped. set to -1 to disable (default: ten times the specified timeout)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyDeliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that reply messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyEncodingStyleURI" type="xs:string" />
    <xs:attribute name="replyMessageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>time that replymessage will live (default: 0 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field of the reply message (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNamespaceURI" type="xs:string" />
    <xs:attribute name="replyPriority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the reply message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapAction" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>receive timeout in milliseconds as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long- (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useReplyTo" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xPathLoggingKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of all xpath keys that need to be logged. (overrides &lt;code&gt;msg.log.keys&lt;/code&gt; property)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EsbJmsMessageLogType">
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotId" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout for receiving a message from the queue (default: 3000 ms)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are E (error store), M (message store), L (message log for pipe) or A (message log for receiver). ReceiverBase will always set type to E for errorStorage and always set type to A for messageLog. GenericMessageSendingPipe will set type to L for messageLog (when type isn't specified). See {@link MessagestoreSender} for type M (default: E for errorstorage on receiver, A for messageLog on receiver and L for messageLog on Pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EsbJmsSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageProtocol" type="xs:string" />
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOut" type="xs:string" />
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EsbSoapInputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cmhVersion" type="xs:string" />
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string" />
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EsbSoapInputWrapperType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addOutputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;outputNamespace&lt;/code&gt; is automatically set using the parameters (if $messagingLayer='P2P' then 'http://nn.nl/XSD/$businessDomain/$applicationName/$applicationFunction' else is serviceContext is not empty 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceContext/$serviceContextVersion/$operationName/$operationVersion' else 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceVersion/$operationName/$operationVersion') (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cmhVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;mode=reg&lt;/code&gt;) Common Message Header version (1 or 2) (default: 1 when &lt;code&gt;mode=reg&lt;/code&gt;, 0 otherwise)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="esbAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as ESB (default: &lt;code&gt;&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fixResultNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt; and the Result tag already exists, the namespace is changed (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;i2t&lt;/code&gt; (ifsa2tibco), &lt;code&gt;reg&lt;/code&gt; (regular) or &lt;code&gt;bis&lt;/code&gt; (Business Integration Services) (default: reg)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="p2pAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as P2P (default: &lt;code&gt;&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retrievePhysicalDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, the physical destination is retrieved from the queue instead of using the parameter &lt;code&gt;destination&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useFixedValues" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the fields CorrelationId, MessageId and Timestamp will have a fixed value (for testing purposes only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EsbSoapOutputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cmhVersion" type="xs:string" />
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string" />
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EsbSoapOutputWrapperType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addOutputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;outputNamespace&lt;/code&gt; is automatically set using the parameters (if $messagingLayer='P2P' then 'http://nn.nl/XSD/$businessDomain/$applicationName/$applicationFunction' else is serviceContext is not empty 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceContext/$serviceContextVersion/$operationName/$operationVersion' else 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceVersion/$operationName/$operationVersion') (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cmhVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;mode=reg&lt;/code&gt;) Common Message Header version (1 or 2) (default: 1 when &lt;code&gt;mode=reg&lt;/code&gt;, 0 otherwise)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="esbAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as ESB (default: &lt;code&gt;&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fixResultNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt; and the Result tag already exists, the namespace is changed (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;i2t&lt;/code&gt; (ifsa2tibco), &lt;code&gt;reg&lt;/code&gt; (regular) or &lt;code&gt;bis&lt;/code&gt; (Business Integration Services) (default: reg)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="p2pAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as P2P (default: &lt;code&gt;&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retrievePhysicalDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, the physical destination is retrieved from the queue instead of using the parameter &lt;code&gt;destination&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useFixedValues" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the fields CorrelationId, MessageId and Timestamp will have a fixed value (for testing purposes only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EsbSoapValidatorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cmhVersion" type="xs:string" />
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EsbSoapWrapperPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addOutputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;outputNamespace&lt;/code&gt; is automatically set using the parameters (if $messagingLayer='P2P' then 'http://nn.nl/XSD/$businessDomain/$applicationName/$applicationFunction' else is serviceContext is not empty 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceContext/$serviceContextVersion/$operationName/$operationVersion' else 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceVersion/$operationName/$operationVersion') (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cmhVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;mode=reg&lt;/code&gt;) Common Message Header version (1 or 2) (default: 1 when &lt;code&gt;mode=reg&lt;/code&gt;, 0 otherwise)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="esbAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as ESB (default: &lt;code&gt;&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fixResultNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt; and the Result tag already exists, the namespace is changed (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;i2t&lt;/code&gt; (ifsa2tibco), &lt;code&gt;reg&lt;/code&gt; (regular) or &lt;code&gt;bis&lt;/code&gt; (Business Integration Services) (default: reg)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="p2pAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as P2P (default: &lt;code&gt;&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retrievePhysicalDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, the physical destination is retrieved from the queue instead of using the parameter &lt;code&gt;destination&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useFixedValues" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the fields CorrelationId, MessageId and Timestamp will have a fixed value (for testing purposes only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="EscapePipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;encode&lt;/code&gt;, &lt;code&gt;decode&lt;/code&gt; or &lt;code&gt;cdata2text&lt;/code&gt; (default: encode)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodeSubstring" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; special characters in &lt;code&gt;substringstart&lt;/code&gt; and &lt;code&gt;substringend&lt;/code&gt; are first translated to their xml equivalents (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="substringEnd" type="xs:string">
      <xs:annotation>
        <xs:documentation>substring to end translation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="substringStart" type="xs:string">
      <xs:annotation>
        <xs:documentation>substring to start translation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="EtagHandlerPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string" />
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restPath" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uriPattern" type="xs:string" />
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ExceptionPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, a piperunexception is thrown. otherwise the output is only logged as an error (and no rollback is performed). (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ExchangeFolderErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to exchange mail server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filter" type="xs:string">
      <xs:annotation>
        <xs:documentation>If empty, all mails are retrieved. If set to &lt;code&gt;NDR&lt;/code&gt; only Non-Delivery Report mails ('bounces') are retrieved</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mailAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>mail address (also used for auto discovery)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to exchange mail server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy authAlias</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when mailAddress is empty) url of the service</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to exchange mail server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ExchangeFolderSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to exchange mail server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filter" type="xs:string">
      <xs:annotation>
        <xs:documentation>If empty, all mails are retrieved. If set to &lt;code&gt;NDR&lt;/code&gt; only Non-Delivery Report mails ('bounces') are retrieved</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mailAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>mail address (also used for auto discovery)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to exchange mail server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy authAlias</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when mailAddress is empty) url of the service</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to exchange mail server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ExchangeMailListenerType">
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to exchange mail server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolders" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the folders to look for files and to move files to when being processed and after being processed are created if they are specified and do not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delete" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the file processed will deleted after being processed, and not stored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed, in case the exit-state was not equal to &lt;code&gt;success&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileTimeSensitive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the file modification time is used in addition to the filename to determine if a file has been seen before (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filter" type="xs:string">
      <xs:annotation>
        <xs:documentation>If empty, all mails are retrieved. If set to &lt;code&gt;NDR&lt;/code&gt; only Non-Delivery Report mails ('bounces') are retrieved</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inProcessFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;while&lt;/i&gt; being processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files. If not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where a copy of every files that is received is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mailAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>The mail address of the mailbox connected to (also used for auto discovery)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Determines the contents of the message that is sent to the pipeline. Can be 'name', for the filename, 'path', for the full file path, 'contents' for the contents of the file. For any other value, the attributes of the file are searched and used (default: path)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minStableTime" type="xs:string">
      <xs:annotation>
        <xs:documentation>Minimal age of file in milliseconds, to avoid receiving a file while it is still being written (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>Number of copies held of a file with the same name. Backup files have a dot and a number suffixed to their name. If set to 0, no backups will be kept. (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the destination file will be deleted if it already exists (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password for authentication to exchange mail server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processedFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy authAlias</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="simple" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the xml string passed to the pipeline only contains the subject of the mail (to save memory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeEmailAsStreamInSessionKey" type="xs:string" />
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>url of the Exchange server. Set to e.g. https://outlook.office365.com/EWS/Exchange.asmx to speed up start up, leave empty to use autodiscovery</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username for authentication to exchange mail server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ExitType">
    <xs:attribute name="code" type="xs:string">
      <xs:annotation>
        <xs:documentation>http statuscode e.g. &lt;code&gt;500&lt;/code&gt; (default: 200)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="empty" type="xs:string">
      <xs:annotation>
        <xs:documentation>when using restlistener and set to &lt;code&gt;true&lt;/code&gt;, this removes the output and shows a blank page, the output is still logged in the ladybug testtool (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="path" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the pipeline exit</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="state" type="xs:string">
      <xs:annotation>
        <xs:documentation>the exit state defines possible exists to the pipeline. the state can be one of the following: &lt;code&gt;success, error&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FileErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="actions" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of actions to be performed. Possible action values: &lt;ul&gt; &lt;li&gt;write: create a new file and write input to it&lt;/li&gt; &lt;li&gt;write_append: create a new file if it does not exist, otherwise append to existing file; then write input to it&lt;/li&gt; &lt;li&gt;create: create a new file, but do not write anything to it&lt;/li&gt; &lt;li&gt;read: read from file&lt;/li&gt; &lt;li&gt;delete: delete the file&lt;/li&gt;&lt;li&gt;read_delete: read the contents, then delete (when outputType is stream the file is deleted after the stream is read)&lt;/li&gt; &lt;li&gt;encode: encode base64&lt;/li&gt; &lt;li&gt;decode: decode base64&lt;/li&gt; &lt;li&gt;list: returns the files and directories in the directory that satisfy the specified filter (see {@link nl.nn.adapterframework.util.Dir2Xml dir2xml}). If a directory is not specified, the fileName is expected to include the directory&lt;/li&gt; &lt;li&gt;info: returns information about the file&lt;/li&gt; &lt;/ul&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>the charset to be used when transforming a string to a byte array and/or the other way around (default: the value of the system property file.encoding)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the directory to read from or write to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteEmptyDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when actions=delete) when set to &lt;code&gt;true&lt;/code&gt;, the directory from which a file is deleted is also deleted when it contains no other files (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="directory" type="xs:string">
      <xs:annotation>
        <xs:documentation>base directory where files are stored in or read from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the file to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>the session key that contains the name of the file to use (only used if filename is not set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileSource" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;filesystem&lt;/code&gt; or &lt;code&gt;classpath&lt;/code&gt; (classpath will only work for actions 'read' and 'info' and for 'info' only when resources are available as a file (i.e. doesn't work for resources in jar files and war files which are deployed without being extracted by the application server)) (default: filesystem)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;stream&lt;/code&gt; or &lt;code&gt;base64&lt;/code&gt; (default: string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipBOM" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a possible bytes order mark (bom) at the start of the file is skipped (only used for the action read and encoding uft-8) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when outputtype=stream) if set, the result is streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="testCanWrite" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a test is performed to find out if a temporary file can be created and deleted in the specified directory (only used if directory is set and combined with the action write, write_append or create) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeLineSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a line separator is written after the content is written (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>suffix of the file to be created (only used if filename and filenamesession are not set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FileLineIteratorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addInputToResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;combineBlocks = true&lt;/code&gt;, this string is inserted at the start of each block. Requires &lt;code&gt;blockSize&lt;/code&gt; or &lt;code&gt;startPosition&lt;/code&gt; and &lt;code&gt;endPosition&lt;/code&gt; to be set too. (default: &amp;lt;block&amp;gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. If set to a value greater than 0, it specifies the number of rows send in a block to the sender. (default: 0 (one line at a time, no prefix of suffix))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;combineBlocks = true&lt;/code&gt;, this string is inserted at the end of the set of lines. Requires &lt;code&gt;blockSize&lt;/code&gt; or &lt;code&gt;startPosition&lt;/code&gt; and &lt;code&gt;endPosition&lt;/code&gt; to be set too. (default: &amp;lt;/block&amp;gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned. Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="combineBlocks" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, all items in a block are sent at once. If set false, items are sent individually, potentially leveraging block enabled sending capabilities of the sender (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endOfLineString" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, each line has to end with this string. if the line doesn't end with this string next lines are added (including line separators) until the total line ends with the given string</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endPosition" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;endPosition &amp;gt;= startPosition&lt;/code&gt;, this field contains the end position of the key in the current record (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="escapeXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>Escape XML characters in each item (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreExceptions" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemNoSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linePrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>This string is inserted at the start of each item</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>This string is appended at the end of each item</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>either MESSAGEID or CORRELATIONID. For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxChildThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe) (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxItems" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="move2dirAfterError" type="xs:string">
      <xs:annotation>
        <xs:documentation>directory to which the inputfile is moved in case an error occurs</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="move2dirAfterTransform" type="xs:string">
      <xs:annotation>
        <xs:documentation>directory in which the transformed file(s) is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either 'text' or 'xml'. only valid for xpathexpression (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parallel" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time (in seconds) after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts (default: 10 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeDuplicates" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeXmlDeclarationInResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startPosition" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;startPosition &amp;gt;= 0&lt;/code&gt;, this field contains the start position of the key in the current record (first character is 0); A sequence of lines with the same key is put in one block and send to the sender. Cannot be used in combination with blockSize. (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopConditionXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Expression evaluated on each result if set. Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used. This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is first base64 decoded and then streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FilePipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="actions" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of actions to be performed. Possible action values: &lt;ul&gt; &lt;li&gt;write: create a new file and write input to it&lt;/li&gt; &lt;li&gt;write_append: create a new file if it does not exist, otherwise append to existing file; then write input to it&lt;/li&gt; &lt;li&gt;create: create a new file, but do not write anything to it&lt;/li&gt; &lt;li&gt;read: read from file&lt;/li&gt; &lt;li&gt;delete: delete the file&lt;/li&gt;&lt;li&gt;read_delete: read the contents, then delete (when outputType is stream the file is deleted after the stream is read)&lt;/li&gt; &lt;li&gt;encode: encode base64&lt;/li&gt; &lt;li&gt;decode: decode base64&lt;/li&gt; &lt;li&gt;list: returns the files and directories in the directory that satisfy the specified filter (see {@link nl.nn.adapterframework.util.Dir2Xml dir2xml}). If a directory is not specified, the fileName is expected to include the directory&lt;/li&gt; &lt;li&gt;info: returns information about the file&lt;/li&gt; &lt;/ul&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>the charset to be used when transforming a string to a byte array and/or the other way around (default: the value of the system property file.encoding)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the directory to read from or write to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteEmptyDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when actions=delete) when set to &lt;code&gt;true&lt;/code&gt;, the directory from which a file is deleted is also deleted when it contains no other files (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="directory" type="xs:string">
      <xs:annotation>
        <xs:documentation>base directory where files are stored in or read from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the file to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>the session key that contains the name of the file to use (only used if filename is not set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileSource" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;filesystem&lt;/code&gt; or &lt;code&gt;classpath&lt;/code&gt; (classpath will only work for actions 'read' and 'info' and for 'info' only when resources are available as a file (i.e. doesn't work for resources in jar files and war files which are deployed without being extracted by the application server)) (default: filesystem)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;stream&lt;/code&gt; or &lt;code&gt;base64&lt;/code&gt; (default: string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipBOM" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a possible bytes order mark (bom) at the start of the file is skipped (only used for the action read and encoding uft-8) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when outputtype=stream) if set, the result is streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="testCanWrite" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a test is performed to find out if a temporary file can be created and deleted in the specified directory (only used if directory is set and combined with the action write, write_append or create) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeLineSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a line separator is written after the content is written (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>suffix of the file to be created (only used if filename and filenamesession are not set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="FileRecordListenerType">
    <xs:attribute name="directoryProcessedFiles" type="xs:string">
      <xs:annotation>
        <xs:documentation>the directory to store processed files in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>set the directory name to look in for files.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener as known to the adapter.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseTime" type="xs:string">
      <xs:annotation>
        <xs:documentation>set the time to delay when no records are to be processed and this class has to look for the arrival of a new file (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeFileNameInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the name of the read file is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>the {@link nl.nn.adapterframework.util.wildcardfilter wildcard} to look for files in the specified directory, e.g. "*.inp"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FileSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="actions" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of actions to be performed. Possible action values: &lt;ul&gt; &lt;li&gt;write: create a new file and write input to it&lt;/li&gt; &lt;li&gt;write_append: create a new file if it does not exist, otherwise append to existing file; then write input to it&lt;/li&gt; &lt;li&gt;create: create a new file, but do not write anything to it&lt;/li&gt; &lt;li&gt;read: read from file&lt;/li&gt; &lt;li&gt;delete: delete the file&lt;/li&gt;&lt;li&gt;read_delete: read the contents, then delete (when outputType is stream the file is deleted after the stream is read)&lt;/li&gt; &lt;li&gt;encode: encode base64&lt;/li&gt; &lt;li&gt;decode: decode base64&lt;/li&gt; &lt;li&gt;list: returns the files and directories in the directory that satisfy the specified filter (see {@link nl.nn.adapterframework.util.Dir2Xml dir2xml}). If a directory is not specified, the fileName is expected to include the directory&lt;/li&gt; &lt;li&gt;info: returns information about the file&lt;/li&gt; &lt;/ul&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>the charset to be used when transforming a string to a byte array and/or the other way around (default: the value of the system property file.encoding)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the directory to read from or write to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteEmptyDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when actions=delete) when set to &lt;code&gt;true&lt;/code&gt;, the directory from which a file is deleted is also deleted when it contains no other files (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="directory" type="xs:string">
      <xs:annotation>
        <xs:documentation>base directory where files are stored in or read from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the file to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>the session key that contains the name of the file to use (only used if filename is not set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileSource" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;filesystem&lt;/code&gt; or &lt;code&gt;classpath&lt;/code&gt; (classpath will only work for actions 'read' and 'info' and for 'info' only when resources are available as a file (i.e. doesn't work for resources in jar files and war files which are deployed without being extracted by the application server)) (default: filesystem)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;stream&lt;/code&gt; or &lt;code&gt;base64&lt;/code&gt; (default: string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipBOM" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a possible bytes order mark (bom) at the start of the file is skipped (only used for the action read and encoding uft-8) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when outputtype=stream) if set, the result is streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="testCanWrite" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a test is performed to find out if a temporary file can be created and deleted in the specified directory (only used if directory is set and combined with the action write, write_append or create) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeLineSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a line separator is written after the content is written (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>suffix of the file to be created (only used if filename and filenamesession are not set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FileSystemErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FileSystemPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="FileSystemSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FileSystemSenderWithAttachmentsSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FilenameSwitchPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notFoundForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when the forward or pipename derived from the filename that was the input could not be found.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="toLowercase" type="xs:string">
      <xs:annotation>
        <xs:documentation>convert the result to lowercase, before searching for a corresponding forward (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="FixedQueryErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="batchSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set larger than 0 and used as a child of an IteratingPipe, then the database calls are made in batches of this size. Only for queryType=other. (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobBase64Direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether the streamed blobdata will need to be base64 &lt;code&gt;encode&lt;/code&gt; or &lt;code&gt;decode&lt;/code&gt; or not.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data. If blobCharset and blobSessionKey are not set, blobs are base64 encoded after being read to accommodate for the fact that senders need to return a String (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateBlob': column that contains the BLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateBlob': key of session variable that contains the data (String or InputStream) to be loaded to the BLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the BLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateClob': column that contains the CLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateClob': key of session variable that contains the CLOB (String or InputStream) to be loaded to the CLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the CLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Inputstream is not closed after it has been used to read a BLOB or CLOB (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOutputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Outputstream is not closed after BLOB or CLOB has been written to it (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnsReturned" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of columns whose values are to be returned. Works only if the driver implements jdbc 3.0 getGeneratedKeys()</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="includeFieldDefinition" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the result contains besides the returned rows also a header with information about the fetched fields (default: application default (true))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lockRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of rows to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries (default: -1 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value used in result as contents of fields that contain no value (sql-null) (default: &lt;i&gt;empty string&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="packageContent" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text to be excecuted each time sendMessage() is called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryType" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of: &lt;ul&gt;&lt;li&gt;&lt;code&gt;select&lt;/code&gt; for queries that return data&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateBlob&lt;/code&gt; for queries that update a BLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateClob&lt;/code&gt; for queries that update a CLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;package&lt;/code&gt; to execute Oracle PL/SQL package&lt;/li&gt;&lt;li&gt;&lt;code&gt;other&lt;/code&gt; or anything else for queries that return no data.&lt;/li&gt;&lt;/ul&gt; (default: &lt;code&gt;other&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>Query that can be used to obtain result of side-effect of update-query, like generated value of sequence. Example: SELECT mysequence.currval FROM dual</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rowIdSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If specified, the rowid of the processed row is put in the pipelinesession under the specified key (only applicable for &lt;code&gt;querytype=other&lt;/code&gt;). &lt;b&gt;Note:&lt;/b&gt; If multiple rows are processed a SqlException is thrown.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalar" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the value of the first column of the first row (or the startrow) is returned as the only result, as a simple non-xml value (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalarExtended" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;scalar&lt;/code&gt; is also &lt;code&gt;true&lt;/code&gt;, but returns no value, one of the following is returned: &lt;ul&gt;&lt;li&gt;'[absent]' no row is found&lt;/li&gt;&lt;li&gt;'[null]' a row is found, but the value is a SQL-NULL&lt;/li&gt;&lt;li&gt;'[empty]' a row is found, but the value is a empty string&lt;/li&gt;&lt;/ul&gt; (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startRow" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of the first row to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries. Rows before this are skipped from the output. (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset used when reading a stream (that is e.g. going to be written to a BLOB or CLOB). When empty, the stream is copied directly to the BLOB, without conversion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is streamed to the HttpServletResponse object of the RestServiceDispatcher (instead of passed as a String) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of seconds the driver will wait for a statement object to execute. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="trimSpaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, every string in the message which equals &lt;code&gt;?{paramname+UNP_END+&lt;/code&gt; will be replaced by the setter method for the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FixedQuerySenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="batchSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set larger than 0 and used as a child of an IteratingPipe, then the database calls are made in batches of this size. Only for queryType=other. (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobBase64Direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether the streamed blobdata will need to be base64 &lt;code&gt;encode&lt;/code&gt; or &lt;code&gt;decode&lt;/code&gt; or not.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data. If blobCharset and blobSessionKey are not set, blobs are base64 encoded after being read to accommodate for the fact that senders need to return a String (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateBlob': column that contains the BLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateBlob': key of session variable that contains the data (String or InputStream) to be loaded to the BLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the BLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateClob': column that contains the CLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateClob': key of session variable that contains the CLOB (String or InputStream) to be loaded to the CLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the CLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Inputstream is not closed after it has been used to read a BLOB or CLOB (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOutputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Outputstream is not closed after BLOB or CLOB has been written to it (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnsReturned" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of columns whose values are to be returned. Works only if the driver implements jdbc 3.0 getGeneratedKeys()</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="includeFieldDefinition" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the result contains besides the returned rows also a header with information about the fetched fields (default: application default (true))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lockRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of rows to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries (default: -1 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value used in result as contents of fields that contain no value (sql-null) (default: &lt;i&gt;empty string&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="packageContent" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text to be excecuted each time sendMessage() is called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryType" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of: &lt;ul&gt;&lt;li&gt;&lt;code&gt;select&lt;/code&gt; for queries that return data&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateBlob&lt;/code&gt; for queries that update a BLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateClob&lt;/code&gt; for queries that update a CLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;package&lt;/code&gt; to execute Oracle PL/SQL package&lt;/li&gt;&lt;li&gt;&lt;code&gt;other&lt;/code&gt; or anything else for queries that return no data.&lt;/li&gt;&lt;/ul&gt; (default: &lt;code&gt;other&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>Query that can be used to obtain result of side-effect of update-query, like generated value of sequence. Example: SELECT mysequence.currval FROM dual</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rowIdSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If specified, the rowid of the processed row is put in the pipelinesession under the specified key (only applicable for &lt;code&gt;querytype=other&lt;/code&gt;). &lt;b&gt;Note:&lt;/b&gt; If multiple rows are processed a SqlException is thrown.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalar" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the value of the first column of the first row (or the startrow) is returned as the only result, as a simple non-xml value (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalarExtended" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;scalar&lt;/code&gt; is also &lt;code&gt;true&lt;/code&gt;, but returns no value, one of the following is returned: &lt;ul&gt;&lt;li&gt;'[absent]' no row is found&lt;/li&gt;&lt;li&gt;'[null]' a row is found, but the value is a SQL-NULL&lt;/li&gt;&lt;li&gt;'[empty]' a row is found, but the value is a empty string&lt;/li&gt;&lt;/ul&gt; (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startRow" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of the first row to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries. Rows before this are skipped from the output. (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset used when reading a stream (that is e.g. going to be written to a BLOB or CLOB). When empty, the stream is copied directly to the BLOB, without conversion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is streamed to the HttpServletResponse object of the RestServiceDispatcher (instead of passed as a String) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of seconds the driver will wait for a statement object to execute. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="trimSpaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, every string in the message which equals &lt;code&gt;?{paramname+UNP_END+&lt;/code&gt; will be replaced by the setter method for the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FixedResultErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="fileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file containing the resultmessage</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceFrom" type="xs:string" />
    <xs:attribute name="replaceTo" type="xs:string" />
    <xs:attribute name="returnString" type="xs:string">
      <xs:annotation>
        <xs:documentation>returned message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string" />
    <xs:attribute name="substituteVars" type="xs:string">
      <xs:annotation>
        <xs:documentation>should values between ${ and } be resolved from the pipelinesession (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FixedResultPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file containing the resultmessage</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the session key containing the file name of the file containing the result message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="lookupAtRuntime" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the lookup of the file will be done at runtime instead of at configuration time (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="replaceFixedParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, any parameter is used for replacements but with &lt;code&gt;name-of-parameter&lt;/code&gt; and not &lt;code&gt;${name-of-parameter}&lt;/code&gt; (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceFrom" type="xs:string" />
    <xs:attribute name="replaceTo" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnString" type="xs:string">
      <xs:annotation>
        <xs:documentation>returned message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string" />
    <xs:attribute name="substituteVars" type="xs:string">
      <xs:annotation>
        <xs:documentation>should values between ${ and } be resolved from the pipelinesession (search order: 1) system properties 2) pipelinesession variables 3) application properties) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="FixedResultSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="fileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file containing the resultmessage</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceFrom" type="xs:string" />
    <xs:attribute name="replaceTo" type="xs:string" />
    <xs:attribute name="returnString" type="xs:string">
      <xs:annotation>
        <xs:documentation>returned message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string" />
    <xs:attribute name="substituteVars" type="xs:string">
      <xs:annotation>
        <xs:documentation>should values between ${ and } be resolved from the pipelinesession (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ForEachAttachmentPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addInputToResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. when set to a value greater than 0, it specifies the number of rows send in a block to the sender. (default: 0 (one line at a time, no prefix of suffix))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned. Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeProperties" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of attachment properties not to list. When specified, 'onlyProperties' is ignored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreExceptions" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemNoSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>either MESSAGEID or CORRELATIONID. For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxChildThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe) (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxItems" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyProperties" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of attachment properties to list</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either 'text' or 'xml'. only valid for xpathexpression (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parallel" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time (in seconds) after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts (default: 10 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeDuplicates" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeXmlDeclarationInResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopConditionXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Expression evaluated on each result if set. Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used. This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is first base64 decoded and then streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ForEachChildElementPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addInputToResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;combineBlocks = true&lt;/code&gt;, this string is inserted at the start of each block. Requires &lt;code&gt;blockSize&lt;/code&gt; or &lt;code&gt;startPosition&lt;/code&gt; and &lt;code&gt;endPosition&lt;/code&gt; to be set too. (default: &amp;lt;block&amp;gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. If set to a value greater than 0, it specifies the number of rows send in a block to the sender. (default: 0 (one line at a time, no prefix of suffix))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;combineBlocks = true&lt;/code&gt;, this string is inserted at the end of the set of lines. Requires &lt;code&gt;blockSize&lt;/code&gt; or &lt;code&gt;startPosition&lt;/code&gt; and &lt;code&gt;endPosition&lt;/code&gt; to be set too. (default: &amp;lt;/block&amp;gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file or inputstream, only used when {@link #setProcessFile(boolean) processFile} is &lt;code&gt;true&lt;/code&gt;, or the input is of type InputStream (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned. Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="combineBlocks" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, all items in a block are sent at once. If set false, items are sent individually, potentially leveraging block enabled sending capabilities of the sender (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="containerElement" type="xs:string">
      <xs:annotation>
        <xs:documentation>Element name (not an XPath-expression), qualified via attribute &lt;code&gt;namespaceDefs&lt;/code&gt;, used to determine the 'root' of elements to be iterated over, i.e. the root of the set of child elements. When empty, the pipe will iterate over each direct child element of the root</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath-expression used to determine the set of elements to be iterated over, i.e. the set of child elements. When empty, the effective value is /*/*, i.e. the pipe will iterate over each direct child element of the root. Be aware that memory consumption appears to increase with file size when this attribute is used. When possible, use containerElement and/or targetElement instead.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endPosition" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;endPosition &amp;gt;= startPosition&lt;/code&gt;, this field contains the end position of the key in the current record (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="escapeXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>Escape XML characters in each item (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreExceptions" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemNoSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linePrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>This string is inserted at the start of each item</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>This string is appended at the end of each item</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>either MESSAGEID or CORRELATIONID. For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxChildThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe) (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxItems" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either 'text' or 'xml'. only valid for xpathexpression (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parallel" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time (in seconds) after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts (default: 10 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of a file to be processed. Otherwise, the input itself is transformed. The character encoding will be read from the XML declaration (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeDuplicates" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeXmlDeclarationInResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startPosition" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;startPosition &amp;gt;= 0&lt;/code&gt;, this field contains the start position of the key in the current record (first character is 0); A sequence of lines with the same key is put in one block and send to the sender. Cannot be used in combination with blockSize. (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopConditionXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Expression evaluated on each result if set. Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used. This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is first base64 decoded and then streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetElement" type="xs:string">
      <xs:annotation>
        <xs:documentation>Element name (not an XPath-expression), qualified via attribute &lt;code&gt;namespaceDefs&lt;/code&gt;, used to determine the type of elements to be iterated over, i.e. the element name of each of the child elements. When empty, the pipe will iterate over any direct child element of the root or specified containerElement</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xslt2" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, supporting XPath 2.0, otherwise xslt processor 1.0 (org.apache.xalan), supporting XPath 1.0. N.B. Be aware that setting this other than 1 might cause the input file being read as a whole in to memory, as Xslt Streaming is currently only supported by the XsltProcessor that is used for xsltVersion=1 (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ForwardType">
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="path" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="FtpErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) if true, the server certificate can be self signed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consoleKnownHostsVerifier" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp)  (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileType" type="xs:string">
      <xs:annotation>
        <xs:documentation>file type, one of ascii, binary</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ftpTypeDescription" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of ftp, sftp, ftps(i) or ftpsi, ftpsx(ssl), ftpsx(tls) (default: ftp)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>name or ip adres of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jdk13Compatibility" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) enables the use of certificates on jdk 1.3.x. the sun reference implementation jsse 1.0.3 is included for convenience (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>selects the algorithm to generate keymanagers. can be left empty to use the servers default algorithm (default: websphere: ibmx509)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyboardInteractive" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, keyboardinteractive is used to login (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="knownHostsPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) path to file with knownhosts</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIsContent" type="xs:string">
      <xs:annotation>
        <xs:documentation>if true, the contents of the message is send, otherwise it message contains the local filenames of the files to be send (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="passive" type="xs:string">
      <xs:annotation>
        <xs:documentation>if true, passive ftp is used: before data is sent, a pasv command is issued, and the connection is set up by the server (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the password to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>portnumber of remote host (default: 21)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefCSEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) optional preferred encryption from client to server for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefSCEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) optional preferred encryption from server to client for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) name of the alias to obtain credentials for passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyFilePath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) path to private key file for sftp authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protP" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) if true, the server returns data via another socket (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the alias to obtain credentials to authenticate on proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>default password in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 1080)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyTransportType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) transport type in case of sftp (1=standard, 2=http, 3=socks4, 4=socks5) (default: 4)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>default user name in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>remote directory in which files have to be uploaded</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteFilenamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename pattern for uploaded files</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>selects the algorithm to generate trustmanagers. can be left empty to use the servers default algorithm (default: websphere: ibmx509)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the user to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FtpFileRetrieverPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) if true, the server certificate can be self signed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consoleKnownHostsVerifier" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp)  (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteAfterGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if true, the remote file is deleted after it is retrieved (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileType" type="xs:string">
      <xs:annotation>
        <xs:documentation>file type, one of ascii, binary</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ftpTypeDescription" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of ftp, sftp, ftps(i) or ftpsi, ftpsx(ssl), ftpsx(tls) (default: ftp)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>name or ip adres of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jdk13Compatibility" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) enables the use of certificates on jdk 1.3.x. the sun reference implementation jsse 1.0.3 is included for convenience (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>selects the algorithm to generate keymanagers. can be left empty to use the servers default algorithm (default: websphere: ibmx509)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyboardInteractive" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, keyboardinteractive is used to login (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="knownHostsPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) path to file with knownhosts</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="localDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>local directory in which files have to be downloaded</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="localFilenamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>pattern (in messageformat) of the local filename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIsContent" type="xs:string">
      <xs:annotation>
        <xs:documentation>if true, the contents of the message is send, otherwise it message contains the local filenames of the files to be send (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="passive" type="xs:string">
      <xs:annotation>
        <xs:documentation>if true, passive ftp is used: before data is sent, a pasv command is issued, and the connection is set up by the server (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the password to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>portnumber of remote host (default: 21)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefCSEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) optional preferred encryption from client to server for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefSCEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) optional preferred encryption from server to client for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) name of the alias to obtain credentials for passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyFilePath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) path to private key file for sftp authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protP" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) if true, the server returns data via another socket (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the alias to obtain credentials to authenticate on proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>default password in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 1080)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyTransportType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) transport type in case of sftp (1=standard, 2=http, 3=socks4, 4=socks5) (default: 4)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>default user name in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>remote directory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>selects the algorithm to generate trustmanagers. can be left empty to use the servers default algorithm (default: websphere: ibmx509)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the user to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="FtpFileSystemErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) if true, the server certificate can be self signed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the alias to obtain credentials to authenticate on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consoleKnownHostsVerifier" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp)  (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileType" type="xs:string">
      <xs:annotation>
        <xs:documentation>File type, one of ascii, binary</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ftpTypeDescription" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of ftp, sftp, ftps(i) or ftpsi, ftpsx(ssl), ftpsx(tls) (default: ftp)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name or ip address of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jdk13Compatibility" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) enables the use of certificates on jdk 1.3.x. the sun reference implementation jsse 1.0.3 is included for convenience (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Selects the algorithm to generate keymanagers. can be left empty to use the servers default algorithm (default: websphere: ibmx509)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyboardInteractive" type="xs:string">
      <xs:annotation>
        <xs:documentation>When true, keyboardinteractive is used to login (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="knownHostsPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) path to file with knownhosts</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIsContent" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the contents of the message is send, otherwise it message contains the local filenames of the files to be send (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="passive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, passive ftp is used: before data is sent, a pasv command is issued, and the connection is set up by the server (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password of the user to authenticate on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>Port number of remote host (default: 21)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefCSEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) optional preferred encryption from client to server for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefSCEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) optional preferred encryption from server to client for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) name of the alias to obtain credentials for passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyFilePath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) path to private key file for sftp authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protP" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) if true, the server returns data via another socket (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the alias to obtain credentials to authenticate on proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy host name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy port (default: 1080)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyTransportType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) transport type in case of sftp (1=standard, 2=http, 3=socks4, 4=socks5) (default: 4)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default user name in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>pathname of The file or directory to list. (default: Home folder of the ftp user.)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Selects the algorithm to generate trustmanagers. can be left empty to use the servers default algorithm (default: websphere: ibmx509)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the user to authenticate on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FtpFileSystemSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) if true, the server certificate can be self signed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the alias to obtain credentials to authenticate on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consoleKnownHostsVerifier" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp)  (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileType" type="xs:string">
      <xs:annotation>
        <xs:documentation>File type, one of ascii, binary</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ftpTypeDescription" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of ftp, sftp, ftps(i) or ftpsi, ftpsx(ssl), ftpsx(tls) (default: ftp)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name or ip address of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jdk13Compatibility" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) enables the use of certificates on jdk 1.3.x. the sun reference implementation jsse 1.0.3 is included for convenience (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Selects the algorithm to generate keymanagers. can be left empty to use the servers default algorithm (default: websphere: ibmx509)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyboardInteractive" type="xs:string">
      <xs:annotation>
        <xs:documentation>When true, keyboardinteractive is used to login (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="knownHostsPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) path to file with knownhosts</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIsContent" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the contents of the message is send, otherwise it message contains the local filenames of the files to be send (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="passive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, passive ftp is used: before data is sent, a pasv command is issued, and the connection is set up by the server (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password of the user to authenticate on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>Port number of remote host (default: 21)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefCSEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) optional preferred encryption from client to server for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefSCEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) optional preferred encryption from server to client for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) name of the alias to obtain credentials for passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyFilePath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) path to private key file for sftp authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protP" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) if true, the server returns data via another socket (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the alias to obtain credentials to authenticate on proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy host name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy port (default: 1080)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyTransportType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) transport type in case of sftp (1=standard, 2=http, 3=socks4, 4=socks5) (default: 4)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default user name in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>pathname of The file or directory to list. (default: Home folder of the ftp user.)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Selects the algorithm to generate trustmanagers. can be left empty to use the servers default algorithm (default: websphere: ibmx509)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the user to authenticate on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FtpListenerType">
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) if true, the server certificate can be self signed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consoleKnownHostsVerifier" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp)  (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileType" type="xs:string">
      <xs:annotation>
        <xs:documentation>file type, one of ascii, binary</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ftpTypeDescription" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of ftp, sftp, ftps(i) or ftpsi, ftpsx(ssl), ftpsx(tls) (default: ftp)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>name or ip adres of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jdk13Compatibility" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) enables the use of certificates on jdk 1.3.x. the sun reference implementation jsse 1.0.3 is included for convenience (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>selects the algorithm to generate keymanagers. can be left empty to use the servers default algorithm (default: websphere: ibmx509)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyboardInteractive" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, keyboardinteractive is used to login (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="knownHostsPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) path to file with knownhosts</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIsContent" type="xs:string">
      <xs:annotation>
        <xs:documentation>if true, the contents of the message is send, otherwise it message contains the local filenames of the files to be send (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="passive" type="xs:string">
      <xs:annotation>
        <xs:documentation>if true, passive ftp is used: before data is sent, a pasv command is issued, and the connection is set up by the server (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the password to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>portnumber of remote host (default: 21)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefCSEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) optional preferred encryption from client to server for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefSCEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) optional preferred encryption from server to client for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) name of the alias to obtain credentials for passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyFilePath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) path to private key file for sftp authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protP" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) if true, the server returns data via another socket (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the alias to obtain credentials to authenticate on proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>default password in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 1080)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyTransportType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) transport type in case of sftp (1=standard, 2=http, 3=socks4, 4=socks5) (default: 4)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>default user name in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>remote directory from which files have to be downloaded</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseTime" type="xs:string">
      <xs:annotation>
        <xs:documentation>time between pollings (default: 3600000 (one hour))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>selects the algorithm to generate trustmanagers. can be left empty to use the servers default algorithm (default: websphere: ibmx509)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the user to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FtpSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) if true, the server certificate can be self signed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consoleKnownHostsVerifier" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp)  (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileType" type="xs:string">
      <xs:annotation>
        <xs:documentation>file type, one of ascii, binary</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ftpTypeDescription" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of ftp, sftp, ftps(i) or ftpsi, ftpsx(ssl), ftpsx(tls) (default: ftp)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>name or ip adres of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jdk13Compatibility" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) enables the use of certificates on jdk 1.3.x. the sun reference implementation jsse 1.0.3 is included for convenience (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>selects the algorithm to generate keymanagers. can be left empty to use the servers default algorithm (default: websphere: ibmx509)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyboardInteractive" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, keyboardinteractive is used to login (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="knownHostsPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) path to file with knownhosts</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIsContent" type="xs:string">
      <xs:annotation>
        <xs:documentation>if true, the contents of the message is send, otherwise it message contains the local filenames of the files to be send (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="passive" type="xs:string">
      <xs:annotation>
        <xs:documentation>if true, passive ftp is used: before data is sent, a pasv command is issued, and the connection is set up by the server (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the password to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>portnumber of remote host (default: 21)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefCSEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) optional preferred encryption from client to server for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefSCEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) optional preferred encryption from server to client for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) name of the alias to obtain credentials for passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyFilePath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) path to private key file for sftp authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protP" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) if true, the server returns data via another socket (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the alias to obtain credentials to authenticate on proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>default password in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 1080)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyTransportType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) transport type in case of sftp (1=standard, 2=http, 3=socks4, 4=socks5) (default: 4)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>default user name in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>remote directory in which files have to be uploaded</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteFilenamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename pattern for uploaded files</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>selects the algorithm to generate trustmanagers. can be left empty to use the servers default algorithm (default: websphere: ibmx509)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps)  (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the user to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FxfInputWrapperType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addOutputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;outputNamespace&lt;/code&gt; is automatically set using the parameters (if $messagingLayer='P2P' then 'http://nn.nl/XSD/$businessDomain/$applicationName/$applicationFunction' else is serviceContext is not empty 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceContext/$serviceContextVersion/$operationName/$operationVersion' else 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceVersion/$operationName/$operationVersion') (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientFilenameSessionKey" type="xs:string" />
    <xs:attribute name="cmhVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;mode=reg&lt;/code&gt;) Common Message Header version (1 or 2) (default: 1 when &lt;code&gt;mode=reg&lt;/code&gt;, 0 otherwise)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="esbAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as ESB (default: &lt;code&gt;&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fixResultNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt; and the Result tag already exists, the namespace is changed (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="flowId" type="xs:string" />
    <xs:attribute name="flowIdSessionKey" type="xs:string" />
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fxfDirSessionKey" type="xs:string" />
    <xs:attribute name="fxfFileSessionKey" type="xs:string" />
    <xs:attribute name="fxfVersion" type="xs:string" />
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;i2t&lt;/code&gt; (ifsa2tibco), &lt;code&gt;reg&lt;/code&gt; (regular) or &lt;code&gt;bis&lt;/code&gt; (Business Integration Services) (default: reg)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="p2pAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as P2P (default: &lt;code&gt;&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retrievePhysicalDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, the physical destination is retrieved from the queue instead of using the parameter &lt;code&gt;destination&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodySessionKey" type="xs:string" />
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transferFlowIdSessionKey" type="xs:string" />
    <xs:attribute name="transformFilename" type="xs:string" />
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useFixedValues" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the fields CorrelationId, MessageId and Timestamp will have a fixed value (for testing purposes only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FxfListenerType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheMode" type="xs:string" />
    <xs:attribute name="commitOnState" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;i&gt;deprecated&lt;/i&gt; exit state to control commit or rollback of jmssession. only used if &lt;code&gt;jmstransacted&lt;/code&gt; is set true. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="copyAEProperties" type="xs:string" />
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createProcessedDirectory" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceMessageIdAsCorrelationId" type="xs:string" />
    <xs:attribute name="fxfFileSessionKey" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="listenerPort" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageProtocol" type="xs:string" />
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="moveProcessedFile" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pollGuardInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>interval in milliseconds for the poll guard to check whether a successful poll was done by the receive (https://docs.oracle.com/javaee/7/api/javax/jms/messageconsumer.html#receive-long-) since last check. when polling has stopped this will be logged and the listener will be stopped and started in an attempt to workaround problems with polling. polling might stop due to bugs in the jms driver/implementation which should be fixed by the supplier. as the poll time includes reading and processing of the message no successful poll might be registered since the last check when message processing takes a long time, hence while messages are being processed the check on last successful poll will be skipped. set to -1 to disable (default: ten times the specified timeout)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processedSiblingDirectory" type="xs:string" />
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyDeliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that reply messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyEncodingStyleURI" type="xs:string" />
    <xs:attribute name="replyMessageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>time that replymessage will live (default: 0 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field of the reply message (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNamespaceURI" type="xs:string" />
    <xs:attribute name="replyPriority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the reply message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapAction" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>receive timeout in milliseconds as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long- (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useReplyTo" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xPathLoggingKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of all xpath keys that need to be logged. (overrides &lt;code&gt;msg.log.keys&lt;/code&gt; property)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FxfOutputWrapperType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addOutputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;outputNamespace&lt;/code&gt; is automatically set using the parameters (if $messagingLayer='P2P' then 'http://nn.nl/XSD/$businessDomain/$applicationName/$applicationFunction' else is serviceContext is not empty 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceContext/$serviceContextVersion/$operationName/$operationVersion' else 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceVersion/$operationName/$operationVersion') (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientFilenameSessionKey" type="xs:string" />
    <xs:attribute name="cmhVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;mode=reg&lt;/code&gt;) Common Message Header version (1 or 2) (default: 1 when &lt;code&gt;mode=reg&lt;/code&gt;, 0 otherwise)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="esbAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as ESB (default: &lt;code&gt;&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fixResultNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt; and the Result tag already exists, the namespace is changed (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="flowId" type="xs:string" />
    <xs:attribute name="flowIdSessionKey" type="xs:string" />
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fxfDirSessionKey" type="xs:string" />
    <xs:attribute name="fxfFileSessionKey" type="xs:string" />
    <xs:attribute name="fxfVersion" type="xs:string" />
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;i2t&lt;/code&gt; (ifsa2tibco), &lt;code&gt;reg&lt;/code&gt; (regular) or &lt;code&gt;bis&lt;/code&gt; (Business Integration Services) (default: reg)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="p2pAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as P2P (default: &lt;code&gt;&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retrievePhysicalDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, the physical destination is retrieved from the queue instead of using the parameter &lt;code&gt;destination&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodySessionKey" type="xs:string" />
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transferFlowIdSessionKey" type="xs:string" />
    <xs:attribute name="transformFilename" type="xs:string" />
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useFixedValues" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the fields CorrelationId, MessageId and Timestamp will have a fixed value (for testing purposes only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FxfWrapperPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addOutputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;outputNamespace&lt;/code&gt; is automatically set using the parameters (if $messagingLayer='P2P' then 'http://nn.nl/XSD/$businessDomain/$applicationName/$applicationFunction' else is serviceContext is not empty 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceContext/$serviceContextVersion/$operationName/$operationVersion' else 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceVersion/$operationName/$operationVersion') (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientFilenameSessionKey" type="xs:string" />
    <xs:attribute name="cmhVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;mode=reg&lt;/code&gt;) Common Message Header version (1 or 2) (default: 1 when &lt;code&gt;mode=reg&lt;/code&gt;, 0 otherwise)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="esbAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as ESB (default: &lt;code&gt;&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fixResultNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt; and the Result tag already exists, the namespace is changed (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="flowId" type="xs:string" />
    <xs:attribute name="flowIdSessionKey" type="xs:string" />
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fxfDirSessionKey" type="xs:string" />
    <xs:attribute name="fxfFileSessionKey" type="xs:string" />
    <xs:attribute name="fxfVersion" type="xs:string" />
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;i2t&lt;/code&gt; (ifsa2tibco), &lt;code&gt;reg&lt;/code&gt; (regular) or &lt;code&gt;bis&lt;/code&gt; (Business Integration Services) (default: reg)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="p2pAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as P2P (default: &lt;code&gt;&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retrievePhysicalDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, the physical destination is retrieved from the queue instead of using the parameter &lt;code&gt;destination&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodySessionKey" type="xs:string" />
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transferFlowIdSessionKey" type="xs:string" />
    <xs:attribute name="transformFilename" type="xs:string" />
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useFixedValues" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the fields CorrelationId, MessageId and Timestamp will have a fixed value (for testing purposes only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FxfXmlInputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fxfVersion" type="xs:string" />
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocationToAdd" type="xs:string">
      <xs:annotation>
        <xs:documentation>pairs of uri references which will be added to the wsdl (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>creates &lt;code&gt;schemalocation&lt;/code&gt; attribute based on the wsdl and replaces the namespace of the soap body element (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wsdl" type="xs:string">
      <xs:annotation>
        <xs:documentation>the wsdl to read the xsd's from (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FxfXmlOutputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fxfVersion" type="xs:string" />
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocationToAdd" type="xs:string">
      <xs:annotation>
        <xs:documentation>pairs of uri references which will be added to the wsdl (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>creates &lt;code&gt;schemalocation&lt;/code&gt; attribute based on the wsdl and replaces the namespace of the soap body element (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wsdl" type="xs:string">
      <xs:annotation>
        <xs:documentation>the wsdl to read the xsd's from (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="FxfXmlValidatorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fxfVersion" type="xs:string" />
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocationToAdd" type="xs:string">
      <xs:annotation>
        <xs:documentation>pairs of uri references which will be added to the wsdl (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>creates &lt;code&gt;schemalocation&lt;/code&gt; attribute based on the wsdl and replaces the namespace of the soap body element (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wsdl" type="xs:string">
      <xs:annotation>
        <xs:documentation>the wsdl to read the xsd's from (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="GetFromSessionPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of the session variable to retrieve the output message from. When left unspecified, the input message is used as the key of the session variable</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;ul&gt;&lt;li&gt;&lt;code&gt;string&lt;/code&gt;: renders the contents&lt;/li&gt;&lt;li&gt;&lt;code&gt;map&lt;/code&gt;: converts a Map&amp;lt;String, String&amp;gt; object to a xml-string (&amp;lt;items&amp;gt;&amp;lt;item name='...'&amp;gt;...&amp;lt;/item&amp;gt;&amp;lt;item name='...'&amp;gt;...&amp;lt;/item&amp;gt;&amp;lt;/items&amp;gt;)&lt;/li&gt;&lt;/ul&gt; (default: string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="GetLtpaTokenPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="GetPrincipalPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="HashPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="algorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Hashing algoritm to use, one of HmacMD5, HmacSHA1, HmacSHA256, HmacSHA384 or HmacSHA512 (default: hmacsha256)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authAlias to retrieve the secret from (password field). Only used if no parameter authAlias is configured</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="binaryToTextEncoding" type="xs:string">
      <xs:annotation>
        <xs:documentation>method to use for converting the hash from bytes to String, one of Base64 or Hex (default: Base64)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Character set to use for converting the secret from String to bytes (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secret" type="xs:string">
      <xs:annotation>
        <xs:documentation>The secret to hash with. Only used if no parameter secret is configured. The secret is only used when there is no authAlias specified, by attribute or parameter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="HttpErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the result is base64 encoded (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods (default: text/html)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="xs:string">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodeMessages" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>When true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputMessageParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;methodeType=POST&lt;/code&gt; and &lt;code&gt;paramsInUrl=false&lt;/code&gt;) Name of the request parameter which is used to put the input message in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of method to be executed, either 'GET', 'POST', 'PUT', 'DELETE', 'HEAD' or 'REPORT' (default: GET)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mtomContentTransferEncoding" type="xs:string" />
    <xs:attribute name="multipart" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, request parameters are put in a multipart/form-data entity instead of in the request body (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartResponse" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true the response body is expected to be in mime multipart which is the case when a soap message with attachments is received (see also &lt;a href="https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html"&gt;https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html&lt;/a&gt;). the first part will be returned as result of this sender. other parts are returned as streams in sessionkeys with names multipart1, multipart2, etc. the http connection is held open until the last stream is read. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, a multipart/form-data entity is created instead of a request body. for each part element in the session key a part in the multipart entity is created</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="paramsInUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt;, request parameters are put in the request body instead of in the url (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="postType" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt; the type of post request, must be one of [RAW (text/xml/json), BINARY (file), URLENCODED, FORMDATA, MTOM] (default: RAW)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultAsByteArrayInSessionKey" type="xs:string" />
    <xs:attribute name="storeResultAsStreamInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToFileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to a file (instead of passed as a string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>&gt;(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. (default: url)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="HttpListenerType">
    <xs:attribute name="applicationFaultsAsExceptions" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener as known to the adapter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="running" type="xs:string" />
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the service that is provided by the adapter of this listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="HttpSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the result is base64 encoded (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods (default: text/html)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="xs:string">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodeMessages" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>When true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputMessageParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;methodeType=POST&lt;/code&gt; and &lt;code&gt;paramsInUrl=false&lt;/code&gt;) Name of the request parameter which is used to put the input message in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of method to be executed, either 'GET', 'POST', 'PUT', 'DELETE', 'HEAD' or 'REPORT' (default: GET)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mtomContentTransferEncoding" type="xs:string" />
    <xs:attribute name="multipart" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, request parameters are put in a multipart/form-data entity instead of in the request body (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartResponse" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true the response body is expected to be in mime multipart which is the case when a soap message with attachments is received (see also &lt;a href="https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html"&gt;https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html&lt;/a&gt;). the first part will be returned as result of this sender. other parts are returned as streams in sessionkeys with names multipart1, multipart2, etc. the http connection is held open until the last stream is read. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, a multipart/form-data entity is created instead of a request body. for each part element in the session key a part in the multipart entity is created</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="paramsInUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt;, request parameters are put in the request body instead of in the url (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="postType" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt; the type of post request, must be one of [RAW (text/xml/json), BINARY (file), URLENCODED, FORMDATA, MTOM] (default: RAW)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultAsByteArrayInSessionKey" type="xs:string" />
    <xs:attribute name="storeResultAsStreamInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToFileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to a file (instead of passed as a string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>&gt;(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. (default: url)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="IMSErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionCode" type="xs:string">
      <xs:annotation>
        <xs:documentation>transaction code that should be added to the header, must be 8 characters</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="IMSSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionCode" type="xs:string">
      <xs:annotation>
        <xs:documentation>transaction code that should be added to the header, must be 8 characters</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="IbisJavaErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="dispatchType" type="xs:string">
      <xs:annotation>
        <xs:documentation>set to 'dll' to make the dispatcher communicate with a dll set on the classpath</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartResponse" type="xs:string">
      <xs:annotation>
        <xs:documentation>currently used to mimic the httpsender when it is stubbed locally. it could be useful in other situations too although currently the response string is used which isn't streamed, it would be better to pass the multipart as an input stream in the context map in which case content type and charset could also be passed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnedSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of keys of session variables that should be returned to caller, for correct results as well as for erronous results. (only for listeners that support it, like javalistener)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>serviceName of the {@link nl.nn.adapterframework.receivers.JavaListener JavaListener} that should be called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNameSessionKey" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="IbisJavaSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="dispatchType" type="xs:string">
      <xs:annotation>
        <xs:documentation>set to 'dll' to make the dispatcher communicate with a dll set on the classpath</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartResponse" type="xs:string">
      <xs:annotation>
        <xs:documentation>currently used to mimic the httpsender when it is stubbed locally. it could be useful in other situations too although currently the response string is used which isn't streamed, it would be better to pass the multipart as an input stream in the context map in which case content type and charset could also be passed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnedSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of keys of session variables that should be returned to caller, for correct results as well as for erronous results. (only for listeners that support it, like javalistener)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>serviceName of the {@link nl.nn.adapterframework.receivers.JavaListener JavaListener} that should be called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNameSessionKey" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="IbisLocalErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="checkDependency" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender waits upon open until the called {@link nl.nn.adapterframework.receivers.javalistener javalistener} is opened (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dependencyTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time (in seconds) the sender waits for the listener to start. a value of -1 indicates to wait indefinitely (default: 60 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isolated" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the call is made in a separate thread, possibly using separate transaction (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="javaListener" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the {@link nl.nn.adapterframework.receivers.javalistener javalistener} that should be called (will be ignored when javalistenersessionkey is set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="javaListenerSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the sessionkey which holds the name of the {@link nl.nn.adapterframework.receivers.javalistener javalistener} that should be called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnedSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of keys of session variables that should be returned to caller, for correct results as well as for erronous results. (Only for listeners that support it, like JavaListener)&lt;br/&gt;N.B. To get this working, the attribute returnedSessionKeys must also be set on the corresponding Receiver</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the {@link nl.nn.adapterframework.http.webservicelistener webservicelistener} that should be called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the call is made asynchronously. this implies &lt;code&gt;isolated=true&lt;/code&gt; (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwJavaListenerNotFoundException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the xml-string "&amp;lt;error&amp;gt;could not find javalistener [...]&amp;lt;/error&amp;gt;" is returned instead of throwing a senderexception (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="IbisLocalSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="checkDependency" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender waits upon open until the called {@link nl.nn.adapterframework.receivers.javalistener javalistener} is opened (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dependencyTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time (in seconds) the sender waits for the listener to start. a value of -1 indicates to wait indefinitely (default: 60 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isolated" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the call is made in a separate thread, possibly using separate transaction (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="javaListener" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the {@link nl.nn.adapterframework.receivers.javalistener javalistener} that should be called (will be ignored when javalistenersessionkey is set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="javaListenerSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the sessionkey which holds the name of the {@link nl.nn.adapterframework.receivers.javalistener javalistener} that should be called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnedSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of keys of session variables that should be returned to caller, for correct results as well as for erronous results. (Only for listeners that support it, like JavaListener)&lt;br/&gt;N.B. To get this working, the attribute returnedSessionKeys must also be set on the corresponding Receiver</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the {@link nl.nn.adapterframework.http.webservicelistener webservicelistener} that should be called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the call is made asynchronously. this implies &lt;code&gt;isolated=true&lt;/code&gt; (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwJavaListenerNotFoundException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the xml-string "&amp;lt;error&amp;gt;could not find javalistener [...]&amp;lt;/error&amp;gt;" is returned instead of throwing a senderexception (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="IbisMetricsPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="IbisWebServiceErrorSenderType">
    <xs:attribute name="ibisHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>name (or ipaddress) and optinally port of the host where the ibis to be called is running (default: localhost)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ibisInstance" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the ibis instance to be called (default: name of the current instance)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the receiver that should be called (default: servicelistener)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="IbisWebServiceSenderType">
    <xs:attribute name="ibisHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>name (or ipaddress) and optinally port of the host where the ibis to be called is running (default: localhost)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ibisInstance" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the ibis instance to be called (default: name of the current instance)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the receiver that should be called (default: servicelistener)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="IfMultipartPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elseForwardName" type="xs:string" />
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="thenForwardName" type="xs:string" />
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="IfsaProviderListenerType">
    <xs:attribute name="applicationId" type="xs:string" />
    <xs:attribute name="messageProtocol" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="polishedServiceId" type="xs:string" />
    <xs:attribute name="serviceId" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="IfsaSimulatorJmsErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="IfsaSimulatorJmsListenerType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheMode" type="xs:string" />
    <xs:attribute name="commitOnState" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;i&gt;deprecated&lt;/i&gt; exit state to control commit or rollback of jmssession. only used if &lt;code&gt;jmstransacted&lt;/code&gt; is set true. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceMessageIdAsCorrelationId" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="listenerPort" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pollGuardInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>interval in milliseconds for the poll guard to check whether a successful poll was done by the receive (https://docs.oracle.com/javaee/7/api/javax/jms/messageconsumer.html#receive-long-) since last check. when polling has stopped this will be logged and the listener will be stopped and started in an attempt to workaround problems with polling. polling might stop due to bugs in the jms driver/implementation which should be fixed by the supplier. as the poll time includes reading and processing of the message no successful poll might be registered since the last check when message processing takes a long time, hence while messages are being processed the check on last successful poll will be skipped. set to -1 to disable (default: ten times the specified timeout)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyDeliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that reply messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyEncodingStyleURI" type="xs:string" />
    <xs:attribute name="replyMessageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>time that replymessage will live (default: 0 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field of the reply message (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNamespaceURI" type="xs:string" />
    <xs:attribute name="replyPriority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the reply message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapAction" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>receive timeout in milliseconds as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long- (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useReplyTo" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xPathLoggingKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of all xpath keys that need to be logged. (overrides &lt;code&gt;msg.log.keys&lt;/code&gt; property)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="IfsaSimulatorJmsSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="IncreaseIntegerPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="increment" type="xs:string">
      <xs:annotation>
        <xs:documentation>amount to increment the value (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>reference to the session variable whose value is to be increased</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="IsUserInRolePipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notInRoleForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of forward returned if user is not allowed to assume the specified role (default: notInRole)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="role" type="xs:string">
      <xs:annotation>
        <xs:documentation>the j2ee role to check.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="IsXmlIfPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elseForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when 'false' (default: else)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elseForwardOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>return elseforward when input is empty (or thenforward) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="thenForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when &lt;code&gt;'true'&lt;/code&gt; (default: then)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="JavaListenerType">
    <xs:attribute name="httpWsdl" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the wsdl of the service provided by this listener is available for download  (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isolated" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener as known to the adapter. an {@link nl.nn.adapterframework.pipes.ibislocalsender ibislocalsender} refers to this name in its &lt;code&gt;javalistener&lt;/code&gt;-attribute.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceName" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the request is executed asynchronously. this implies &lt;code&gt;isolated=true&lt;/code&gt;. n.b. be aware that there is no limit on the number of threads generated (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>should the javalistener throw a listenerexception when it occurs or return an error message (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JavascriptErrorSenderType">
    <xs:sequence>
      <xs:element name="Cache" type="CacheType" minOccurs="0" maxOccurs="unbounded" />
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="engineName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the javascript engine to be used (default: J2V8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the javascript file containing the functions to run</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsFunctionName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the javascript function that will be called (first) (default: main)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is restored before processing the next one (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="JavascriptSenderType">
    <xs:sequence>
      <xs:element name="Cache" type="CacheType" minOccurs="0" maxOccurs="unbounded" />
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="engineName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the javascript engine to be used (default: J2V8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the javascript file containing the functions to run</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsFunctionName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the javascript function that will be called (first) (default: main)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is restored before processing the next one (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="JdbcErrorStorageType">
    <xs:attribute name="active" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the messages are stored compressed (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commentField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column comments are stored in (default: comments)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="correlationIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column correlation-ids are stored in (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createTable" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the table is created if it does not exist (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column the timestamp is stored in (default: messagedate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column the timestamps are stored in (default: timestamp)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expiryDateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column the timestamp for expiry is stored in (default: expirydate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hostField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column that stores the hostname of the server (default: host)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="idField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column messageids are stored in (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indexName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the index, to be used in hints for query optimizer too (only for oracle) (default: ix_ibisstore)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column that contains the primary key of the table (default: messagekey)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column that contains the primary key of the table (default: int default autoincrement)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column labels are stored in (default: label)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column message themselves are stored in (default: message)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column message themselves are stored in (default: long binary)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyStoreWhenMessageIdUnique" type="xs:string" />
    <xs:attribute name="order" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to be prefixed on all database objects (tables, indices, sequences), e.q. to access a different oracle schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retention" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in days) to keep the record in the database before making it eligible for deletion by a cleanup process. when set to -1, the record will live on forever (default: 30)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaOwner4Check" type="xs:string">
      <xs:annotation>
        <xs:documentation>schema owner to be used to check the database (default: &amp;lt;current_schema&amp;gt; (only for oracle))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sequenceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the sequence used to generate the primary key (only for oracle) n.b. the default name has been changed in version 4.6 (default: seq_ibisstore)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotId" type="xs:string" />
    <xs:attribute name="slotIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column slotids are stored in (default: slotid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeFullMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the full message is stored with the log. can be set to &lt;code&gt;false&lt;/code&gt; to reduce table size, by avoiding to store the full message (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the table messages are stored in (default: IBISSTORE)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the columns messageid and correlationid, slotid and comments are stored in. n.b. (100) is appended for id's, (1000) is appended for comments. (default: varchar)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are E (error store), M (message store), L (message log for pipe) or A (message log for receiver). ReceiverBase will always set type to E for errorStorage and always set type to A for messageLog. GenericMessageSendingPipe will set type to L for messageLog (when type isn't specified). See {@link MessagestoreSender} for type M (default: E for errorstorage on receiver, A for messageLog on receiver and L for messageLog on Pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="typeField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column types are stored in (default: type)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JdbcListenerType">
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset used to read blobs (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls automatically whether blobdata is stored compressed and/or serialized in the database (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is considered stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commitLocalTransactionQuery" type="xs:string" />
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="messageFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of the field containing the message data: either string, clob or blob (default: &lt;i&gt;string&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="peekQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;peekUntransacted=true&lt;/code&gt;) peek query to determine if the select query should be executed. Peek queries are, unlike select queries, executed without a transaction and without a rowlock (default: selectQuery)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="peekUntransacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true. This avoids rolling back a lot of XA transactions, that appears to be problematic on MS SQL Server (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startLocalTransactionQuery" type="xs:string" />
    <xs:attribute name="trace" type="xs:string" />
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JdbcMessageLogType">
    <xs:attribute name="active" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the messages are stored compressed (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commentField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column comments are stored in (default: comments)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="correlationIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column correlation-ids are stored in (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createTable" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the table is created if it does not exist (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column the timestamp is stored in (default: messagedate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column the timestamps are stored in (default: timestamp)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expiryDateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column the timestamp for expiry is stored in (default: expirydate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hostField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column that stores the hostname of the server (default: host)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="idField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column messageids are stored in (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indexName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the index, to be used in hints for query optimizer too (only for oracle) (default: ix_ibisstore)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column that contains the primary key of the table (default: messagekey)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column that contains the primary key of the table (default: int default autoincrement)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column labels are stored in (default: label)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column message themselves are stored in (default: message)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column message themselves are stored in (default: long binary)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyStoreWhenMessageIdUnique" type="xs:string" />
    <xs:attribute name="order" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to be prefixed on all database objects (tables, indices, sequences), e.q. to access a different oracle schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retention" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in days) to keep the record in the database before making it eligible for deletion by a cleanup process. when set to -1, the record will live on forever (default: 30)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaOwner4Check" type="xs:string">
      <xs:annotation>
        <xs:documentation>schema owner to be used to check the database (default: &amp;lt;current_schema&amp;gt; (only for oracle))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sequenceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the sequence used to generate the primary key (only for oracle) n.b. the default name has been changed in version 4.6 (default: seq_ibisstore)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotId" type="xs:string" />
    <xs:attribute name="slotIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column slotids are stored in (default: slotid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeFullMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the full message is stored with the log. can be set to &lt;code&gt;false&lt;/code&gt; to reduce table size, by avoiding to store the full message (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the table messages are stored in (default: IBISSTORE)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the columns messageid and correlationid, slotid and comments are stored in. n.b. (100) is appended for id's, (1000) is appended for comments. (default: varchar)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are E (error store), M (message store), L (message log for pipe) or A (message log for receiver). ReceiverBase will always set type to E for errorStorage and always set type to A for messageLog. GenericMessageSendingPipe will set type to L for messageLog (when type isn't specified). See {@link MessagestoreSender} for type M (default: E for errorstorage on receiver, A for messageLog on receiver and L for messageLog on Pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="typeField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column types are stored in (default: type)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JdbcQueryListenerType">
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset used to read blobs (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls automatically whether blobdata is stored compressed and/or serialized in the database (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is considered stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commitLocalTransactionQuery" type="xs:string" />
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>primary key field of the table, used to identify messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) field containing the message data (default: &lt;i&gt;same as keyfield&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of the field containing the message data: either string, clob or blob (default: &lt;i&gt;string&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="peekQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;peekUntransacted=true&lt;/code&gt;) peek query to determine if the select query should be executed. Peek queries are, unlike select queries, executed without a transaction and without a rowlock (default: selectQuery)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="peekUntransacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true. This avoids rolling back a lot of XA transactions, that appears to be problematic on MS SQL Server (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>query that returns a row to be processed. must contain a key field and optionally a message field</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startLocalTransactionQuery" type="xs:string" />
    <xs:attribute name="trace" type="xs:string" />
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="updateStatusToErrorQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>sql statement to the status of a row to 'error'. must contain one parameter, that is set to the value of the key (default: same as &lt;code&gt;updatestatustoprocessedquery&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="updateStatusToProcessedQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>sql statement to the status of a row to 'processed'. must contain one parameter, that is set to the value of the key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JdbcTableListenerType">
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset used to read blobs (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls automatically whether blobdata is stored compressed and/or serialized in the database (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is considered stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commitLocalTransactionQuery" type="xs:string" />
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>primary key field of the table, used to identify messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) field containing the message data (default: &lt;i&gt;same as keyfield&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of the field containing the message data: either string, clob or blob (default: &lt;i&gt;string&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="orderField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Field determining the order in which messages are processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="peekQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;peekUntransacted=true&lt;/code&gt;) peek query to determine if the select query should be executed. Peek queries are, unlike select queries, executed without a transaction and without a rowlock (default: selectQuery)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="peekUntransacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true. This avoids rolling back a lot of XA transactions, that appears to be problematic on MS SQL Server (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectCondition" type="xs:string">
      <xs:annotation>
        <xs:documentation>Additional condition for a row to belong to this TableListener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startLocalTransactionQuery" type="xs:string" />
    <xs:attribute name="statusField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Field containing the status of the message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueAvailable" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Value of statusField indicating row is available to be processed. If not specified, any row not having any of the other status values is considered available.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueError" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of statusField indicating the processing of the row resulted in an error</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueProcessed" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of status field indicating row is processed ok</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the table to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timestampField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Field used to store the date and time of the last change of the statusField</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trace" type="xs:string" />
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JmsErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JmsErrorStorageType">
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotId" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout for receiving a message from the queue (default: 3000 ms)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are E (error store), M (message store), L (message log for pipe) or A (message log for receiver). ReceiverBase will always set type to E for errorStorage and always set type to A for messageLog. GenericMessageSendingPipe will set type to L for messageLog (when type isn't specified). See {@link MessagestoreSender} for type M (default: E for errorstorage on receiver, A for messageLog on receiver and L for messageLog on Pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JmsListenerType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheMode" type="xs:string" />
    <xs:attribute name="commitOnState" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;i&gt;deprecated&lt;/i&gt; exit state to control commit or rollback of jmssession. only used if &lt;code&gt;jmstransacted&lt;/code&gt; is set true. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceMessageIdAsCorrelationId" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="listenerPort" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pollGuardInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>interval in milliseconds for the poll guard to check whether a successful poll was done by the receive (https://docs.oracle.com/javaee/7/api/javax/jms/messageconsumer.html#receive-long-) since last check. when polling has stopped this will be logged and the listener will be stopped and started in an attempt to workaround problems with polling. polling might stop due to bugs in the jms driver/implementation which should be fixed by the supplier. as the poll time includes reading and processing of the message no successful poll might be registered since the last check when message processing takes a long time, hence while messages are being processed the check on last successful poll will be skipped. set to -1 to disable (default: ten times the specified timeout)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyDeliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that reply messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyEncodingStyleURI" type="xs:string" />
    <xs:attribute name="replyMessageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>time that replymessage will live (default: 0 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field of the reply message (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNamespaceURI" type="xs:string" />
    <xs:attribute name="replyPriority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the reply message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapAction" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>receive timeout in milliseconds as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long- (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useReplyTo" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xPathLoggingKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of all xpath keys that need to be logged. (overrides &lt;code&gt;msg.log.keys&lt;/code&gt; property)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JmsMessageLogType">
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotId" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout for receiving a message from the queue (default: 3000 ms)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are E (error store), M (message store), L (message log for pipe) or A (message log for receiver). ReceiverBase will always set type to E for errorStorage and always set type to A for messageLog. GenericMessageSendingPipe will set type to L for messageLog (when type isn't specified). See {@link MessagestoreSender} for type M (default: E for errorstorage on receiver, A for messageLog on receiver and L for messageLog on Pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JmsSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JobType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="DirectoryCleaner" type="DirectoryCleanerType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="adapterName" type="xs:string">
      <xs:annotation>
        <xs:documentation>adapter on which job operates</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="configurationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>configuration on which job operates</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cronExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>cron expression that determines the frequency of execution (see below)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>optional description of the job</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="function" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of: stopadapter, startadapter, stopreceiver, startreceiver, sendmessage, executequery, cleanupfilesystem</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="interval" type="xs:string">
      <xs:annotation>
        <xs:documentation>repeat the job at the specified number of ms. keep cronexpression empty to use interval. set to 0 to only run once at startup of the application. a value of 0 in combination with function 'sendmessage' will set dependencytimeout on the ibislocalsender to -1 the keep waiting indefinitely instead of max 60 seconds for the adapter to start.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jobGroup" type="xs:string" />
    <xs:attribute name="message" type="xs:string">
      <xs:annotation>
        <xs:documentation>message to be send into the pipeline</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageKeeperSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>number of message displayed in ibisconsole (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the job</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of threads that may execute concurrently (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>the sql query text to be executed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of seconds the driver will wait for a statement object to execute. if the limit is exceeded, a timeoutexception is thrown. 0 means no timeout (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="receiverName" type="xs:string">
      <xs:annotation>
        <xs:documentation>receiver on which job operates. If function is 'sendmessage' this should be the name of the javalistener you wish to call</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>The transactionAttribute declares transactional behavior of job execution. It applies both to database transactions and XA transactions. In general, a transactionAttribute is used to start a new transaction or suspend the current one when required. For developers: it is equal to &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;. Possible values for transactionAttribute:   &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Json2XmlInputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Json2XmlOutputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Json2XmlValidatorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JsonPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addXmlRootElement" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, and direction is json2xml, it wraps a root element around the converted message (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Direction of the transformation. Either json2xml or xml2json (default: json2xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="version" type="xs:string">
      <xs:annotation>
        <xs:documentation>Version of the jsonpipe. Either 1 or 2. (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="JsonWellFormedCheckerPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="JsonXsltErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="indentXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. When not set, the value specified in the stylesheet is followed (default: false, if not set in stylesheet)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the xml result of the transformation is converted back to json (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions (default: j=http://www.w3.org/2013/XSL/json)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>omit the xml declaration on top of the output. When not set, the value specified in the stylesheet is followed (default: false, if not set in stylesheet)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>For xpathExpression only: either 'text' or 'xml'. (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipEmptyTags" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey (default: 100)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xslt2" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JsonXsltPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. When not set, the value specified in the stylesheet is followed (default: false, if not set in stylesheet)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the xml result of the transformation is converted back to json (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions (default: j=http://www.w3.org/2013/XSL/json)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>omit the xml declaration on top of the output. When not set, the value specified in the stylesheet is followed (default: false, if not set in stylesheet)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>For xpathExpression only: either 'text' or 'xml'. (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string" />
    <xs:attribute name="skipEmptyTags" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey (default: 100)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xslt2" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JsonXsltSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="indentXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. When not set, the value specified in the stylesheet is followed (default: false, if not set in stylesheet)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the xml result of the transformation is converted back to json (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions (default: j=http://www.w3.org/2013/XSL/json)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>omit the xml declaration on top of the output. When not set, the value specified in the stylesheet is followed (default: false, if not set in stylesheet)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>For xpathExpression only: either 'text' or 'xml'. (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipEmptyTags" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey (default: 100)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xslt2" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="LabelFormatPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="LadybugPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRoles" type="xs:string">
      <xs:annotation>
        <xs:documentation>Set to &lt;code&gt;true&lt;/code&gt; when the pipeline is triggered by a user (e.g. using an http based listener that will add a securityHandler session key) and you don't want the listener to check whether the user is autorised and/or you want the enforce the roles as configured for the Ladybug (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableReportGenerator" type="xs:string">
      <xs:annotation>
        <xs:documentation>Set to &lt;code&gt;true&lt;/code&gt; to enable Ladybug's report generator for the duration of the scheduled report runs, then revert it to its original setting (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exclude" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set, reports with a full path (path + name) that matches with the specified regular expression are skipped. For example, "/Unscheduled/.*" or ".*SKIP".</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToLog" type="xs:string">
      <xs:annotation>
        <xs:documentation>whether or not to write results to the logfile (testtool4&amp;lt;instance.name&amp;gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="writeToSystemOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>whether or not to write results to system out (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="LarvaPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="logLevel" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string" />
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="waitBeforeCleanup" type="xs:string" />
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="LdapChallengePipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable used to store cause of errors</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory (default: com.sun.jndi.ldap.ldapctxfactory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ldapProviderURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>url to the ldap server. &lt;br/&gt;example: ldap://su05b9.itc.intranet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="LdapErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="attributesToReturn" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of attributes to return. when no are attributes specified, all the attributes from the object read are returned. (default: &lt;i&gt;all attributes&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable used to store cause of errors (default: errorreason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="ldapProviderURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>url to context to search in, e.g. 'ldap://edsnlm01.group.intranet/ou=people, o=ing' to search in te people group of ing cds. used to overwrite the providerurl specified in jmsrealm.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="manipulationSubject" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies subject to perform operation on. must be one of 'entry' or 'attribute' (default: attribute)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxEntriesReturned" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of entries to be returned by a search query, or 0 for unlimited (default: &lt;i&gt;0 (unlimited)&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="operation" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies operation to perform. Must be one of &lt;ul&gt;&lt;li&gt;&lt;code&gt;read&lt;/code&gt;: read the contents of an entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;create&lt;/code&gt;: create an attribute or an entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;update&lt;/code&gt;: update an attribute or an entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;: delete an attribute or an entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;search&lt;/code&gt;: search for an entry in the direct children of the specified root&lt;/li&gt;&lt;li&gt;&lt;code&gt;deepSearch&lt;/code&gt;: search for an entry in the complete tree below the specified root&lt;/li&gt;&lt;li&gt;&lt;code&gt;getSubContexts&lt;/code&gt;: get a list of the direct children of the specifed root&lt;/li&gt;&lt;li&gt;&lt;code&gt;getTree&lt;/code&gt;: get a copy of the complete tree below the specified root&lt;/li&gt;&lt;li&gt;&lt;code&gt;challenge&lt;/code&gt;: check username and password against LDAP specifying principal and credential using parameters&lt;/li&gt;&lt;li&gt;&lt;code&gt;changeUnicodePwd&lt;/code&gt;: typical user change-password operation (one of the two methods to modify the unicodePwd attribute in AD (http://support.microsoft.com/kb/263991))&lt;/li&gt;&lt;/ul&gt; (default: read)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNotFound" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;operation=search/deepsearch&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt; the xml '&amp;lt;ldapresult&amp;gt;object not found&amp;lt;/ldapresult&amp;gt;' is returned instead of the partialresultexception 'unprocessed continuation reference(s)' (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="searchTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies the time (in ms) that is spent searching for results for operation search (default: 20000 ms)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unicodePwd" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true the attributes passed by the input xml are scanned for an attribute with id unicodepwd, when found the value of this attribute will be encoded as required by active directory (a utf-16 encoded unicode string containing the password surrounded by quotation marks) before sending it to the ldap server (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="usePooling" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies whether connection pooling is used or not (default: true when principal not set as parameter, false otherwise)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="LdapFindGroupMembershipsPipeType">
    <xs:sequence>
      <xs:element name="Cache" type="CacheType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials to connect to ldap server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseDN" type="xs:string">
      <xs:annotation>
        <xs:documentation>BaseDN, e.g. OU=Tenants,DC=INSIM,DC=BIZ (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>PipeForward used when an exception is caught</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>Host part of ldapProviderUrl. Only used when ldapProviderUrl not specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ldapProviderURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>Url to context to search in, e.g. 'ldaps://insim.biz'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notFoundForwardName" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password used to obtain credentials to connect to ldap server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>Port of ldapProviderUrl. Only used when ldapProviderUrl not specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="recursiveSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the memberOf attribute is also searched in all the found members (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useSsl" type="xs:string">
      <xs:annotation>
        <xs:documentation>Indication to use ldap or ldaps in ldapProviderUrl. Only used when ldapProviderUrl not specified (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username used to obtain credentials to connect to ldap server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="LdapFindMemberPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials to connect to ldap server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseDN" type="xs:string">
      <xs:annotation>
        <xs:documentation>BaseDN, e.g. OU=Tenants,DC=INSIM,DC=BIZ (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dnFind" type="xs:string">
      <xs:annotation>
        <xs:documentation>The dn of the member to search for when the parameter dnFind is not set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dnSearchIn" type="xs:string">
      <xs:annotation>
        <xs:documentation>The dn of the group to search in when the parameter dnSearchIn is not set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>PipeForward used when an exception is caught</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>Host part of ldapProviderUrl. Only used when ldapProviderUrl not specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ldapProviderURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>Url to context to search in, e.g. 'ldaps://insim.biz'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notFoundForwardName" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password used to obtain credentials to connect to ldap server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>Port of ldapProviderUrl. Only used when ldapProviderUrl not specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="recursiveSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the member attribute is also searched in all the found members (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useSsl" type="xs:string">
      <xs:annotation>
        <xs:documentation>Indication to use ldap or ldaps in ldapProviderUrl. Only used when ldapProviderUrl not specified (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username used to obtain credentials to connect to ldap server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="LdapSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="attributesToReturn" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of attributes to return. when no are attributes specified, all the attributes from the object read are returned. (default: &lt;i&gt;all attributes&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable used to store cause of errors (default: errorreason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="ldapProviderURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>url to context to search in, e.g. 'ldap://edsnlm01.group.intranet/ou=people, o=ing' to search in te people group of ing cds. used to overwrite the providerurl specified in jmsrealm.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="manipulationSubject" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies subject to perform operation on. must be one of 'entry' or 'attribute' (default: attribute)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxEntriesReturned" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of entries to be returned by a search query, or 0 for unlimited (default: &lt;i&gt;0 (unlimited)&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="operation" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies operation to perform. Must be one of &lt;ul&gt;&lt;li&gt;&lt;code&gt;read&lt;/code&gt;: read the contents of an entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;create&lt;/code&gt;: create an attribute or an entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;update&lt;/code&gt;: update an attribute or an entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;: delete an attribute or an entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;search&lt;/code&gt;: search for an entry in the direct children of the specified root&lt;/li&gt;&lt;li&gt;&lt;code&gt;deepSearch&lt;/code&gt;: search for an entry in the complete tree below the specified root&lt;/li&gt;&lt;li&gt;&lt;code&gt;getSubContexts&lt;/code&gt;: get a list of the direct children of the specifed root&lt;/li&gt;&lt;li&gt;&lt;code&gt;getTree&lt;/code&gt;: get a copy of the complete tree below the specified root&lt;/li&gt;&lt;li&gt;&lt;code&gt;challenge&lt;/code&gt;: check username and password against LDAP specifying principal and credential using parameters&lt;/li&gt;&lt;li&gt;&lt;code&gt;changeUnicodePwd&lt;/code&gt;: typical user change-password operation (one of the two methods to modify the unicodePwd attribute in AD (http://support.microsoft.com/kb/263991))&lt;/li&gt;&lt;/ul&gt; (default: read)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNotFound" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;operation=search/deepsearch&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt; the xml '&amp;lt;ldapresult&amp;gt;object not found&amp;lt;/ldapresult&amp;gt;' is returned instead of the partialresultexception 'unprocessed continuation reference(s)' (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="searchTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies the time (in ms) that is spent searching for results for operation search (default: 20000 ms)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unicodePwd" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true the attributes passed by the input xml are scanned for an attribute with id unicodepwd, when found the value of this attribute will be encoded as required by active directory (a utf-16 encoded unicode string containing the password surrounded by quotation marks) before sending it to the ldap server (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="usePooling" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies whether connection pooling is used or not (default: true when principal not set as parameter, false otherwise)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="LocalFileSystemErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeWildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to be excluded when looking in inputdirectory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional base folder, that serves as root for all other folders</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to look for in inputdirectory, e.g. '*.inp'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="LocalFileSystemPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeWildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to be excluded when looking in inputdirectory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>the folder that serves as the root of this virtual filesystem</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to look for in inputdirectory, e.g. '*.inp'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="LocalFileSystemSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeWildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to be excluded when looking in inputdirectory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional base folder, that serves as root for all other folders</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to look for in inputdirectory, e.g. '*.inp'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="LockerType">
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFormatSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>format for date which is added after &lt;code&gt;objectid&lt;/code&gt; (e.g. yyyymmdd to be sure the job is executed only once a day)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="firstDelay" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time in ms to wait before the first attempt to acquire a lock is made, this may be 0 but keep in mind that the other thread or ibis instance will propably not get much change to acquire a lock when another message is already waiting for the thread having the current lock in which case it will probably acquire a new lock soon after releasing the current lock (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreTableNotExist" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times an attempt should be made to acquire a lock, after this many times an exception is thrown when no lock could be acquired, when -1 the number of retries is unlimited (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="objectId" type="xs:string">
      <xs:annotation>
        <xs:documentation>identifier for this lock</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retention" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (for type=p in days and for type=t in hours) to keep the record in the database before making it eligible for deletion by a cleanup process (default: 30 days (type=p), 4 hours (type=t))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryDelay" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time in ms to wait before another attempt to acquire a lock is made (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>type for this lock: p(ermanent) or t(emporary). a temporary lock is deleted after the job has completed (default: t)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="LogErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="logCategory" type="xs:string">
      <xs:annotation>
        <xs:documentation>category under which messages are logged (default: name of the sender)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logLevel" type="xs:string">
      <xs:annotation>
        <xs:documentation>level on which messages are logged (default: info)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="LogSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="logCategory" type="xs:string">
      <xs:annotation>
        <xs:documentation>category under which messages are logged (default: name of the sender)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logLevel" type="xs:string">
      <xs:annotation>
        <xs:documentation>level on which messages are logged (default: info)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MQErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MQSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MailErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authAlias used to obtain credentials for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bounceAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>NDR return address when mail cannot be delivered. This adds a Return-Path header (default: MAIL FROM attribute)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultAttachmentName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when this name is used, it will be followed by a number which is equal to the node's position (default: attachment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultFrom" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the from: header if not specified in message itself</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMessageBase64" type="xs:string">
      <xs:annotation>
        <xs:documentation>when messageBase64 is not specified defaultMessageBase64 will be used (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>when messageType is not specified defaultMessageType will be used (default: text/plain)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultSubject" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the subject: header if not specified in message itself</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of userid</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the host by which the messages are to be send</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of userid on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpUserid" type="xs:string">
      <xs:annotation>
        <xs:documentation>userId on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in milliseconds). used for socket connection timeout and socket i/o timeout (default: 20000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userId" type="xs:string">
      <xs:annotation>
        <xs:documentation>userId on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MailSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authAlias used to obtain credentials for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bounceAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>NDR return address when mail cannot be delivered. This adds a Return-Path header (default: MAIL FROM attribute)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultAttachmentName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when this name is used, it will be followed by a number which is equal to the node's position (default: attachment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultFrom" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the from: header if not specified in message itself</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMessageBase64" type="xs:string">
      <xs:annotation>
        <xs:documentation>when messageBase64 is not specified defaultMessageBase64 will be used (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>when messageType is not specified defaultMessageType will be used (default: text/plain)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultSubject" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the subject: header if not specified in message itself</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of userid</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the host by which the messages are to be send</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of userid on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpUserid" type="xs:string">
      <xs:annotation>
        <xs:documentation>userId on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in milliseconds). used for socket connection timeout and socket i/o timeout (default: 20000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userId" type="xs:string">
      <xs:annotation>
        <xs:documentation>userId on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MailSenderPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>either MESSAGEID or CORRELATIONID. For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time (in seconds) after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts (default: 10 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is first base64 decoded and then streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="MessageStoreErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the messages are stored compressed (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commentField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column comments are stored in (default: comments)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="correlationIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column correlation-ids are stored in (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createTable" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the table is created if it does not exist (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column the timestamp is stored in (default: messagedate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column the timestamps are stored in (default: timestamp)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expiryDateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column the timestamp for expiry is stored in (default: expirydate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hostField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column that stores the hostname of the server (default: host)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="idField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column messageids are stored in (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indexName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the index, to be used in hints for query optimizer too (only for oracle) (default: ix_ibisstore)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column that contains the primary key of the table (default: messagekey)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column that contains the primary key of the table (default: int default autoincrement)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column labels are stored in (default: label)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column message themselves are stored in (default: message)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column message themselves are stored in (default: long binary)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyStoreWhenMessageIdUnique" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="order" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to be prefixed on all database objects (tables, indices, sequences), e.q. to access a different oracle schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retention" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in days) to keep the record in the database before making it eligible for deletion by a cleanup process. when set to -1, the record will live on forever (default: 30)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaOwner4Check" type="xs:string">
      <xs:annotation>
        <xs:documentation>schema owner to be used to check the database (default: &amp;lt;current_schema&amp;gt; (only for oracle))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sequenceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the sequence used to generate the primary key (only for oracle) n.b. the default name has been changed in version 4.6 (default: seq_ibisstore)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of sessionkey's to be stored together with the message. please note: corresponding {@link messagestorelistener} must have the same value for this attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotId" type="xs:string" />
    <xs:attribute name="slotIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column slotids are stored in (default: slotid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeFullMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the full message is stored with the log. can be set to &lt;code&gt;false&lt;/code&gt; to reduce table size, by avoiding to store the full message (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the table messages are stored in (default: IBISSTORE)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the columns messageid and correlationid, slotid and comments are stored in. n.b. (100) is appended for id's, (1000) is appended for comments. (default: varchar)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are E (error store), M (message store), L (message log for pipe) or A (message log for receiver). ReceiverBase will always set type to E for errorStorage and always set type to A for messageLog. GenericMessageSendingPipe will set type to L for messageLog (when type isn't specified). See {@link MessagestoreSender} for type M (default: E for errorstorage on receiver, A for messageLog on receiver and L for messageLog on Pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="typeField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column types are stored in (default: type)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MessageStoreListenerType">
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset used to read blobs (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls automatically whether blobdata is stored compressed and/or serialized in the database (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is considered stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commitLocalTransactionQuery" type="xs:string" />
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>primary key field of the table, used to identify messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) field containing the message data (default: &lt;i&gt;same as keyfield&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of the field containing the message data: either string, clob or blob (default: &lt;i&gt;string&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="moveToMessageLog" type="xs:string">
      <xs:annotation>
        <xs:documentation>move to messagelog after processing, as the message is already stored in the ibisstore only some fields need to be updated, use a messagelog element with class {@link dummytransactionalstorage} to enable it in the console (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="orderField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Field determining the order in which messages are processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="peekQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;peekUntransacted=true&lt;/code&gt;) peek query to determine if the select query should be executed. Peek queries are, unlike select queries, executed without a transaction and without a rowlock (default: selectQuery)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="peekUntransacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true. This avoids rolling back a lot of XA transactions, that appears to be problematic on MS SQL Server (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectCondition" type="xs:string">
      <xs:annotation>
        <xs:documentation>Additional condition for a row to belong to this TableListener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of sessionkey's to be read together with the message. please note: corresponding {@link messagestoresender} must have the same value for this attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotId" type="xs:string">
      <xs:annotation>
        <xs:documentation>identifier for this service</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startLocalTransactionQuery" type="xs:string" />
    <xs:attribute name="statusField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Field containing the status of the message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueAvailable" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Value of statusField indicating row is available to be processed. If not specified, any row not having any of the other status values is considered available.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueError" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of statusField indicating the processing of the row resulted in an error</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueProcessed" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of status field indicating row is processed ok</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the table to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timestampField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Field used to store the date and time of the last change of the statusField</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trace" type="xs:string" />
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MessageStoreSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the messages are stored compressed (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commentField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column comments are stored in (default: comments)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="correlationIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column correlation-ids are stored in (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createTable" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the table is created if it does not exist (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column the timestamp is stored in (default: messagedate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column the timestamps are stored in (default: timestamp)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expiryDateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column the timestamp for expiry is stored in (default: expirydate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hostField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column that stores the hostname of the server (default: host)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="idField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column messageids are stored in (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indexName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the index, to be used in hints for query optimizer too (only for oracle) (default: ix_ibisstore)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column that contains the primary key of the table (default: messagekey)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column that contains the primary key of the table (default: int default autoincrement)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column labels are stored in (default: label)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column message themselves are stored in (default: message)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the column message themselves are stored in (default: long binary)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyStoreWhenMessageIdUnique" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="order" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to be prefixed on all database objects (tables, indices, sequences), e.q. to access a different oracle schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retention" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in days) to keep the record in the database before making it eligible for deletion by a cleanup process. when set to -1, the record will live on forever (default: 30)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaOwner4Check" type="xs:string">
      <xs:annotation>
        <xs:documentation>schema owner to be used to check the database (default: &amp;lt;current_schema&amp;gt; (only for oracle))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sequenceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the sequence used to generate the primary key (only for oracle) n.b. the default name has been changed in version 4.6 (default: seq_ibisstore)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of sessionkey's to be stored together with the message. please note: corresponding {@link messagestorelistener} must have the same value for this attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotId" type="xs:string" />
    <xs:attribute name="slotIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column slotids are stored in (default: slotid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeFullMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the full message is stored with the log. can be set to &lt;code&gt;false&lt;/code&gt; to reduce table size, by avoiding to store the full message (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the table messages are stored in (default: IBISSTORE)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>the type of the columns messageid and correlationid, slotid and comments are stored in. n.b. (100) is appended for id's, (1000) is appended for comments. (default: varchar)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are E (error store), M (message store), L (message log for pipe) or A (message log for receiver). ReceiverBase will always set type to E for errorStorage and always set type to A for messageLog. GenericMessageSendingPipe will set type to L for messageLog (when type isn't specified). See {@link MessagestoreSender} for type M (default: E for errorstorage on receiver, A for messageLog on receiver and L for messageLog on Pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="typeField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column types are stored in (default: type)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MoveFilePipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="append" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; and the destination file already exists, the content of the file to move is written to the end of the destination file. this implies &lt;code&gt;overwrite=false&lt;/code&gt; (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the directory to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteEmptyDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the directory from which a file is moved is deleted when it contains no other files (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="directory" type="xs:string">
      <xs:annotation>
        <xs:documentation>base directory where files are moved from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file to move (if not specified, the input for this pipe is assumed to be the name of the file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="move2dir" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination directory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="move2file" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the destination file (if not specified, the name of the file to move is taken)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="move2fileSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key that contains the name of the file to use (only used if move2file is not set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfAttempts" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of attempts before throwing an exception (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>number of copies held of a file with the same name. backup files have a dot and a number suffixed to their name. if set to 0, no backups will be kept. (default: 5)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the destination file will be deleted if it already exists. when set &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;numberofbackups&lt;/code&gt; set to 0, a counter is added to the destination filename ('basename_###.ext') (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>string which is inserted at the start of the destination file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>string which is inserted at the end of the destination file (and replaces the extension if present)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;numberofbackups&lt;/code&gt; is set to 0 and the destination file already exists a piperunexception is thrown (instead of adding a counter to the destination filename) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="waitBeforeRetry" type="xs:string">
      <xs:annotation>
        <xs:documentation>time between attempts (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>filter of files to replace</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcardSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key that contains the name of the filter to use (only used if wildcard is not set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="MqttErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string" />
    <xs:attribute name="automaticReconnect" type="xs:string" />
    <xs:attribute name="brokerUrl" type="xs:string" />
    <xs:attribute name="charset" type="xs:string" />
    <xs:attribute name="cleanSession" type="xs:string" />
    <xs:attribute name="clientId" type="xs:string" />
    <xs:attribute name="keepAliveInterval" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="password" type="xs:string" />
    <xs:attribute name="persistenceDirectory" type="xs:string" />
    <xs:attribute name="qos" type="xs:string" />
    <xs:attribute name="timeout" type="xs:string" />
    <xs:attribute name="topic" type="xs:string" />
    <xs:attribute name="username" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="MqttListenerType">
    <xs:attribute name="authAlias" type="xs:string" />
    <xs:attribute name="automaticReconnect" type="xs:string" />
    <xs:attribute name="brokerUrl" type="xs:string" />
    <xs:attribute name="charset" type="xs:string" />
    <xs:attribute name="cleanSession" type="xs:string" />
    <xs:attribute name="clientId" type="xs:string" />
    <xs:attribute name="keepAliveInterval" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="password" type="xs:string" />
    <xs:attribute name="persistenceDirectory" type="xs:string" />
    <xs:attribute name="qos" type="xs:string" />
    <xs:attribute name="timeout" type="xs:string" />
    <xs:attribute name="topic" type="xs:string" />
    <xs:attribute name="username" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="MqttSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string" />
    <xs:attribute name="automaticReconnect" type="xs:string" />
    <xs:attribute name="brokerUrl" type="xs:string" />
    <xs:attribute name="charset" type="xs:string" />
    <xs:attribute name="cleanSession" type="xs:string" />
    <xs:attribute name="clientId" type="xs:string" />
    <xs:attribute name="keepAliveInterval" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="password" type="xs:string" />
    <xs:attribute name="persistenceDirectory" type="xs:string" />
    <xs:attribute name="qos" type="xs:string" />
    <xs:attribute name="timeout" type="xs:string" />
    <xs:attribute name="topic" type="xs:string" />
    <xs:attribute name="username" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="MultipartHttpErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the result is base64 encoded (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods (default: text/html)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="xs:string">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodeMessages" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>When true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputMessageParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;methodeType=POST&lt;/code&gt; and &lt;code&gt;paramsInUrl=false&lt;/code&gt;) Name of the request parameter which is used to put the input message in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of method to be executed, either 'GET', 'POST', 'PUT', 'DELETE', 'HEAD' or 'REPORT' (default: GET)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mtomContentTransferEncoding" type="xs:string" />
    <xs:attribute name="multipart" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, request parameters are put in a multipart/form-data entity instead of in the request body (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartResponse" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true the response body is expected to be in mime multipart which is the case when a soap message with attachments is received (see also &lt;a href="https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html"&gt;https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html&lt;/a&gt;). the first part will be returned as result of this sender. other parts are returned as streams in sessionkeys with names multipart1, multipart2, etc. the http connection is held open until the last stream is read. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, a multipart/form-data entity is created instead of a request body. for each part element in the session key a part in the multipart entity is created</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="paramsInUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt;, request parameters are put in the request body instead of in the url (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="postType" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt; the type of post request, must be one of [RAW (text/xml/json), BINARY (file), URLENCODED, FORMDATA, MTOM] (default: RAW)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultAsByteArrayInSessionKey" type="xs:string" />
    <xs:attribute name="storeResultAsStreamInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToFileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to a file (instead of passed as a string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>&gt;(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. (default: url)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MultipartHttpSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the result is base64 encoded (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods (default: text/html)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="xs:string">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodeMessages" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>When true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputMessageParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;methodeType=POST&lt;/code&gt; and &lt;code&gt;paramsInUrl=false&lt;/code&gt;) Name of the request parameter which is used to put the input message in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of method to be executed, either 'GET', 'POST', 'PUT', 'DELETE', 'HEAD' or 'REPORT' (default: GET)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mtomContentTransferEncoding" type="xs:string" />
    <xs:attribute name="multipart" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, request parameters are put in a multipart/form-data entity instead of in the request body (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartResponse" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true the response body is expected to be in mime multipart which is the case when a soap message with attachments is received (see also &lt;a href="https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html"&gt;https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html&lt;/a&gt;). the first part will be returned as result of this sender. other parts are returned as streams in sessionkeys with names multipart1, multipart2, etc. the http connection is held open until the last stream is read. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, a multipart/form-data entity is created instead of a request body. for each part element in the session key a part in the multipart entity is created</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="paramsInUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt;, request parameters are put in the request body instead of in the url (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="postType" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt; the type of post request, must be one of [RAW (text/xml/json), BINARY (file), URLENCODED, FORMDATA, MTOM] (default: RAW)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultAsByteArrayInSessionKey" type="xs:string" />
    <xs:attribute name="storeResultAsStreamInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToFileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to a file (instead of passed as a string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>&gt;(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. (default: url)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="NetStorageErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="accessToken" type="xs:string">
      <xs:annotation>
        <xs:documentation>the api accesstoken</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>possible values: delete, dir, download, du, mkdir, mtime, rename, rmdir, upload</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="actionVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>akamai currently only supports action version 1! (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for nonce (username) and accesstoken (password)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods (default: text/html)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cpCode" type="xs:string">
      <xs:annotation>
        <xs:documentation>the cp code to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="xs:string">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hashAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>only works in combination with the &lt;code&gt;upload&lt;/code&gt; action. if set, and not specified as parameter, the sender will sign the file to be uploaded. possible values: md5, sha1, sha256. &lt;br/&gt;note: if the file input is a stream this will put the file in memory!</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of method to be executed, either 'GET', 'POST', 'PUT', 'DELETE', 'HEAD' or 'REPORT' (default: GET)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nonce" type="xs:string">
      <xs:annotation>
        <xs:documentation>the nonce or api username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootDir" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;i&gt;optional&lt;/i&gt; root directory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="signVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>the version used to sign the authentication headers. possible values: 3 (md5), 4 (sha1), 5 (sha256) (default: 5)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>&gt;(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>the destination, aka akamai host. only the hostname is allowed; eq. xyz-nsu.akamaihd.net</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. (default: url)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="NetStorageSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="accessToken" type="xs:string">
      <xs:annotation>
        <xs:documentation>the api accesstoken</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>possible values: delete, dir, download, du, mkdir, mtime, rename, rmdir, upload</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="actionVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>akamai currently only supports action version 1! (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for nonce (username) and accesstoken (password)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods (default: text/html)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cpCode" type="xs:string">
      <xs:annotation>
        <xs:documentation>the cp code to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="xs:string">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hashAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>only works in combination with the &lt;code&gt;upload&lt;/code&gt; action. if set, and not specified as parameter, the sender will sign the file to be uploaded. possible values: md5, sha1, sha256. &lt;br/&gt;note: if the file input is a stream this will put the file in memory!</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of method to be executed, either 'GET', 'POST', 'PUT', 'DELETE', 'HEAD' or 'REPORT' (default: GET)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nonce" type="xs:string">
      <xs:annotation>
        <xs:documentation>the nonce or api username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootDir" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;i&gt;optional&lt;/i&gt; root directory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="signVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>the version used to sign the authentication headers. possible values: 3 (md5), 4 (sha1), 5 (sha256) (default: 5)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>&gt;(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>the destination, aka akamai host. only the hostname is allowed; eq. xyz-nsu.akamaihd.net</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. (default: url)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PGPPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Action to be taken when pipe is executed. It can be one of the followed: Encrypt (encrypts the input), Sign (Encrypts and Signs the input), Decrypt (Decrypts the input), Verify (Decrypts and verifies the input)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="publicKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path to the recipient's public key. It will be used for encryption and verification.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="recipients" type="xs:string">
      <xs:annotation>
        <xs:documentation>Recipients to be used during encryption stage. If multiple, separate with ';' (semicolon)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secretKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path to the private key. It will be used when signing or decrypting.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secretPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for the private key.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verificationAddresses" type="xs:string">
      <xs:annotation>
        <xs:documentation>Emails of the senders. This will be used to verify that all the senders have signed the given message. If not set, and the action is verify; this pipe will validate that at least one person has signed. For signing action, it needs to be set to the email that was used to generate the private key that is being used for this process.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ParallelSendersSenderType">
    <xs:sequence>
      <xs:element name="Cache" type="CacheType" minOccurs="0" maxOccurs="unbounded" />
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConcurrentThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets and upper limit to the amount of concurrent threads that can be run simultaneously. use 0 to disable. (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is restored before processing the next one (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ParamType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain username and password, used when a &lt;code&gt;pattern&lt;/code&gt; containing {username} or {password} is specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="decimalSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used in combination with type &lt;code&gt;number&lt;/code&gt; (default: system default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If the result of sessionKey, xpathExpression and/or stylesheet returns null or an empty string, this value is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultValueMethods" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of methods (defaultvalue, sessionKey, pattern, value or input) to use as default value. Used in the order they appear until a non-null value is found. (default: defaultvalue)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="formatString" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used in combination with types &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;datetime&lt;/code&gt; (default: depends on type)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="groupingSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used in combination with type &lt;code&gt;number&lt;/code&gt; (default: system default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hidden" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the value of the parameter will not be shown in the log (replaced by asterisks) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxInclusive" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used in combination with type &lt;code&gt;number&lt;/code&gt;; if set and the value of the parameter exceeds this maximum value, this maximum value is taken</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the length of the value of the parameter exceeds this maximum length, the length is trimmed to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minInclusive" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used in combination with type &lt;code&gt;number&lt;/code&gt;; if set and the value of the parameter exceeds this minimum value, this minimum value is taken</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the length of the value of the parameter deceeds this minimum length, the value is padded (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the parameter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. One entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password that is used when a &lt;code&gt;pattern&lt;/code&gt; containing {password} is specified (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of parameter is determined using substitution and formating. The expression can contain references to session-variables or other parameters using {name-of-parameter} and is formatted using java.text.MessageFormat. &lt;br/&gt;If for instance &lt;code&gt;fname&lt;/code&gt; is a parameter or session variable that resolves to eric, then the pattern 'hi {fname}, hoe gaat het?' resolves to 'hi eric, hoe gaat het?'.&lt;br/&gt;The following predefined reference can be used in the expression too:&lt;ul&gt;&lt;li&gt;{now}: the current system time&lt;/li&gt;&lt;li&gt;{uid}: an unique identifier, based on the IP address and java.rmi.server.UID&lt;/li&gt;&lt;li&gt;{uuid}: an unique identifier, based on the IP address and java.util.UUID&lt;/li&gt;&lt;li&gt;{hostname}: the name of the machine the application runs on&lt;/li&gt;&lt;li&gt;{username}: username from the credentials found using authAlias, or the username attribute&lt;/li&gt;&lt;li&gt;{password}: password from the credentials found using authAlias, or the password attribute&lt;/li&gt;&lt;li&gt;{fixeddate}: fake date, for testing only&lt;/li&gt;&lt;li&gt;{fixeduid}: fake uid, for testing only&lt;/li&gt;&lt;li&gt;{fixedhostname}: fake hostname, for testing only&lt;/li&gt;&lt;/ul&gt;A guid can be generated using {hostname}_{uid}, see also &lt;a href="http://java.sun.com/j2se/1.4.2/docs/api/java/rmi/server/uid.html"&gt;http://java.sun.com/j2se/1.4.2/docs/api/java/rmi/server/uid.html&lt;/a&gt; for more information about (g)uid's or &lt;a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/uuid.html"&gt;http://docs.oracle.com/javase/1.5.0/docs/api/java/util/uuid.html&lt;/a&gt; for more information about uuid's.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before the stylesheet/xpathexpression is executed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of a pipelinesession-variable. &lt;br/&gt;If specified, the value of the pipelinesession variable is used as input for the xpathExpression or stylesheet, instead of the current input message. &lt;br/&gt;If no xpathExpression or stylesheet are specified, the value itself is returned. &lt;br/&gt;If the value '*' is specified, all existing sessionkeys are added as parameter of which the name starts with the name of this parameter. &lt;br/&gt;If also the name of the parameter has the value '*' then all existing sessionkeys are added as parameter (except tsreceived)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKeyXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>Instead of a fixed &lt;code&gt;sessionkey&lt;/code&gt; it's also possible to use a xpath expression to extract the name of the &lt;code&gt;sessionkey&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>url to a stylesheet that wil be applied to the contents of the message or the value of the session-variable.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;ul&gt;&lt;li&gt;&lt;code&gt;string&lt;/code&gt;: renders the contents of the first node (in combination with xslt or xpath).&lt;br/&gt;Please note that if there are child nodes, only the contents are returned, use &lt;code&gt;xml&lt;/code&gt; if the xml tags are required&lt;/li&gt;&lt;li&gt;&lt;code&gt;xml&lt;/code&gt;:  renders an xml-nodeset as an xml-string (in combination with xslt or xpath). This will include the xml tags&lt;/li&gt;&lt;li&gt;&lt;code&gt;node&lt;/code&gt;: renders the CONTENTS of the first node as a nodeset that can be used as such when passed as xslt-parameter (only for XSLT 1.0). &lt;br/&gt;Please note that the nodeset may contain multiple nodes, without a common root node. &lt;br/&gt;N.B. The result is the set of children of what you might expect it to be...&lt;/li&gt;&lt;li&gt;&lt;code&gt;domdoc&lt;/code&gt;: renders xml as a DOM document; similar to &lt;code&gt;node&lt;/code&gt; with the distinction that there is always a common root node (required for XSLT 2.0)&lt;/li&gt;&lt;li&gt;&lt;code&gt;date&lt;/code&gt;: converts the result to a Date, by default using formatString &lt;code&gt;yyyy-MM-dd&lt;/code&gt;. When applied as a JDBC parameter, the method setDate() is used&lt;/li&gt;&lt;li&gt;&lt;code&gt;time&lt;/code&gt;: converts the result to a Date, by default using formatString &lt;code&gt;HH:mm:ss&lt;/code&gt;. When applied as a JDBC parameter, the method setTime() is used&lt;/li&gt;&lt;li&gt;&lt;code&gt;datetime&lt;/code&gt;: converts the result to a Date, by default using formatString &lt;code&gt;yyyy-MM-dd HH:mm:ss&lt;/code&gt;. When applied as a JDBC parameter, the method setTimestamp() is used&lt;/li&gt;&lt;li&gt;&lt;code&gt;timestamp&lt;/code&gt;: similar to datetime, except for the formatString that is &lt;code&gt;yyyy-MM-dd HH:mm:ss.SSS&lt;/code&gt; by default&lt;/li&gt;&lt;li&gt;&lt;code&gt;xmldatetime&lt;/code&gt;: converts the result from a XML dateTime to a Date. When applied as a JDBC parameter, the method setTimestamp() is used&lt;/li&gt;&lt;li&gt;&lt;code&gt;number&lt;/code&gt;: converts the result to a Number, using decimalSeparator and groupingSeparator. When applied as a JDBC parameter, the method setDouble() is used&lt;/li&gt;&lt;li&gt;&lt;code&gt;integer&lt;/code&gt;: converts the result to an Integer&lt;/li&gt;&lt;li&gt;&lt;code&gt;inputstream&lt;/code&gt;: only applicable as a JDBC parameter, the method setBinaryStream() is used&lt;/li&gt;&lt;li&gt;&lt;code&gt;list&lt;/code&gt;: converts a List&amp;lt;String&amp;gt; object to a xml-string (&amp;lt;items&amp;gt;&amp;lt;item&amp;gt;...&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;...&amp;lt;/item&amp;gt;&amp;lt;/items&amp;gt;)&lt;/li&gt;&lt;li&gt;&lt;code&gt;map&lt;/code&gt;: converts a Map&amp;lt;String, String&amp;gt; object to a xml-string (&amp;lt;items&amp;gt;&amp;lt;item name='...'&amp;gt;...&amp;lt;/item&amp;gt;&amp;lt;item name='...'&amp;gt;...&amp;lt;/item&amp;gt;&amp;lt;/items&amp;gt;)&lt;/li&gt;&lt;/ul&gt; (default: string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username that is used when a &lt;code&gt;pattern&lt;/code&gt; containing {username} is specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string">
      <xs:annotation>
        <xs:documentation>The value of the parameter, or the base for transformation using xpathExpression or stylesheet, or formatting.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>the xpath expression to extract the parameter value from the (xml formatted) input or session-variable.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xslt2" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PasswordGeneratorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lCharacters" type="xs:string">
      <xs:annotation>
        <xs:documentation>the lowercase characters to use (default: ('a'..'z'))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numOfDigits" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of digits in the generated password (default: 2)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numOfLCharacters" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of lowercase characters in the generated password (default: 2)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numOfSigns" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of sign characters in the generated password (default: 2)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numOfUCharacters" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of uppercase characters in the generated password (default: 2)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numbers" type="xs:string">
      <xs:annotation>
        <xs:documentation>the numbers to use (default: ('0'..'9'))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="signs" type="xs:string">
      <xs:annotation>
        <xs:documentation>the signs to use (default: (;:_%$#@!&amp;gt;&amp;lt;))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uCharacters" type="xs:string">
      <xs:annotation>
        <xs:documentation>the uppercase characters to use (default: ('a'..'z'))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useSecureRandom" type="xs:string">
      <xs:annotation>
        <xs:documentation>whether the securerandom algorithm is to be used (slower) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="PasswordHashPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hashSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of sessionkey that holds the hash which will be used to validate the password (input of the pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rounds" type="xs:string" />
    <xs:attribute name="roundsSessionKey" type="xs:string" />
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="PipelineType">
    <xs:sequence>
      <xs:element name="Cache" type="CacheType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Adios2XmlPipe" type="Adios2XmlPipeType" minOccurs="0" />
        <xs:element name="ApiPrincipalPipe" type="ApiPrincipalPipeType" minOccurs="0" />
        <xs:element name="ApiSoapWrapperPipe" type="ApiSoapWrapperPipeType" minOccurs="0" />
        <xs:element name="ApiStreamPipe" type="ApiStreamPipeType" minOccurs="0" />
        <xs:element name="ApiWsdlXmlValidatorPipe" type="ApiWsdlXmlValidatorPipeType" minOccurs="0" />
        <xs:element name="Base64Pipe" type="Base64PipeType" minOccurs="0" />
        <xs:element name="BatchBlobTransformerPipe" type="BatchBlobTransformerPipeType" minOccurs="0" />
        <xs:element name="BatchClobTransformerPipe" type="BatchClobTransformerPipeType" minOccurs="0" />
        <xs:element name="BatchFileTransformerPipe" type="BatchFileTransformerPipeType" minOccurs="0" />
        <xs:element name="BisWrapperPipe" type="BisWrapperPipeType" minOccurs="0" />
        <xs:element name="BlobLineIteratingPipe" type="BlobLineIteratingPipeType" minOccurs="0" />
        <xs:element name="BytesOutputPipe" type="BytesOutputPipeType" minOccurs="0" />
        <xs:element name="ChecksumPipe" type="ChecksumPipeType" minOccurs="0" />
        <xs:element name="CleanupOldFilesPipe" type="CleanupOldFilesPipeType" minOccurs="0" />
        <xs:element name="ClobLineIteratingPipe" type="ClobLineIteratingPipeType" minOccurs="0" />
        <xs:element name="CompareIntegerPipe" type="CompareIntegerPipeType" minOccurs="0" />
        <xs:element name="CompareStringPipe" type="CompareStringPipeType" minOccurs="0" />
        <xs:element name="CompressPipe" type="CompressPipeType" minOccurs="0" />
        <xs:element name="CounterSwitchPipe" type="CounterSwitchPipeType" minOccurs="0" />
        <xs:element name="CredentialCheckingPipe" type="CredentialCheckingPipeType" minOccurs="0" />
        <xs:element name="CrlPipe" type="CrlPipeType" minOccurs="0" />
        <xs:element name="DelayPipe" type="DelayPipeType" minOccurs="0" />
        <xs:element name="DigesterPipe" type="DigesterPipeType" minOccurs="0" />
        <xs:element name="DirectWrapperPipe" type="DirectWrapperPipeType" minOccurs="0" />
        <xs:element name="DomainTransformerPipe" type="DomainTransformerPipeType" minOccurs="0" />
        <xs:element name="EchoPipe" type="EchoPipeType" minOccurs="0" />
        <xs:element name="EsbSoapValidatorPipe" type="EsbSoapValidatorPipeType" minOccurs="0" />
        <xs:element name="EsbSoapWrapperPipe" type="EsbSoapWrapperPipeType" minOccurs="0" />
        <xs:element name="EscapePipe" type="EscapePipeType" minOccurs="0" />
        <xs:element name="EtagHandlerPipe" type="EtagHandlerPipeType" minOccurs="0" />
        <xs:element name="ExceptionPipe" type="ExceptionPipeType" minOccurs="0" />
        <xs:element name="FileLineIteratorPipe" type="FileLineIteratorPipeType" minOccurs="0" />
        <xs:element name="FilePipe" type="FilePipeType" minOccurs="0" />
        <xs:element name="FileSystemPipe" type="FileSystemPipeType" minOccurs="0" />
        <xs:element name="FilenameSwitchPipe" type="FilenameSwitchPipeType" minOccurs="0" />
        <xs:element name="FixedResultPipe" type="FixedResultPipeType" minOccurs="0" />
        <xs:element name="ForEachAttachmentPipe" type="ForEachAttachmentPipeType" minOccurs="0" />
        <xs:element name="ForEachChildElementPipe" type="ForEachChildElementPipeType" minOccurs="0" />
        <xs:element name="FtpFileRetrieverPipe" type="FtpFileRetrieverPipeType" minOccurs="0" />
        <xs:element name="FxfWrapperPipe" type="FxfWrapperPipeType" minOccurs="0" />
        <xs:element name="FxfXmlValidatorPipe" type="FxfXmlValidatorPipeType" minOccurs="0" />
        <xs:element name="GetFromSessionPipe" type="GetFromSessionPipeType" minOccurs="0" />
        <xs:element name="GetLtpaTokenPipe" type="GetLtpaTokenPipeType" minOccurs="0" />
        <xs:element name="GetPrincipalPipe" type="GetPrincipalPipeType" minOccurs="0" />
        <xs:element name="HashPipe" type="HashPipeType" minOccurs="0" />
        <xs:element name="IbisMetricsPipe" type="IbisMetricsPipeType" minOccurs="0" />
        <xs:element name="IfMultipartPipe" type="IfMultipartPipeType" minOccurs="0" />
        <xs:element name="IncreaseIntegerPipe" type="IncreaseIntegerPipeType" minOccurs="0" />
        <xs:element name="IsUserInRolePipe" type="IsUserInRolePipeType" minOccurs="0" />
        <xs:element name="IsXmlIfPipe" type="IsXmlIfPipeType" minOccurs="0" />
        <xs:element name="Json2XmlValidatorPipe" type="Json2XmlValidatorPipeType" minOccurs="0" />
        <xs:element name="JsonPipe" type="JsonPipeType" minOccurs="0" />
        <xs:element name="JsonWellFormedCheckerPipe" type="JsonWellFormedCheckerPipeType" minOccurs="0" />
        <xs:element name="JsonXsltPipe" type="JsonXsltPipeType" minOccurs="0" />
        <xs:element name="LabelFormatPipe" type="LabelFormatPipeType" minOccurs="0" />
        <xs:element name="LadybugPipe" type="LadybugPipeType" minOccurs="0" />
        <xs:element name="LarvaPipe" type="LarvaPipeType" minOccurs="0" />
        <xs:element name="LdapChallengePipe" type="LdapChallengePipeType" minOccurs="0" />
        <xs:element name="LdapFindGroupMembershipsPipe" type="LdapFindGroupMembershipsPipeType" minOccurs="0" />
        <xs:element name="LdapFindMemberPipe" type="LdapFindMemberPipeType" minOccurs="0" />
        <xs:element name="LocalFileSystemPipe" type="LocalFileSystemPipeType" minOccurs="0" />
        <xs:element name="MailSenderPipe" type="MailSenderPipeType" minOccurs="0" />
        <xs:element name="MoveFilePipe" type="MoveFilePipeType" minOccurs="0" />
        <xs:element name="PGPPipe" type="PGPPipeType" minOccurs="0" />
        <xs:element name="PasswordGeneratorPipe" type="PasswordGeneratorPipeType" minOccurs="0" />
        <xs:element name="PasswordHashPipe" type="PasswordHashPipeType" minOccurs="0" />
        <xs:element name="PostboxRetrieverPipe" type="PostboxRetrieverPipeType" minOccurs="0" />
        <xs:element name="PutInSessionPipe" type="PutInSessionPipeType" minOccurs="0" />
        <xs:element name="PutParametersInSessionPipe" type="PutParametersInSessionPipeType" minOccurs="0" />
        <xs:element name="PutSystemDateInSessionPipe" type="PutSystemDateInSessionPipeType" minOccurs="0" />
        <xs:element name="RekenBoxCallerPipe" type="RekenBoxCallerPipeType" minOccurs="0" />
        <xs:element name="RemoveCacheKeyPipe" type="RemoveCacheKeyPipeType" minOccurs="0" />
        <xs:element name="RemoveFromSessionPipe" type="RemoveFromSessionPipeType" minOccurs="0" />
        <xs:element name="ReplacerPipe" type="ReplacerPipeType" minOccurs="0" />
        <xs:element name="ResultSetIteratingPipe" type="ResultSetIteratingPipeType" minOccurs="0" />
        <xs:element name="RhinoPipe" type="RhinoPipeType" minOccurs="0" />
        <xs:element name="Samba1Pipe" type="Samba1PipeType" minOccurs="0" />
        <xs:element name="Samba2Pipe" type="Samba2PipeType" minOccurs="0" />
        <xs:element name="SambaPipe" type="SambaPipeType" minOccurs="0" />
        <xs:element name="ScanTibcoSolutionPipe" type="ScanTibcoSolutionPipeType" minOccurs="0" />
        <xs:element name="SenderPipe" type="SenderPipeType" minOccurs="0" />
        <xs:element name="SizePipe" type="SizePipeType" minOccurs="0" />
        <xs:element name="SkipPipe" type="SkipPipeType" minOccurs="0" />
        <xs:element name="SoapValidatorPipe" type="SoapValidatorPipeType" minOccurs="0" />
        <xs:element name="SoapWrapperPipe" type="SoapWrapperPipeType" minOccurs="0" />
        <xs:element name="Stream2StringPipe" type="Stream2StringPipeType" minOccurs="0" />
        <xs:element name="StreamLineIteratorPipe" type="StreamLineIteratorPipeType" minOccurs="0" />
        <xs:element name="StreamPipe" type="StreamPipeType" minOccurs="0" />
        <xs:element name="StreamTransformerPipe" type="StreamTransformerPipeType" minOccurs="0" />
        <xs:element name="StringIteratorPipe" type="StringIteratorPipeType" minOccurs="0" />
        <xs:element name="Text2XmlPipe" type="Text2XmlPipeType" minOccurs="0" />
        <xs:element name="UUIDGeneratorPipe" type="UUIDGeneratorPipeType" minOccurs="0" />
        <xs:element name="UnzipPipe" type="UnzipPipeType" minOccurs="0" />
        <xs:element name="UploadFilePipe" type="UploadFilePipeType" minOccurs="0" />
        <xs:element name="WsdlGeneratorPipe" type="WsdlGeneratorPipeType" minOccurs="0" />
        <xs:element name="WsdlXmlValidatorPipe" type="WsdlXmlValidatorPipeType" minOccurs="0" />
        <xs:element name="XQueryPipe" type="XQueryPipeType" minOccurs="0" />
        <xs:element name="XmlBuilderPipe" type="XmlBuilderPipeType" minOccurs="0" />
        <xs:element name="XmlFileElementIteratorPipe" type="XmlFileElementIteratorPipeType" minOccurs="0" />
        <xs:element name="XmlIfPipe" type="XmlIfPipeType" minOccurs="0" />
        <xs:element name="XmlSwitchPipe" type="XmlSwitchPipeType" minOccurs="0" />
        <xs:element name="XmlValidatorPipe" type="XmlValidatorPipeType" minOccurs="0" />
        <xs:element name="XmlWellFormedCheckerPipe" type="XmlWellFormedCheckerPipeType" minOccurs="0" />
        <xs:element name="XsltPipe" type="XsltPipeType" minOccurs="0" />
        <xs:element name="ZipIteratorPipe" type="ZipIteratorPipeType" minOccurs="0" />
        <xs:element name="ZipWriterPipe" type="ZipWriterPipeType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Exit" type="ExitType" minOccurs="0" maxOccurs="unbounded" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="adapterToRunBeforeOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when specified and an empty message is received the specified adapter is run before passing the message (response from specified adapter) to the pipeline</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commitOnState" type="xs:string">
      <xs:annotation>
        <xs:documentation>if the pipelineresult.getstate() equals this value, the transaction is committed, otherwise it is rolled back. (default: &lt;code&gt;success&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="firstPipe" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the first pipe to execute when a message is to be processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceFixedForwarding" type="xs:string">
      <xs:annotation>
        <xs:documentation>forces that each pipe in the pipeline is not automatically added to the globalforwards table (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSizeWarn" type="xs:string">
      <xs:annotation>
        <xs:documentation>if messagesizewarn&gt;=0 and the size of the input or result pipe message exceeds the value specified a warning message is logged (default: application default (3mb))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeOriginalMessageWithoutNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; the original message without namespaces (and prefixes) is stored under the session key originalmessagewithoutnamespaces (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set to &lt;code&gt;true, messages will be processed under transaction control. (see below)&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>The &lt;code&gt;transactionAttribute&lt;/code&gt; declares transactional behavior of pipeline execution. It applies both to database transactions and XA transactions.The pipeline uses this to start a new transaction or suspend the current one when required. For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;. Possible values for transactionAttribute:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transformNullMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>when specified and &lt;code&gt;null&lt;/code&gt; is received as a message the message is changed to the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PostboxRetrieverPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiListener" type="ApiListenerType" minOccurs="0" />
        <xs:element name="BisJmsListener" type="BisJmsListenerType" minOccurs="0" />
        <xs:element name="CmisEventListener" type="CmisEventListenerType" minOccurs="0" />
        <xs:element name="DirectoryListener" type="DirectoryListenerType" minOccurs="0" />
        <xs:element name="EsbJmsListener" type="EsbJmsListenerType" minOccurs="0" />
        <xs:element name="ExchangeMailListener" type="ExchangeMailListenerType" minOccurs="0" />
        <xs:element name="FileRecordListener" type="FileRecordListenerType" minOccurs="0" />
        <xs:element name="FtpListener" type="FtpListenerType" minOccurs="0" />
        <xs:element name="FxfListener" type="FxfListenerType" minOccurs="0" />
        <xs:element name="HttpListener" type="HttpListenerType" minOccurs="0" />
        <xs:element name="IfsaProviderListener" type="IfsaProviderListenerType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsListener" type="IfsaSimulatorJmsListenerType" minOccurs="0" />
        <xs:element name="JavaListener" type="JavaListenerType" minOccurs="0" />
        <xs:element name="JdbcListener" type="JdbcListenerType" minOccurs="0" />
        <xs:element name="JdbcQueryListener" type="JdbcQueryListenerType" minOccurs="0" />
        <xs:element name="JdbcTableListener" type="JdbcTableListenerType" minOccurs="0" />
        <xs:element name="JmsListener" type="JmsListenerType" minOccurs="0" />
        <xs:element name="MessageStoreListener" type="MessageStoreListenerType" minOccurs="0" />
        <xs:element name="MqttListener" type="MqttListenerType" minOccurs="0" />
        <xs:element name="PullingJmsListener" type="PullingJmsListenerType" minOccurs="0" />
        <xs:element name="PushingJmsListener" type="PushingJmsListenerType" minOccurs="0" />
        <xs:element name="PushingListenerAdapterListener" type="PushingListenerAdapterListenerType" minOccurs="0" />
        <xs:element name="RestListener" type="RestListenerType" minOccurs="0" />
        <xs:element name="Samba2Listener" type="Samba2ListenerType" minOccurs="0" />
        <xs:element name="SambaListener" type="SambaListenerType" minOccurs="0" />
        <xs:element name="SimpleJdbcListener" type="SimpleJdbcListenerType" minOccurs="0" />
        <xs:element name="TibcoListener" type="TibcoListenerType" minOccurs="0" />
        <xs:element name="TibcoLogJmsListener" type="TibcoLogJmsListenerType" minOccurs="0" />
        <xs:element name="WebServiceListener" type="WebServiceListenerType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnEmptyPostbox" type="xs:string">
      <xs:annotation>
        <xs:documentation>result when no object is on postbox (default: empty postbox)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="PullingJmsListenerType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commitOnState" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;i&gt;deprecated&lt;/i&gt; exit state to control commit or rollback of jmssession. only used if &lt;code&gt;jmstransacted&lt;/code&gt; is set true. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceMessageIdAsCorrelationId" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyDeliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that reply messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyEncodingStyleURI" type="xs:string" />
    <xs:attribute name="replyMessageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>time that replymessage will live (default: 0 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field of the reply message (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNamespaceURI" type="xs:string" />
    <xs:attribute name="replyPriority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the reply message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapAction" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>receive timeout in milliseconds as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long- (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useReplyTo" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xPathLoggingKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of all xpath keys that need to be logged. (overrides &lt;code&gt;msg.log.keys&lt;/code&gt; property)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PushingJmsListenerType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheMode" type="xs:string" />
    <xs:attribute name="commitOnState" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;i&gt;deprecated&lt;/i&gt; exit state to control commit or rollback of jmssession. only used if &lt;code&gt;jmstransacted&lt;/code&gt; is set true. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceMessageIdAsCorrelationId" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="listenerPort" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pollGuardInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>interval in milliseconds for the poll guard to check whether a successful poll was done by the receive (https://docs.oracle.com/javaee/7/api/javax/jms/messageconsumer.html#receive-long-) since last check. when polling has stopped this will be logged and the listener will be stopped and started in an attempt to workaround problems with polling. polling might stop due to bugs in the jms driver/implementation which should be fixed by the supplier. as the poll time includes reading and processing of the message no successful poll might be registered since the last check when message processing takes a long time, hence while messages are being processed the check on last successful poll will be skipped. set to -1 to disable (default: ten times the specified timeout)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyDeliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that reply messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyEncodingStyleURI" type="xs:string" />
    <xs:attribute name="replyMessageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>time that replymessage will live (default: 0 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field of the reply message (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNamespaceURI" type="xs:string" />
    <xs:attribute name="replyPriority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the reply message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapAction" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>receive timeout in milliseconds as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long- (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useReplyTo" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xPathLoggingKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of all xpath keys that need to be logged. (overrides &lt;code&gt;msg.log.keys&lt;/code&gt; property)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PushingListenerAdapterListenerType">
    <xs:attribute name="applicationFaultsAsExceptions" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener as known to the adapter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="running" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="PutInSessionPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of the session variable to store the input in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value to store in the &lt;code&gt;pipeLineSession&lt;/code&gt;. If not set, the input of the pipe is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="PutParametersInSessionPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="PutSystemDateInSessionPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>format to store date in (default: fullisoformat: yyyy-mm-dd't'hh:mm:sszzz)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getCurrentTimeStampInMillis" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to 'true' then current time stamp in millisecond will be stored in the sessionKey (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnFixedDate" type="xs:string">
      <xs:annotation>
        <xs:documentation>if &lt;code&gt;true&lt;/code&gt;, the date/time returned will always be december 17, 2001, 09:30:47 (for testing purposes only). it is overridden by the value of the pipelinesession key &lt;code&gt;stub4testtool.fixeddate&lt;/code&gt; when it exists (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store systemdate in (default: systemdate)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sleepWhenEqualToPrevious" type="xs:string">
      <xs:annotation>
        <xs:documentation>set to a time in millisecond to create a value that is different to the previous returned value by a putsystemdateinsession pipe in this virtual machine. the thread will sleep for the specified time before recalculating a new value. set the timezone to a value without daylight saving time (like gmt+1) to prevent this pipe to generate two equal value's when the clock is set back. &lt;b&gt;note:&lt;/b&gt; when you're looking for a guid parameter for you xslt it might be better to use &amp;lt;param name=&amp;quot;guid&amp;quot; pattern=&amp;quot;{hostname}_{uid}&amp;quot;/&amp;gt;, see {@link nl.nn.adapterframework.parameters.parameter} (default: -1 (disabled))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeZone" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time zone to use for the formatter (default: the default time zone for the jvm)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ReceiverType">
    <xs:sequence>
      <xs:choice minOccurs="0">
        <xs:element name="ApiListener" type="ApiListenerType" minOccurs="0" />
        <xs:element name="BisJmsListener" type="BisJmsListenerType" minOccurs="0" />
        <xs:element name="CmisEventListener" type="CmisEventListenerType" minOccurs="0" />
        <xs:element name="DirectoryListener" type="DirectoryListenerType" minOccurs="0" />
        <xs:element name="EsbJmsListener" type="EsbJmsListenerType" minOccurs="0" />
        <xs:element name="ExchangeMailListener" type="ExchangeMailListenerType" minOccurs="0" />
        <xs:element name="FileRecordListener" type="FileRecordListenerType" minOccurs="0" />
        <xs:element name="FtpListener" type="FtpListenerType" minOccurs="0" />
        <xs:element name="FxfListener" type="FxfListenerType" minOccurs="0" />
        <xs:element name="HttpListener" type="HttpListenerType" minOccurs="0" />
        <xs:element name="IfsaProviderListener" type="IfsaProviderListenerType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsListener" type="IfsaSimulatorJmsListenerType" minOccurs="0" />
        <xs:element name="JavaListener" type="JavaListenerType" minOccurs="0" />
        <xs:element name="JdbcListener" type="JdbcListenerType" minOccurs="0" />
        <xs:element name="JdbcQueryListener" type="JdbcQueryListenerType" minOccurs="0" />
        <xs:element name="JdbcTableListener" type="JdbcTableListenerType" minOccurs="0" />
        <xs:element name="JmsListener" type="JmsListenerType" minOccurs="0" />
        <xs:element name="MessageStoreListener" type="MessageStoreListenerType" minOccurs="0" />
        <xs:element name="MqttListener" type="MqttListenerType" minOccurs="0" />
        <xs:element name="PullingJmsListener" type="PullingJmsListenerType" minOccurs="0" />
        <xs:element name="PushingJmsListener" type="PushingJmsListenerType" minOccurs="0" />
        <xs:element name="PushingListenerAdapterListener" type="PushingListenerAdapterListenerType" minOccurs="0" />
        <xs:element name="RestListener" type="RestListenerType" minOccurs="0" />
        <xs:element name="Samba2Listener" type="Samba2ListenerType" minOccurs="0" />
        <xs:element name="SambaListener" type="SambaListenerType" minOccurs="0" />
        <xs:element name="SimpleJdbcListener" type="SimpleJdbcListenerType" minOccurs="0" />
        <xs:element name="TibcoListener" type="TibcoListenerType" minOccurs="0" />
        <xs:element name="TibcoLogJmsListener" type="TibcoLogJmsListenerType" minOccurs="0" />
        <xs:element name="WebServiceListener" type="WebServiceListenerType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactErrorSender" type="Afm2EdiFactErrorSenderType" minOccurs="0" />
        <xs:element name="AmazonS3ErrorSender" type="AmazonS3ErrorSenderType" minOccurs="0" />
        <xs:element name="BisJmsErrorSender" type="BisJmsErrorSenderType" minOccurs="0" />
        <xs:element name="CmisErrorSender" type="CmisErrorSenderType" minOccurs="0" />
        <xs:element name="CmisHttpErrorSender" type="CmisHttpErrorSenderType" minOccurs="0" />
        <xs:element name="CommandErrorSender" type="CommandErrorSenderType" minOccurs="0" />
        <xs:element name="DelayErrorSender" type="DelayErrorSenderType" minOccurs="0" />
        <xs:element name="DirectQueryErrorSender" type="DirectQueryErrorSenderType" minOccurs="0" />
        <xs:element name="EchoErrorSender" type="EchoErrorSenderType" minOccurs="0" />
        <xs:element name="EsbJmsErrorSender" type="EsbJmsErrorSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderErrorSender" type="ExchangeFolderErrorSenderType" minOccurs="0" />
        <xs:element name="FileErrorSender" type="FileErrorSenderType" minOccurs="0" />
        <xs:element name="FileSystemErrorSender" type="FileSystemErrorSenderType" minOccurs="0" />
        <xs:element name="FixedQueryErrorSender" type="FixedQueryErrorSenderType" minOccurs="0" />
        <xs:element name="FixedResultErrorSender" type="FixedResultErrorSenderType" minOccurs="0" />
        <xs:element name="FtpErrorSender" type="FtpErrorSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemErrorSender" type="FtpFileSystemErrorSenderType" minOccurs="0" />
        <xs:element name="HttpErrorSender" type="HttpErrorSenderType" minOccurs="0" />
        <xs:element name="IMSErrorSender" type="IMSErrorSenderType" minOccurs="0" />
        <xs:element name="IbisJavaErrorSender" type="IbisJavaErrorSenderType" minOccurs="0" />
        <xs:element name="IbisLocalErrorSender" type="IbisLocalErrorSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceErrorSender" type="IbisWebServiceErrorSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsErrorSender" type="IfsaSimulatorJmsErrorSenderType" minOccurs="0" />
        <xs:element name="JavascriptErrorSender" type="JavascriptErrorSenderType" minOccurs="0" />
        <xs:element name="JmsErrorSender" type="JmsErrorSenderType" minOccurs="0" />
        <xs:element name="JsonXsltErrorSender" type="JsonXsltErrorSenderType" minOccurs="0" />
        <xs:element name="LdapErrorSender" type="LdapErrorSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemErrorSender" type="LocalFileSystemErrorSenderType" minOccurs="0" />
        <xs:element name="LogErrorSender" type="LogErrorSenderType" minOccurs="0" />
        <xs:element name="MQErrorSender" type="MQErrorSenderType" minOccurs="0" />
        <xs:element name="MailErrorSender" type="MailErrorSenderType" minOccurs="0" />
        <xs:element name="MessageStoreErrorSender" type="MessageStoreErrorSenderType" minOccurs="0" />
        <xs:element name="MqttErrorSender" type="MqttErrorSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpErrorSender" type="MultipartHttpErrorSenderType" minOccurs="0" />
        <xs:element name="NetStorageErrorSender" type="NetStorageErrorSenderType" minOccurs="0" />
        <xs:element name="ReloadErrorSender" type="ReloadErrorSenderType" minOccurs="0" />
        <xs:element name="RestErrorSender" type="RestErrorSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileErrorSender" type="ResultSet2FileErrorSenderType" minOccurs="0" />
        <xs:element name="Samba1ErrorSender" type="Samba1ErrorSenderType" minOccurs="0" />
        <xs:element name="Samba2ErrorSender" type="Samba2ErrorSenderType" minOccurs="0" />
        <xs:element name="SambaErrorSender" type="SambaErrorSenderType" minOccurs="0" />
        <xs:element name="SapErrorSender" type="SapErrorSenderType" minOccurs="0" />
        <xs:element name="SchedulerErrorSender" type="SchedulerErrorSenderType" minOccurs="0" />
        <xs:element name="SendGridErrorSender" type="SendGridErrorSenderType" minOccurs="0" />
        <xs:element name="ShadowErrorSender" type="ShadowErrorSenderType" minOccurs="0" />
        <xs:element name="TibcoErrorSender" type="TibcoErrorSenderType" minOccurs="0" />
        <xs:element name="WebServiceErrorSender" type="WebServiceErrorSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmErrorSender" type="WebServiceNtlmErrorSenderType" minOccurs="0" />
        <xs:element name="XComErrorSender" type="XComErrorSenderType" minOccurs="0" />
        <xs:element name="XfbErrorSender" type="XfbErrorSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserErrorSender" type="XmlJmsBrowserErrorSenderType" minOccurs="0" />
        <xs:element name="XmlQueryErrorSender" type="XmlQueryErrorSenderType" minOccurs="0" />
        <xs:element name="XmlValidatorErrorSender" type="XmlValidatorErrorSenderType" minOccurs="0" />
        <xs:element name="XsltErrorSender" type="XsltErrorSenderType" minOccurs="0" />
        <xs:element name="ZipWriterErrorSender" type="ZipWriterErrorSenderType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyErrorStorage" type="DummyErrorStorageType" minOccurs="0" />
        <xs:element name="EsbJmsErrorStorage" type="EsbJmsErrorStorageType" minOccurs="0" />
        <xs:element name="JdbcErrorStorage" type="JdbcErrorStorageType" minOccurs="0" />
        <xs:element name="JmsErrorStorage" type="JmsErrorStorageType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the receiver is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkForDuplicates" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, each message is checked for presence in the message log. If already present, it is not processed again. Only required for non XA compatible messaging. Requires messagelog! (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkForDuplicatesMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;checkForDuplicates=true&lt;/code&gt;) Either 'CORRELATIONID' or 'MESSAGEID'. Indicates whether the messageid or the correlationid is used for checking presence in the message log (default: MESSAGEID)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for correlationIDXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to extract correlationID from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementtomovesessionkey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementtomove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. adapter;pipeline;pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementtomove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hiddenInputSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of keys of session variables which are available when the &lt;code&gt;pipelinesession&lt;/code&gt; is created and of which the value will not be shown in the log (replaced by asterisks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for labelXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxDeliveries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum delivery count after which to stop processing the message. when -1 the delivery count is ignored (default: 5)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after an exception is caught or rollback is experienced (only applicable for transacted receivers). if maxretries &amp;lt; 0 the number of attempts is infinite (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the receiver as known to the adapter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of threads that may execute a pipeline concurrently (only for pulling listeners) (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numThreadsPolling" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of threads that are activily polling for messages concurrently. '0' means 'limited only by &lt;code&gt;numthreads&lt;/code&gt;' (only for pulling listeners) (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onError" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of 'continue' or 'close'. controls the behaviour of the receiver when it encounters an error sending a reply or receives an exception asynchronously (default: continue)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="poisonMessageIdCacheSize" type="xs:string" />
    <xs:attribute name="pollInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of seconds waited after an unsuccesful poll attempt before another poll attempt is made. Only for polling listeners, not for e.g. ifsa, jms, webservice or javaListeners (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processResultCacheSize" type="xs:string" />
    <xs:attribute name="recover" type="xs:string" />
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="returnedSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of keys of session variables that should be returned to caller, for correct results as well as for erronous results. (only for listeners that support it, like javalistener)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set to &lt;code&gt;true&lt;/code&gt;, messages will be received and processed under transaction control. if processing fails, messages will be sent to the error-sender. (see below) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>The transactionAttribute declares transactional behavior of the receiver. It applies both to database transactions and XA transactions. The receiver uses this to start a new transaction or suspend the current one when required. For developers: it is equal to &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;. Possible values for transactionAttribute:   &lt;table border="1"&gt;	&lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;												  &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;												  &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;												  &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;												  &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;	&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 											  &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;	   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;												  &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Timeout (in seconds) of transaction started to receive and process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="RekenBoxCallerPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cleanup" type="xs:string" />
    <xs:attribute name="commandLineType" type="xs:string" />
    <xs:attribute name="dataFilenamePrefix" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="executableExtension" type="xs:string" />
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputOutputDirectory" type="xs:string" />
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxRequestNumber" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rekenBoxName" type="xs:string" />
    <xs:attribute name="rekenboxSessionKey" type="xs:string" />
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="runPath" type="xs:string" />
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="templateDir" type="xs:string" />
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ReloadErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="forceReload" type="xs:string">
      <xs:annotation>
        <xs:documentation>reload the configuration regardless of the version (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ReloadSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="forceReload" type="xs:string">
      <xs:annotation>
        <xs:documentation>reload the configuration regardless of the version (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="RemoveCacheKeyPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the cache from which items are to be removed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyInputSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to use as input for transformation of request message to key by keyXPath or keyStyleSheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for keyXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to extract cache key from request message. Use in combination with {@link #setCacheEmptyKeys(boolean) cacheEmptyKeys} to inhibit caching for certain groups of request messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath expression to extract cache key from request message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyXPathOutputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Output type of xpath expression to extract cache key from request message, must be 'xml' or 'text' (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="RemoveFromSessionPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the key of the entry in the &lt;code&gt;pipelinesession&lt;/code&gt; to remove. if this key is empty the input message is interpretted as key. for multiple keys use ',' as delimiter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ReplacerPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowUnicodeSupplementaryCharacters" type="xs:string">
      <xs:annotation>
        <xs:documentation>Whether to allow Unicode supplementary characters (like a smiley) during {@link nl.nn.adapterframework.util.XmlUtils#replaceNonValidXmlCharacters(String, char, boolean, boolean) replaceNonValidXmlCharacters} (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="find" type="xs:string">
      <xs:annotation>
        <xs:documentation>string to search for</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineSeparatorSymbol" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the string the representation in find and replace of the line separator</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="replace" type="xs:string">
      <xs:annotation>
        <xs:documentation>string that will replace each of the strings found</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceNonXmlChar" type="xs:string">
      <xs:annotation>
        <xs:documentation>character that will replace each non valid xml character (empty string is also possible) (use &amp;amp;#x00bf; for inverted question mark) (default: empty string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceNonXmlChars" type="xs:string">
      <xs:annotation>
        <xs:documentation>Replace all non XML chars (not in the &lt;a href="http://www.w3.org/TR/2006/REC-xml-20060816/#NT-Char"&gt;character range as specified by the XML specification&lt;/a&gt;) with {@link nl.nn.adapterframework.util.XmlUtils#replaceNonValidXmlCharacters(String, char, boolean, boolean) replaceNonValidXmlCharacters} (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="RestErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the result is base64 encoded (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods (default: text/html)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="xs:string">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodeMessages" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>When true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputMessageParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;methodeType=POST&lt;/code&gt; and &lt;code&gt;paramsInUrl=false&lt;/code&gt;) Name of the request parameter which is used to put the input message in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of method to be executed, either 'GET', 'POST', 'PUT', 'DELETE', 'HEAD' or 'REPORT' (default: GET)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mtomContentTransferEncoding" type="xs:string" />
    <xs:attribute name="multipart" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, request parameters are put in a multipart/form-data entity instead of in the request body (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartResponse" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true the response body is expected to be in mime multipart which is the case when a soap message with attachments is received (see also &lt;a href="https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html"&gt;https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html&lt;/a&gt;). the first part will be returned as result of this sender. other parts are returned as streams in sessionkeys with names multipart1, multipart2, etc. the http connection is held open until the last stream is read. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, a multipart/form-data entity is created instead of a request body. for each part element in the session key a part in the multipart entity is created</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="paramsInUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt;, request parameters are put in the request body instead of in the url (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="postType" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt; the type of post request, must be one of [RAW (text/xml/json), BINARY (file), URLENCODED, FORMDATA, MTOM] (default: RAW)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultAsByteArrayInSessionKey" type="xs:string" />
    <xs:attribute name="storeResultAsStreamInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToFileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to a file (instead of passed as a string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>&gt;(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. (default: url)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="RestListenerType">
    <xs:attribute name="applicationFaultsAsExceptions" type="xs:string" />
    <xs:attribute name="authRoles" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of authorization roles which are granted for this rest service (default: IbisAdmin,IbisDataAdmin,IbisTester,IbisObserver,IbisWebService)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consumes" type="xs:string">
      <xs:annotation>
        <xs:documentation>Mediatype (e.g. XML, JSON, TEXT) the {@link nl.nn.adapterframework.http.RestServiceDispatcher restServiceDispatcher} receives as input (default: XML)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentTypeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of Session variable that determines requested content type, overrides {@link #setProduces(String) produces}</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="etagSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store etag</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generateEtag" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to true the ibis will automatically create an etag (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="method" type="xs:string">
      <xs:annotation>
        <xs:documentation>Method (e.g. GET or POST) to match</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener as known to the adapter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produces" type="xs:string">
      <xs:annotation>
        <xs:documentation>Mediatype (e.g. XML, JSON, TEXT) the {@link nl.nn.adapterframework.http.RestServiceDispatcher restServiceDispatcher} sends as output, if set to json the ibis will automatically try to convert the xml message (default: XML)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restPath" type="xs:string" />
    <xs:attribute name="retrieveMultipart" type="xs:string">
      <xs:annotation>
        <xs:documentation>Indicates whether the parts of a multipart entity should be retrieved and put in session keys. This can only be done once! (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="running" type="xs:string" />
    <xs:attribute name="uriPattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>Uri pattern to match, the {uri} part in https://mydomain.com/ibis4something/rest/{uri}, where mydomain.com and ibis4something refer to 'your ibis'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateEtag" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to true the ibis will automatically validate and process etags (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="view" type="xs:string">
      <xs:annotation>
        <xs:documentation>Indicates whether this listener supports a view (and a link should be put in the ibis console) (default: if &lt;code&gt;method=get&lt;/code&gt; then &lt;code&gt;true&lt;/code&gt;, else &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeSecLogMessage" type="xs:string" />
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="RestSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the result is base64 encoded (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods (default: text/html)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="xs:string">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodeMessages" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>When true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputMessageParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;methodeType=POST&lt;/code&gt; and &lt;code&gt;paramsInUrl=false&lt;/code&gt;) Name of the request parameter which is used to put the input message in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of method to be executed, either 'GET', 'POST', 'PUT', 'DELETE', 'HEAD' or 'REPORT' (default: GET)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mtomContentTransferEncoding" type="xs:string" />
    <xs:attribute name="multipart" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, request parameters are put in a multipart/form-data entity instead of in the request body (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartResponse" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true the response body is expected to be in mime multipart which is the case when a soap message with attachments is received (see also &lt;a href="https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html"&gt;https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html&lt;/a&gt;). the first part will be returned as result of this sender. other parts are returned as streams in sessionkeys with names multipart1, multipart2, etc. the http connection is held open until the last stream is read. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, a multipart/form-data entity is created instead of a request body. for each part element in the session key a part in the multipart entity is created</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="paramsInUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt;, request parameters are put in the request body instead of in the url (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="postType" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt; the type of post request, must be one of [RAW (text/xml/json), BINARY (file), URLENCODED, FORMDATA, MTOM] (default: RAW)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultAsByteArrayInSessionKey" type="xs:string" />
    <xs:attribute name="storeResultAsStreamInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToFileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to a file (instead of passed as a string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>&gt;(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. (default: url)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ResultSet2FileErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="append" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; and the file already exists, the resultset rows are written to the end of the file (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="batchSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set larger than 0 and used as a child of an IteratingPipe, then the database calls are made in batches of this size. Only for queryType=other. (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobBase64Direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether the streamed blobdata will need to be base64 &lt;code&gt;encode&lt;/code&gt; or &lt;code&gt;decode&lt;/code&gt; or not.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data. If blobCharset and blobSessionKey are not set, blobs are base64 encoded after being read to accommodate for the fact that senders need to return a String (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateBlob': column that contains the BLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateBlob': key of session variable that contains the data (String or InputStream) to be loaded to the BLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the BLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateClob': column that contains the CLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateClob': key of session variable that contains the CLOB (String or InputStream) to be loaded to the CLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the CLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Inputstream is not closed after it has been used to read a BLOB or CLOB (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOutputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Outputstream is not closed after BLOB or CLOB has been written to it (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnsReturned" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of columns whose values are to be returned. Works only if the driver implements jdbc 3.0 getGeneratedKeys()</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>the session key that contains the name of the file to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="includeFieldDefinition" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the result contains besides the returned rows also a header with information about the fetched fields (default: application default (true))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lockRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRecordsSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set (and &amp;gt;=0), this session key contains the maximum number of records which are processed. if &lt;code&gt;query&lt;/code&gt; contains a group field (3), then also following records with the same group field value as the last record are processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of rows to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries (default: -1 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value used in result as contents of fields that contain no value (sql-null) (default: &lt;i&gt;empty string&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="packageContent" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text to be excecuted each time sendMessage() is called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryType" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of: &lt;ul&gt;&lt;li&gt;&lt;code&gt;select&lt;/code&gt; for queries that return data&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateBlob&lt;/code&gt; for queries that update a BLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateClob&lt;/code&gt; for queries that update a CLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;package&lt;/code&gt; to execute Oracle PL/SQL package&lt;/li&gt;&lt;li&gt;&lt;code&gt;other&lt;/code&gt; or anything else for queries that return no data.&lt;/li&gt;&lt;/ul&gt; (default: &lt;code&gt;other&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>Query that can be used to obtain result of side-effect of update-query, like generated value of sequence. Example: SELECT mysequence.currval FROM dual</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rowIdSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If specified, the rowid of the processed row is put in the pipelinesession under the specified key (only applicable for &lt;code&gt;querytype=other&lt;/code&gt;). &lt;b&gt;Note:&lt;/b&gt; If multiple rows are processed a SqlException is thrown.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalar" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the value of the first column of the first row (or the startrow) is returned as the only result, as a simple non-xml value (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalarExtended" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;scalar&lt;/code&gt; is also &lt;code&gt;true&lt;/code&gt;, but returns no value, one of the following is returned: &lt;ul&gt;&lt;li&gt;'[absent]' no row is found&lt;/li&gt;&lt;li&gt;'[null]' a row is found, but the value is a SQL-NULL&lt;/li&gt;&lt;li&gt;'[empty]' a row is found, but the value is a empty string&lt;/li&gt;&lt;/ul&gt; (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startRow" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of the first row to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries. Rows before this are skipped from the output. (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of the optional status field which is set after the row is written to the file: timestamp</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset used when reading a stream (that is e.g. going to be written to a BLOB or CLOB). When empty, the stream is copied directly to the BLOB, without conversion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is streamed to the HttpServletResponse object of the RestServiceDispatcher (instead of passed as a String) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of seconds the driver will wait for a statement object to execute. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="trimSpaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, every string in the message which equals &lt;code&gt;?{paramname+UNP_END+&lt;/code&gt; will be replaced by the setter method for the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ResultSet2FileSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="append" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; and the file already exists, the resultset rows are written to the end of the file (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="batchSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set larger than 0 and used as a child of an IteratingPipe, then the database calls are made in batches of this size. Only for queryType=other. (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobBase64Direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether the streamed blobdata will need to be base64 &lt;code&gt;encode&lt;/code&gt; or &lt;code&gt;decode&lt;/code&gt; or not.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data. If blobCharset and blobSessionKey are not set, blobs are base64 encoded after being read to accommodate for the fact that senders need to return a String (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateBlob': column that contains the BLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateBlob': key of session variable that contains the data (String or InputStream) to be loaded to the BLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the BLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateClob': column that contains the CLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateClob': key of session variable that contains the CLOB (String or InputStream) to be loaded to the CLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the CLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Inputstream is not closed after it has been used to read a BLOB or CLOB (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOutputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Outputstream is not closed after BLOB or CLOB has been written to it (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnsReturned" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of columns whose values are to be returned. Works only if the driver implements jdbc 3.0 getGeneratedKeys()</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>the session key that contains the name of the file to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="includeFieldDefinition" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the result contains besides the returned rows also a header with information about the fetched fields (default: application default (true))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lockRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRecordsSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set (and &amp;gt;=0), this session key contains the maximum number of records which are processed. if &lt;code&gt;query&lt;/code&gt; contains a group field (3), then also following records with the same group field value as the last record are processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of rows to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries (default: -1 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value used in result as contents of fields that contain no value (sql-null) (default: &lt;i&gt;empty string&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="packageContent" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text to be excecuted each time sendMessage() is called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryType" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of: &lt;ul&gt;&lt;li&gt;&lt;code&gt;select&lt;/code&gt; for queries that return data&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateBlob&lt;/code&gt; for queries that update a BLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateClob&lt;/code&gt; for queries that update a CLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;package&lt;/code&gt; to execute Oracle PL/SQL package&lt;/li&gt;&lt;li&gt;&lt;code&gt;other&lt;/code&gt; or anything else for queries that return no data.&lt;/li&gt;&lt;/ul&gt; (default: &lt;code&gt;other&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>Query that can be used to obtain result of side-effect of update-query, like generated value of sequence. Example: SELECT mysequence.currval FROM dual</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rowIdSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If specified, the rowid of the processed row is put in the pipelinesession under the specified key (only applicable for &lt;code&gt;querytype=other&lt;/code&gt;). &lt;b&gt;Note:&lt;/b&gt; If multiple rows are processed a SqlException is thrown.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalar" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the value of the first column of the first row (or the startrow) is returned as the only result, as a simple non-xml value (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalarExtended" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;scalar&lt;/code&gt; is also &lt;code&gt;true&lt;/code&gt;, but returns no value, one of the following is returned: &lt;ul&gt;&lt;li&gt;'[absent]' no row is found&lt;/li&gt;&lt;li&gt;'[null]' a row is found, but the value is a SQL-NULL&lt;/li&gt;&lt;li&gt;'[empty]' a row is found, but the value is a empty string&lt;/li&gt;&lt;/ul&gt; (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startRow" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of the first row to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries. Rows before this are skipped from the output. (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of the optional status field which is set after the row is written to the file: timestamp</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset used when reading a stream (that is e.g. going to be written to a BLOB or CLOB). When empty, the stream is copied directly to the BLOB, without conversion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is streamed to the HttpServletResponse object of the RestServiceDispatcher (instead of passed as a String) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of seconds the driver will wait for a statement object to execute. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="trimSpaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, every string in the message which equals &lt;code&gt;?{paramname+UNP_END+&lt;/code&gt; will be replaced by the setter method for the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ResultSetIteratingPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addInputToResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. when set to a value greater than 0, it specifies the number of rows send in a block to the sender. (default: 0 (one line at a time, no prefix of suffix))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned. Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string" />
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreExceptions" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemNoSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>either MESSAGEID or CORRELATIONID. For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxChildThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe) (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxItems" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either 'text' or 'xml'. only valid for xpathexpression (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parallel" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time (in seconds) after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts (default: 10 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text to be excecuted each time sendMessage() is called. When not set, the input message is taken as the query</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeDuplicates" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeXmlDeclarationInResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopConditionXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Expression evaluated on each result if set. Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used. This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is first base64 decoded and then streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trimSpaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, every string in the message which equals &lt;code&gt;?{paramname+UNP_END+&lt;/code&gt; will be replaced by the setter method for the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="RhinoPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="debug" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; or set to something else then "true", (even set to the empty string), the debugging is not active (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file containing the Java-script Functions as base input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsfunctionArguments" type="xs:string">
      <xs:annotation>
        <xs:documentation>The arguments to run the function in the java-script library to run</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsfunctionName" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the function in the java-script library to run</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="lookupAtRuntime" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the lookup of the file will be done at runtime instead of at configuration time (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string" />
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="Samba1ErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="force" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether hidden files are seen or not (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>Shared folder name in the samba server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Samba1PipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="force" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether hidden files are seen or not (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>Shared folder name in the samba server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="Samba1SenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="force" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether hidden files are seen or not (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>Shared folder name in the samba server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Samba2ErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'  (default: SPNEGO)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain, in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Domain Controller, as set in java.security.krb5.kdc. If authentication type specified as SPNEGO and realm is specified then this field must be filled.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Realm, as set in java.security.krb5.realm. If authentication type specified as SPNEGO this field must be filled. If not filled then default realm is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>the destination, aka smb://xxx/yyy share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Samba2ListenerType">
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'  (default: SPNEGO)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolders" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the folders to look for files and to move files to when being processed and after being processed are created if they are specified and do not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delete" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the file processed will deleted after being processed, and not stored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain, in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed, in case the exit-state was not equal to &lt;code&gt;success&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileTimeSensitive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the file modification time is used in addition to the filename to determine if a file has been seen before (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inProcessFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;while&lt;/i&gt; being processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files. If not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Domain Controller, as set in java.security.krb5.kdc. If authentication type specified as SPNEGO and realm is specified then this field must be filled.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where a copy of every files that is received is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Determines the contents of the message that is sent to the pipeline. Can be 'name', for the filename, 'path', for the full file path, 'contents' for the contents of the file. For any other value, the attributes of the file are searched and used (default: path)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minStableTime" type="xs:string">
      <xs:annotation>
        <xs:documentation>Minimal age of file in milliseconds, to avoid receiving a file while it is still being written (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>Number of copies held of a file with the same name. Backup files have a dot and a number suffixed to their name. If set to 0, no backups will be kept. (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the destination file will be deleted if it already exists (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processedFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Realm, as set in java.security.krb5.realm. If authentication type specified as SPNEGO this field must be filled. If not filled then default realm is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>Shared folder name in the samba server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Samba2PipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'  (default: SPNEGO)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain, in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Domain Controller, as set in java.security.krb5.kdc. If authentication type specified as SPNEGO and realm is specified then this field must be filled.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Realm, as set in java.security.krb5.realm. If authentication type specified as SPNEGO this field must be filled. If not filled then default realm is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>the destination, aka smb://xxx/yyy share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="Samba2SenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'  (default: SPNEGO)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain, in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Domain Controller, as set in java.security.krb5.kdc. If authentication type specified as SPNEGO and realm is specified then this field must be filled.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Realm, as set in java.security.krb5.realm. If authentication type specified as SPNEGO this field must be filled. If not filled then default realm is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>the destination, aka smb://xxx/yyy share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SambaErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'  (default: SPNEGO)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain, in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Domain Controller, as set in java.security.krb5.kdc. If authentication type specified as SPNEGO and realm is specified then this field must be filled.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Realm, as set in java.security.krb5.realm. If authentication type specified as SPNEGO this field must be filled. If not filled then default realm is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>the destination, aka smb://xxx/yyy share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SambaListenerType">
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'  (default: SPNEGO)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolders" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the folders to look for files and to move files to when being processed and after being processed are created if they are specified and do not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delete" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the file processed will deleted after being processed, and not stored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain, in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed, in case the exit-state was not equal to &lt;code&gt;success&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileTimeSensitive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the file modification time is used in addition to the filename to determine if a file has been seen before (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inProcessFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;while&lt;/i&gt; being processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files. If not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Domain Controller, as set in java.security.krb5.kdc. If authentication type specified as SPNEGO and realm is specified then this field must be filled.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where a copy of every files that is received is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Determines the contents of the message that is sent to the pipeline. Can be 'name', for the filename, 'path', for the full file path, 'contents' for the contents of the file. For any other value, the attributes of the file are searched and used (default: path)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minStableTime" type="xs:string">
      <xs:annotation>
        <xs:documentation>Minimal age of file in milliseconds, to avoid receiving a file while it is still being written (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>Number of copies held of a file with the same name. Backup files have a dot and a number suffixed to their name. If set to 0, no backups will be kept. (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the destination file will be deleted if it already exists (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processedFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Realm, as set in java.security.krb5.realm. If authentication type specified as SPNEGO this field must be filled. If not filled then default realm is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>Shared folder name in the samba server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SambaPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'  (default: SPNEGO)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain, in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Domain Controller, as set in java.security.krb5.kdc. If authentication type specified as SPNEGO and realm is specified then this field must be filled.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Realm, as set in java.security.krb5.realm. If authentication type specified as SPNEGO this field must be filled. If not filled then default realm is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>the destination, aka smb://xxx/yyy share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="SambaSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values: list, info, read, readDelete, move, copy, delete, mkdir, rmdir, write, append, rename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'  (default: SPNEGO)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be set to 'encode' or 'decode' for actions read, write and append. When set the stream is base64 encoded or decoded, respectively</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move to is created if it does not exist (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain, in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Domain Controller, as set in java.security.krb5.kdc. If authentication type specified as SPNEGO and realm is specified then this field must be filled.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=write, and for action=append with rotateSize&gt;0: the number of backup files that is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Realm, as set in java.security.krb5.realm. If authentication type specified as SPNEGO this field must be filled. If not filled then default realm is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>the destination, aka smb://xxx/yyy share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SambaSenderOldSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>possible values: delete, download, list, mkdir, rename, rmdir, upload</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="force" type="xs:string">
      <xs:annotation>
        <xs:documentation>used when creating folders or overwriting existing files (when renaming or moving) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>the destination, aka smb://xxx/yyy share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ScanTibcoSolutionPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="level" type="xs:string" />
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string" />
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="SchedulerErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="cronExpressionPattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>expression that generates the cron trigger</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="javaListener" type="xs:string">
      <xs:annotation>
        <xs:documentation>java listener to be called when scheduler trigger fires</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jobGroup" type="xs:string">
      <xs:annotation>
        <xs:documentation>job group in which the new trigger is to be created (optional)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jobNamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>pattern that leads to the name of the registered trigger(optional)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SchedulerSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="cronExpressionPattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>expression that generates the cron trigger</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="javaListener" type="xs:string">
      <xs:annotation>
        <xs:documentation>java listener to be called when scheduler trigger fires</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jobGroup" type="xs:string">
      <xs:annotation>
        <xs:documentation>job group in which the new trigger is to be created (optional)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jobNamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>pattern that leads to the name of the registered trigger(optional)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SendGridErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authAlias used to obtain credentials for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bounceAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>NDR return address when mail cannot be delivered. This adds a Return-Path header (default: MAIL FROM attribute)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultAttachmentName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when this name is used, it will be followed by a number which is equal to the node's position (default: attachment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultFrom" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the from: header if not specified in message itself</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMessageBase64" type="xs:string">
      <xs:annotation>
        <xs:documentation>when messageBase64 is not specified defaultMessageBase64 will be used (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>when messageType is not specified defaultMessageType will be used (default: text/plain)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultSubject" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the subject: header if not specified in message itself</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of userid</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for proxy authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>hostname of the proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used to obtain credentials for proxy authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>port of the proxy (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>realm used for proxy authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used to obtain credentials for proxy authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of userid on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpUserid" type="xs:string">
      <xs:annotation>
        <xs:documentation>userId on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userId" type="xs:string">
      <xs:annotation>
        <xs:documentation>userId on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SendGridSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authAlias used to obtain credentials for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bounceAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>NDR return address when mail cannot be delivered. This adds a Return-Path header (default: MAIL FROM attribute)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultAttachmentName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when this name is used, it will be followed by a number which is equal to the node's position (default: attachment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultFrom" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the from: header if not specified in message itself</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMessageBase64" type="xs:string">
      <xs:annotation>
        <xs:documentation>when messageBase64 is not specified defaultMessageBase64 will be used (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>when messageType is not specified defaultMessageType will be used (default: text/plain)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultSubject" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the subject: header if not specified in message itself</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of userid</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for proxy authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>hostname of the proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used to obtain credentials for proxy authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>port of the proxy (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>realm used for proxy authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used to obtain credentials for proxy authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of userid on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpUserid" type="xs:string">
      <xs:annotation>
        <xs:documentation>userId on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userId" type="xs:string">
      <xs:annotation>
        <xs:documentation>userId on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SenderPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiListener" type="ApiListenerType" minOccurs="0" />
        <xs:element name="BisJmsListener" type="BisJmsListenerType" minOccurs="0" />
        <xs:element name="CmisEventListener" type="CmisEventListenerType" minOccurs="0" />
        <xs:element name="DirectoryListener" type="DirectoryListenerType" minOccurs="0" />
        <xs:element name="EsbJmsListener" type="EsbJmsListenerType" minOccurs="0" />
        <xs:element name="ExchangeMailListener" type="ExchangeMailListenerType" minOccurs="0" />
        <xs:element name="FileRecordListener" type="FileRecordListenerType" minOccurs="0" />
        <xs:element name="FtpListener" type="FtpListenerType" minOccurs="0" />
        <xs:element name="FxfListener" type="FxfListenerType" minOccurs="0" />
        <xs:element name="HttpListener" type="HttpListenerType" minOccurs="0" />
        <xs:element name="IfsaProviderListener" type="IfsaProviderListenerType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsListener" type="IfsaSimulatorJmsListenerType" minOccurs="0" />
        <xs:element name="JavaListener" type="JavaListenerType" minOccurs="0" />
        <xs:element name="JdbcListener" type="JdbcListenerType" minOccurs="0" />
        <xs:element name="JdbcQueryListener" type="JdbcQueryListenerType" minOccurs="0" />
        <xs:element name="JdbcTableListener" type="JdbcTableListenerType" minOccurs="0" />
        <xs:element name="JmsListener" type="JmsListenerType" minOccurs="0" />
        <xs:element name="MessageStoreListener" type="MessageStoreListenerType" minOccurs="0" />
        <xs:element name="MqttListener" type="MqttListenerType" minOccurs="0" />
        <xs:element name="PullingJmsListener" type="PullingJmsListenerType" minOccurs="0" />
        <xs:element name="PushingJmsListener" type="PushingJmsListenerType" minOccurs="0" />
        <xs:element name="PushingListenerAdapterListener" type="PushingListenerAdapterListenerType" minOccurs="0" />
        <xs:element name="RestListener" type="RestListenerType" minOccurs="0" />
        <xs:element name="Samba2Listener" type="Samba2ListenerType" minOccurs="0" />
        <xs:element name="SambaListener" type="SambaListenerType" minOccurs="0" />
        <xs:element name="SimpleJdbcListener" type="SimpleJdbcListenerType" minOccurs="0" />
        <xs:element name="TibcoListener" type="TibcoListenerType" minOccurs="0" />
        <xs:element name="TibcoLogJmsListener" type="TibcoLogJmsListenerType" minOccurs="0" />
        <xs:element name="WebServiceListener" type="WebServiceListenerType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>either MESSAGEID or CORRELATIONID. For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time (in seconds) after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts (default: 10 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is first base64 decoded and then streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="SenderSeriesSenderType">
    <xs:sequence>
      <xs:element name="Cache" type="CacheType" minOccurs="0" maxOccurs="unbounded" />
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is restored before processing the next one (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="SenderWrapperSenderType">
    <xs:sequence>
      <xs:element name="Cache" type="CacheType" minOccurs="0" maxOccurs="unbounded" />
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is restored before processing the next one (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ShadowErrorSenderType">
    <xs:sequence>
      <xs:element name="Cache" type="CacheType" minOccurs="0" maxOccurs="unbounded" />
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConcurrentThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets and upper limit to the amount of concurrent threads that can be run simultaneously. use 0 to disable. (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="originalSender" type="xs:string">
      <xs:annotation>
        <xs:documentation>the default or original sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is restored before processing the next one (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultSender" type="xs:string">
      <xs:annotation>
        <xs:documentation>the sender which will process all results</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ShadowSenderType">
    <xs:sequence>
      <xs:element name="Cache" type="CacheType" minOccurs="0" maxOccurs="unbounded" />
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConcurrentThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets and upper limit to the amount of concurrent threads that can be run simultaneously. use 0 to disable. (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="originalSender" type="xs:string">
      <xs:annotation>
        <xs:documentation>the default or original sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is restored before processing the next one (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultSender" type="xs:string">
      <xs:annotation>
        <xs:documentation>the sender which will process all results</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="SimpleJdbcListenerType">
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>count query that returns the number of available records. when there are available records the pipeline is activated</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trace" type="xs:string" />
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SizePipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="SkipPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="length" type="xs:string">
      <xs:annotation>
        <xs:documentation>if length&gt;=0 only these number of bytes (for byte array input) or characters (for string input) is returned. (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skip" type="xs:string">
      <xs:annotation>
        <xs:documentation>number of bytes (for byte array input) or characters (for string input) to skip. an empty byte array or string is returned when skip is larger then the length of the input (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="SoapInputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SoapInputWrapperType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SoapOutputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SoapOutputWrapperType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SoapValidatorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="SoapWrapperPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;unwrap&lt;/code&gt; (default: wrap)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header (default: soapHeader, when direction is 'unwrap')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope (default: auto determined from soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace (default: soapVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>Soap version to use: one of &lt;code&gt;soap1.1&lt;/code&gt;, &lt;code&gt;soap1.2&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. &lt;code&gt;none&lt;/code&gt; means that no wrapping or unwrapping will be done, &lt;code&gt;auto&lt;/code&gt; means auto-detect (default: auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Stream2StringPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="StreamLineIteratorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addInputToResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;combineBlocks = true&lt;/code&gt;, this string is inserted at the start of each block. Requires &lt;code&gt;blockSize&lt;/code&gt; or &lt;code&gt;startPosition&lt;/code&gt; and &lt;code&gt;endPosition&lt;/code&gt; to be set too. (default: &amp;lt;block&amp;gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. If set to a value greater than 0, it specifies the number of rows send in a block to the sender. (default: 0 (one line at a time, no prefix of suffix))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;combineBlocks = true&lt;/code&gt;, this string is inserted at the end of the set of lines. Requires &lt;code&gt;blockSize&lt;/code&gt; or &lt;code&gt;startPosition&lt;/code&gt; and &lt;code&gt;endPosition&lt;/code&gt; to be set too. (default: &amp;lt;/block&amp;gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned. Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="combineBlocks" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, all items in a block are sent at once. If set false, items are sent individually, potentially leveraging block enabled sending capabilities of the sender (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endOfLineString" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, each line has to end with this string. if the line doesn't end with this string next lines are added (including line separators) until the total line ends with the given string</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endPosition" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;endPosition &amp;gt;= startPosition&lt;/code&gt;, this field contains the end position of the key in the current record (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="escapeXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>Escape XML characters in each item (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreExceptions" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemNoSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linePrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>This string is inserted at the start of each item</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>This string is appended at the end of each item</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>either MESSAGEID or CORRELATIONID. For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxChildThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe) (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxItems" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either 'text' or 'xml'. only valid for xpathexpression (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parallel" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time (in seconds) after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts (default: 10 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeDuplicates" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeXmlDeclarationInResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startPosition" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;startPosition &amp;gt;= 0&lt;/code&gt;, this field contains the start position of the key in the current record (first character is 0); A sequence of lines with the same key is put in one block and send to the sender. Cannot be used in combination with blockSize. (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopConditionXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Expression evaluated on each result if set. Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used. This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is first base64 decoded and then streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="StreamPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusFailureAsSoapFault" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) when true and the antivirusfailed forward is specified and the antivirus scan did not pass, a soap fault is returned instead of only a plain error message (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusFailureReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) if not empty and the antivirusfailed forward is specified and the antivirus scan did not pass, the error message (or soap fault) is stored in this session key and the first string part is returned to the pipeline</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusMessagePartName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) name of antivirus scan message parts (default: &lt;code&gt;antivirus_msg&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusPartName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) name of antivirus scan status parts (default: &lt;code&gt;antivirus_rc&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusPassedMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) message of antivirus scan parts which indicates the antivirus scan passed (default: &lt;code&gt;pass&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkAntiVirus" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt;) when true parts are checked for antivirus scan returncode. these antivirus scan parts have been added by another application (so the antivirus scan is not performed in this pipe). for each file part an antivirus scan part have been added by this other application (directly after this file part) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="extractFirstStringPart" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt;) when true the first part is not put in a session key but returned to the pipeline (as the result of this pipe) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;extractfirststringpart=true&lt;/code&gt;) the session key to put the xml in with info about the stored parts (default: &lt;code&gt;multipartxml&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="StreamTransformerPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>characterset used for reading file or inputstream (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeOriginalBlock" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; the original block is stored under the session key originalblock (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="StringIteratorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addInputToResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;combineBlocks = true&lt;/code&gt;, this string is inserted at the start of each block. Requires &lt;code&gt;blockSize&lt;/code&gt; or &lt;code&gt;startPosition&lt;/code&gt; and &lt;code&gt;endPosition&lt;/code&gt; to be set too. (default: &amp;lt;block&amp;gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. If set to a value greater than 0, it specifies the number of rows send in a block to the sender. (default: 0 (one line at a time, no prefix of suffix))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;combineBlocks = true&lt;/code&gt;, this string is inserted at the end of the set of lines. Requires &lt;code&gt;blockSize&lt;/code&gt; or &lt;code&gt;startPosition&lt;/code&gt; and &lt;code&gt;endPosition&lt;/code&gt; to be set too. (default: &amp;lt;/block&amp;gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned. Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="combineBlocks" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, all items in a block are sent at once. If set false, items are sent individually, potentially leveraging block enabled sending capabilities of the sender (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endPosition" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;endPosition &amp;gt;= startPosition&lt;/code&gt;, this field contains the end position of the key in the current record (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="escapeXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>Escape XML characters in each item (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreExceptions" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemNoSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linePrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>This string is inserted at the start of each item</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>This string is appended at the end of each item</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>either MESSAGEID or CORRELATIONID. For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxChildThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe) (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxItems" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either 'text' or 'xml'. only valid for xpathexpression (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parallel" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time (in seconds) after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts (default: 10 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeDuplicates" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeXmlDeclarationInResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startPosition" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;startPosition &amp;gt;= 0&lt;/code&gt;, this field contains the start position of the key in the current record (first character is 0); A sequence of lines with the same key is put in one block and send to the sender. Cannot be used in combination with blockSize. (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopConditionXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Expression evaluated on each result if set. Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used. This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is first base64 decoded and then streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Text2XmlPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="includeXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether a declation is included above the xml text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="replaceNonXmlChars" type="xs:string">
      <xs:annotation>
        <xs:documentation>replace all non xml chars (not in the &lt;a href="http://www.w3.org/tr/2006/rec-xml-20060816/#nt-char"&gt;character range as specified by the xml specification&lt;/a&gt;) with the inverted question mark (0x00bf) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="splitLines" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether the lines of the input are places in separated &amp;lt;line&amp;gt; tags (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useCdataSection" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether the text to encapsulate should be put in a cdata section (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>the xml tag to encapsulate the text in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="TibcoErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serverUrl" type="xs:string" />
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="TibcoListenerType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheMode" type="xs:string" />
    <xs:attribute name="commitOnState" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;i&gt;deprecated&lt;/i&gt; exit state to control commit or rollback of jmssession. only used if &lt;code&gt;jmstransacted&lt;/code&gt; is set true. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceMessageIdAsCorrelationId" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="listenerPort" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pollGuardInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>interval in milliseconds for the poll guard to check whether a successful poll was done by the receive (https://docs.oracle.com/javaee/7/api/javax/jms/messageconsumer.html#receive-long-) since last check. when polling has stopped this will be logged and the listener will be stopped and started in an attempt to workaround problems with polling. polling might stop due to bugs in the jms driver/implementation which should be fixed by the supplier. as the poll time includes reading and processing of the message no successful poll might be registered since the last check when message processing takes a long time, hence while messages are being processed the check on last successful poll will be skipped. set to -1 to disable (default: ten times the specified timeout)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyDeliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that reply messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyEncodingStyleURI" type="xs:string" />
    <xs:attribute name="replyMessageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>time that replymessage will live (default: 0 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field of the reply message (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNamespaceURI" type="xs:string" />
    <xs:attribute name="replyPriority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the reply message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapAction" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serverUrl" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>receive timeout in milliseconds as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long- (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useReplyTo" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xPathLoggingKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of all xpath keys that need to be logged. (overrides &lt;code&gt;msg.log.keys&lt;/code&gt; property)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="TibcoLogJmsListenerType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheMode" type="xs:string" />
    <xs:attribute name="commitOnState" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;i&gt;deprecated&lt;/i&gt; exit state to control commit or rollback of jmssession. only used if &lt;code&gt;jmstransacted&lt;/code&gt; is set true. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceMessageIdAsCorrelationId" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="listenerPort" type="xs:string" />
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pollGuardInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>interval in milliseconds for the poll guard to check whether a successful poll was done by the receive (https://docs.oracle.com/javaee/7/api/javax/jms/messageconsumer.html#receive-long-) since last check. when polling has stopped this will be logged and the listener will be stopped and started in an attempt to workaround problems with polling. polling might stop due to bugs in the jms driver/implementation which should be fixed by the supplier. as the poll time includes reading and processing of the message no successful poll might be registered since the last check when message processing takes a long time, hence while messages are being processed the check on last successful poll will be skipped. set to -1 to disable (default: ten times the specified timeout)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyDeliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that reply messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyEncodingStyleURI" type="xs:string" />
    <xs:attribute name="replyMessageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>time that replymessage will live (default: 0 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field of the reply message (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNamespaceURI" type="xs:string" />
    <xs:attribute name="replyPriority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the reply message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapAction" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string" />
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="timeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>receive timeout in milliseconds as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long- (default: 1000 [ms])</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useReplyTo" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xPathLoggingKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of all xpath keys that need to be logged. (overrides &lt;code&gt;msg.log.keys&lt;/code&gt; property)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="TibcoSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="ackMode" type="xs:string" />
    <xs:attribute name="acknowledgeMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: auto_acknowledge)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to jms server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set (&gt;=0) and the length of the correlationid exceeds this maximum length, the correlationid is trimmed from the left side of a string to this maximum length (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="xs:string">
      <xs:annotation>
        <xs:documentation>transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). useful when sending messages to mq which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: mqjms1044: string is not a valid hexadecimal number (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to check before executing correlationidtohex. when empty (and correlationidtohex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationid to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationid). (default: id:)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls mode that messages are sent with: either 'persistent' or 'non_persistent' (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the jms destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;queue&lt;/code&gt; or &lt;code&gt;topic&lt;/code&gt; (default: &lt;code&gt;queue&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsTransacted" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when synchronous='true' and and replytoname is set) eithter 'correlationid', 'correlationid_from_message' or 'messageid'. indicates wether the server uses the correlationid from the pipeline, the correlationid from the message or the messageid in the correlationid field of the reply. this requires the sender to have set the correlationid at the time of sending. (default: messageid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the destinationname is used directly instead of performing a jndi lookup (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value of this attribute is used as a selector to filter messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="xs:string">
      <xs:annotation>
        <xs:documentation>the time (in milliseconds) it takes for the message to expire. if the message is not consumed before, it will be lost. make sure to set it to a positive value for request/repy type of messages. (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the jmstype field (default: not set by application)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistent" type="xs:string">
      <xs:annotation>
        <xs:documentation>rather useless attribute, and not the same as &lt;code&gt;deliverymode&lt;/code&gt;. you probably want to use that.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the priority that is used to deliver the message. ranges from 0 to 9. defaults to -1, meaning not set. effectively the default priority is set by jms to 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the queueconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;queue&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store soap header of reply (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum time in ms to wait for a reply. 0 means no timeout. (only for synchronous=true) (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the queue the reply is expected on. this value is send in the jmsreplyto-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>a list with jms headers to add to the ipipelinesession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serverUrl" type="xs:string" />
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>soapaction string sent as messageproperty</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of parameter containing soap header (default: soapheader)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subscriberType" type="xs:string" />
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender operates in rr mode: the a reply is expected, either on the queue specified in 'replytoname', or on a dynamically generated temporary queue (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>jndi-name of the topicconnectionfactory, used when &lt;code&gt;destinationtype&lt;code&gt;=&lt;/code&gt;topic&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="UUIDGeneratorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;alphanumeric&lt;/code&gt; or &lt;code&gt;numeric&lt;/code&gt; (default: alphanumeric)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="UnzipPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkDirectory" type="xs:string" />
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectFileContents" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set &lt;code&gt;true&lt;/code&gt;, the content of the files in the zip is returned in the result xml message of this pipe. please note this can consume a lot of memory for large files or a large number of files (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectFileContentsBase64Encoded" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of file extensions. files with an extension which is part of this list will be base64 encoded. all other files are assumed to have utf-8 when reading it from the zip and are added as escaped xml with non-unicode-characters being replaced by inverted question mark appended with #, the character number and ; (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set &lt;code&gt;false&lt;/code&gt;, only a small summary (count of items in zip) is returned (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createSubdirectories" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set &lt;code&gt;true&lt;/code&gt;, subdirectories in the zip file are created in the directory to extract the archive to (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, file is automatically deleted upon normal jvm termination (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="directory" type="xs:string">
      <xs:annotation>
        <xs:documentation>directory to extract the archive to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="directorySessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>sessionkey with a directory value to extract the archive to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keepOriginalFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set &lt;code&gt;false&lt;/code&gt;, a suffix is added to the original filename to be sure it is unique (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="UploadFilePipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="directory" type="xs:string">
      <xs:annotation>
        <xs:documentation>base directory where files are unzipped to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="directorySessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>the session key that contains the base directory where files are unzipped to (default: destination)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the key in the &lt;code&gt;pipelinesession&lt;/code&gt; which contains the inputstream (default: file)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="WebServiceErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the result is base64 encoded (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods (default: text/html)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="xs:string">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodeMessages" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>the encodingstyle to be set in the messageheader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>When true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputMessageParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;methodeType=POST&lt;/code&gt; and &lt;code&gt;paramsInUrl=false&lt;/code&gt;) Name of the request parameter which is used to put the input message in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of method to be executed, either 'GET', 'POST', 'PUT', 'DELETE', 'HEAD' or 'REPORT' (default: GET)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mtomContentTransferEncoding" type="xs:string" />
    <xs:attribute name="multipart" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, request parameters are put in a multipart/form-data entity instead of in the request body (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartResponse" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true the response body is expected to be in mime multipart which is the case when a soap message with attachments is received (see also &lt;a href="https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html"&gt;https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html&lt;/a&gt;). the first part will be returned as result of this sender. other parts are returned as streams in sessionkeys with names multipart1, multipart2, etc. the http connection is held open until the last stream is read. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, a multipart/form-data entity is created instead of a request body. for each part element in the session key a part in the multipart entity is created</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions to be added in the soap envelope tag. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="paramsInUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt;, request parameters are put in the request body instead of in the url (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="postType" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt; the type of post request, must be one of [RAW (text/xml/json), BINARY (file), URLENCODED, FORMDATA, MTOM] (default: RAW)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>the namespace of the message sent. identifies the service to be called. may be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter to obtain the servicenamespace</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope and the soap envelope is removed from received messages (soap envelope will not be visible to the pipeline) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>the soapactionuri to be set in the requestheader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapActionParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter to obtain the soapactionuri</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultAsByteArrayInSessionKey" type="xs:string" />
    <xs:attribute name="storeResultAsStreamInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToFileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to a file (instead of passed as a string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>&gt;(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwApplicationFaults" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether soap faults generated by the application generate an exception, or are treated as 'normal' messages (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. (default: url)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to web services security</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the password is sent digested. otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="WebServiceListenerType">
    <xs:attribute name="address" type="xs:string">
      <xs:annotation>
        <xs:documentation>The address to listen to, e.g the part &lt;address&gt; in https://mydomain.com/ibis4something/services/&lt;/address&gt;, where mydomain.com and ibis4something refer to 'your ibis'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="applicationFaultsAsExceptions" type="xs:string" />
    <xs:attribute name="applicationFaultsAsSoapFaults" type="xs:string" />
    <xs:attribute name="attachmentSessionKeys" type="xs:string" />
    <xs:attribute name="mtomEnabled" type="xs:string" />
    <xs:attribute name="multipartXmlSessionKey" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the listener as known to the adapter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="running" type="xs:string" />
    <xs:attribute name="serviceNamespaceURI" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace of the service that is provided by the adapter of this listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt; the soap envelope is removed from received messages and a soap envelope is added to returned messages (soap envelope will not be visible to the pipeline) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="WebServiceNtlmErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string" />
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type of the request (default: text/html; charset=utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>the soapactionuri to be set in the requestheader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>url or base of url to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="WebServiceNtlmSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string" />
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type of the request (default: text/html; charset=utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>the soapactionuri to be set in the requestheader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>url or base of url to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="WebServiceSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="allowSelfSignedCertificates" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, self signed certificates are accepted (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="base64" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the result is base64 encoded (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificate" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to certificate to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain certificate password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="certificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>certificate password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods (default: text/html)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="xs:string">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodeMessages" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>the encodingstyle to be set in the messageheader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the certificateexpiredexception is ignored (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreRedirects" type="xs:string">
      <xs:annotation>
        <xs:documentation>When true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputMessageParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;methodeType=POST&lt;/code&gt; and &lt;code&gt;paramsInUrl=false&lt;/code&gt;) Name of the request parameter which is used to put the input message in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: pkcs12)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections (default: 10)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of method to be executed, either 'GET', 'POST', 'PUT', 'DELETE', 'HEAD' or 'REPORT' (default: GET)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mtomContentTransferEncoding" type="xs:string" />
    <xs:attribute name="multipart" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, request parameters are put in a multipart/form-data entity instead of in the request body (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartResponse" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true the response body is expected to be in mime multipart which is the case when a soap message with attachments is received (see also &lt;a href="https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html"&gt;https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html&lt;/a&gt;). the first part will be returned as result of this sender. other parts are returned as streams in sessionkeys with names multipart1, multipart2, etc. the http connection is held open until the last stream is read. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set and &lt;code&gt;methodetype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, a multipart/form-data entity is created instead of a request body. for each part element in the session key a part in the multipart entity is created</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions to be added in the soap envelope tag. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="paramsInUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt;, request parameters are put in the request body instead of in the url (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="postType" type="xs:string">
      <xs:annotation>
        <xs:documentation>When false and &lt;code&gt;methodeType=POST&lt;/code&gt; the type of post request, must be one of [RAW (text/xml/json), BINARY (file), URLENCODED, FORMDATA, MTOM] (default: RAW)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. If empty the protocol 'SSL' is used (default: SSL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy port (default: 80)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>the namespace of the message sent. identifies the service to be called. may be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter to obtain the servicenamespace</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope and the soap envelope is removed from received messages (soap envelope will not be visible to the pipeline) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>the soapactionuri to be set in the requestheader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapActionParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter to obtain the soapactionuri</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. (default: 5000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultAsByteArrayInSessionKey" type="xs:string" />
    <xs:attribute name="storeResultAsStreamInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToFileNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to a file (instead of passed as a string)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>&gt;(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwApplicationFaults" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether soap faults generated by the application generate an exception, or are treated as 'normal' messages (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout (default: 10000)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to truststore to be used for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>truststore password (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of truststore (default: jks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. (default: url)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the hostname in the certificate will be checked against the actual hostname (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to web services security</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the password is sent digested. otherwise it is sent in clear text (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="WsdlGeneratorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="from" type="xs:string">
      <xs:annotation>
        <xs:documentation>either parent (adapter of pipeline which contains this pipe) or input (name of adapter specified by input of pipe) (default: parent)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="WsdlXmlInputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocationToAdd" type="xs:string">
      <xs:annotation>
        <xs:documentation>pairs of uri references which will be added to the wsdl (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>creates &lt;code&gt;schemalocation&lt;/code&gt; attribute based on the wsdl and replaces the namespace of the soap body element (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wsdl" type="xs:string">
      <xs:annotation>
        <xs:documentation>the wsdl to read the xsd's from (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="WsdlXmlOutputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocationToAdd" type="xs:string">
      <xs:annotation>
        <xs:documentation>pairs of uri references which will be added to the wsdl (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>creates &lt;code&gt;schemalocation&lt;/code&gt; attribute based on the wsdl and replaces the namespace of the soap body element (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wsdl" type="xs:string">
      <xs:annotation>
        <xs:documentation>the wsdl to read the xsd's from (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="WsdlXmlValidatorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="acceptNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>allow plain xml, without a SOAP Envelope, too (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoForamat=true. (default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default format of the result. Either 'xml' or 'json' (default: xml)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. (default: outputformat)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>identical to the &lt;code&gt;soapbody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. for more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>always envelope (not allowed to change) (default: envelope)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocationToAdd" type="xs:string">
      <xs:annotation>
        <xs:documentation>pairs of uri references which will be added to the wsdl (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>creates &lt;code&gt;schemalocation&lt;/code&gt; attribute based on the wsdl and replaces the namespace of the soap body element (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>can be used when the soap header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2) (default: 1.1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="wsdl" type="xs:string">
      <xs:annotation>
        <xs:documentation>the wsdl to read the xsd's from (default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XComErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="carriageflag" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of yes, no, vrl, vrl2, mpack or xpack</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="codeflag" type="xs:string">
      <xs:annotation>
        <xs:documentation>characterset conversion, one of ascii or ebcdic</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compress" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of yes, no, rle, compact, lzlarge, lzmedium or lzsmall</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="configFile" type="xs:string" />
    <xs:attribute name="fileOption" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of create, append or replace</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logfile" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of logfile for xcomtcp to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of user on remote system</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>port of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queue" type="xs:string">
      <xs:annotation>
        <xs:documentation>set queue off or on</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>remote directory is prefixed witht the remote file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteFilePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>remote file to create. if empty, the name is equal to the local file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteSystem" type="xs:string">
      <xs:annotation>
        <xs:documentation>hostname or tcpip adres of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tracelevel" type="xs:string">
      <xs:annotation>
        <xs:documentation>set between 0 (no trace) and 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truncation" type="xs:string">
      <xs:annotation>
        <xs:documentation>set truncation off or on</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userid" type="xs:string">
      <xs:annotation>
        <xs:documentation>loginname of user on remote system</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="workingDirName" type="xs:string">
      <xs:annotation>
        <xs:documentation>directory in which to run the xcomtcp command</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xcomtcp" type="xs:string">
      <xs:annotation>
        <xs:documentation>path to xcomtcp command</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XComSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="carriageflag" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of yes, no, vrl, vrl2, mpack or xpack</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="codeflag" type="xs:string">
      <xs:annotation>
        <xs:documentation>characterset conversion, one of ascii or ebcdic</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compress" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of yes, no, rle, compact, lzlarge, lzmedium or lzsmall</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="configFile" type="xs:string" />
    <xs:attribute name="fileOption" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of create, append or replace</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logfile" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of logfile for xcomtcp to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of user on remote system</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>port of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queue" type="xs:string">
      <xs:annotation>
        <xs:documentation>set queue off or on</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>remote directory is prefixed witht the remote file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteFilePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>remote file to create. if empty, the name is equal to the local file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteSystem" type="xs:string">
      <xs:annotation>
        <xs:documentation>hostname or tcpip adres of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tracelevel" type="xs:string">
      <xs:annotation>
        <xs:documentation>set between 0 (no trace) and 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truncation" type="xs:string">
      <xs:annotation>
        <xs:documentation>set truncation off or on</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userid" type="xs:string">
      <xs:annotation>
        <xs:documentation>loginname of user on remote system</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="workingDirName" type="xs:string">
      <xs:annotation>
        <xs:documentation>directory in which to run the xcomtcp command</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xcomtcp" type="xs:string">
      <xs:annotation>
        <xs:documentation>path to xcomtcp command</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XQueryPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xqueryFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file on the file system to read the xquery from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xqueryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file (resource) on the classpath to read the xquery from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XfbErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="appli" type="xs:string" />
    <xs:attribute name="copy" type="xs:string" />
    <xs:attribute name="copyPrefix" type="xs:string" />
    <xs:attribute name="flow" type="xs:string" />
    <xs:attribute name="ft" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noname" type="xs:string" />
    <xs:attribute name="script" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="XfbSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="appli" type="xs:string" />
    <xs:attribute name="copy" type="xs:string" />
    <xs:attribute name="copyPrefix" type="xs:string" />
    <xs:attribute name="flow" type="xs:string" />
    <xs:attribute name="ft" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noname" type="xs:string" />
    <xs:attribute name="script" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="XmlBuilderPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="substringEnd" type="xs:string">
      <xs:annotation>
        <xs:documentation>substring to end translation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="substringStart" type="xs:string">
      <xs:annotation>
        <xs:documentation>substring to start translation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="XmlFileElementIteratorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addInputToResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. when set to a value greater than 0, it specifies the number of rows send in a block to the sender. (default: 0 (one line at a time, no prefix of suffix))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned. Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the element to iterate over, preceded with all ancestor elements and separated by semicolons (e.g. adapter;pipeline;pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the element to iterate over (alternatively: &lt;code&gt;elementchain&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreExceptions" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemNoSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>either MESSAGEID or CORRELATIONID. For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxChildThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe) (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxItems" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either 'text' or 'xml'. only valid for xpathexpression (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parallel" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time (in seconds) after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts (default: 10 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeDuplicates" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeXmlDeclarationInResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopConditionXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Expression evaluated on each result if set. Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used. This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is first base64 decoded and then streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XmlIfPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elseForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when 'false' (default: else)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expressionValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>a string to compare the result of the xpathexpression (or the input-message itself) to. if not specified, a non-empty result leads to the 'then'-forward, an empty result to 'else'-forward</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="regex" type="xs:string">
      <xs:annotation>
        <xs:documentation>regular expression to be applied to the input-message (ignored if xpathexpression is specified). the input-message matching the given regular expression leads to the 'then'-forward</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the key in the &lt;code&gt;pipelinesession&lt;/code&gt; to retrieve the input-message from. if not set, the current input message of the pipe is taken. n.b. same as &lt;code&gt;getinputfromsessionkey&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="thenForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when &lt;code&gt;'true'&lt;/code&gt; (default: then)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to be applied to the input-message. if not set, no transformation is done</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies the version of xslt to use (default: 2)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XmlInputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XmlJmsBrowserErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XmlJmsBrowserSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XmlOutputValidatorType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XmlQueryErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobBase64Direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether the streamed blobdata will need to be base64 &lt;code&gt;encode&lt;/code&gt; or &lt;code&gt;decode&lt;/code&gt; or not.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data. If blobCharset and blobSessionKey are not set, blobs are base64 encoded after being read to accommodate for the fact that senders need to return a String (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateBlob': column that contains the BLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateBlob': key of session variable that contains the data (String or InputStream) to be loaded to the BLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the BLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateClob': column that contains the CLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateClob': key of session variable that contains the CLOB (String or InputStream) to be loaded to the CLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the CLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Inputstream is not closed after it has been used to read a BLOB or CLOB (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOutputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Outputstream is not closed after BLOB or CLOB has been written to it (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnsReturned" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of columns whose values are to be returned. Works only if the driver implements jdbc 3.0 getGeneratedKeys()</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="includeFieldDefinition" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the result contains besides the returned rows also a header with information about the fetched fields (default: application default (true))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lockRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (by appending ' for update nowait skip locked' to the end of the query) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' for update wait #' is used instead of ' for update nowait skip locked' (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of rows to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries (default: -1 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value used in result as contents of fields that contain no value (sql-null) (default: &lt;i&gt;empty string&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="packageContent" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryType" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of: &lt;ul&gt;&lt;li&gt;&lt;code&gt;select&lt;/code&gt; for queries that return data&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateBlob&lt;/code&gt; for queries that update a BLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateClob&lt;/code&gt; for queries that update a CLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;package&lt;/code&gt; to execute Oracle PL/SQL package&lt;/li&gt;&lt;li&gt;&lt;code&gt;other&lt;/code&gt; or anything else for queries that return no data.&lt;/li&gt;&lt;/ul&gt; (default: &lt;code&gt;other&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>Query that can be used to obtain result of side-effect of update-query, like generated value of sequence. Example: SELECT mysequence.currval FROM dual</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rowIdSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If specified, the rowid of the processed row is put in the pipelinesession under the specified key (only applicable for &lt;code&gt;querytype=other&lt;/code&gt;). &lt;b&gt;Note:&lt;/b&gt; If multiple rows are processed a SqlException is thrown.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalar" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the value of the first column of the first row (or the startrow) is returned as the only result, as a simple non-xml value (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalarExtended" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;scalar&lt;/code&gt; is also &lt;code&gt;true&lt;/code&gt;, but returns no value, one of the following is returned: &lt;ul&gt;&lt;li&gt;'[absent]' no row is found&lt;/li&gt;&lt;li&gt;'[null]' a row is found, but the value is a SQL-NULL&lt;/li&gt;&lt;li&gt;'[empty]' a row is found, but the value is a empty string&lt;/li&gt;&lt;/ul&gt; (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startRow" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of the first row to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries. Rows before this are skipped from the output. (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset used when reading a stream (that is e.g. going to be written to a BLOB or CLOB). When empty, the stream is copied directly to the BLOB, without conversion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is streamed to the HttpServletResponse object of the RestServiceDispatcher (instead of passed as a String) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of seconds the driver will wait for a statement object to execute. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="trimSpaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, every string in the message which equals &lt;code&gt;?{paramname+UNP_END+&lt;/code&gt; will be replaced by the setter method for the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XmlQuerySenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobBase64Direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether the streamed blobdata will need to be base64 &lt;code&gt;encode&lt;/code&gt; or &lt;code&gt;decode&lt;/code&gt; or not.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data. If blobCharset and blobSessionKey are not set, blobs are base64 encoded after being read to accommodate for the fact that senders need to return a String (default: UTF-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateBlob': column that contains the BLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateBlob': key of session variable that contains the data (String or InputStream) to be loaded to the BLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the BLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateClob': column that contains the CLOB to be updated (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateClob': key of session variable that contains the CLOB (String or InputStream) to be loaded to the CLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the CLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Inputstream is not closed after it has been used to read a BLOB or CLOB (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOutputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Outputstream is not closed after BLOB or CLOB has been written to it (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnsReturned" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of columns whose values are to be returned. Works only if the driver implements jdbc 3.0 getGeneratedKeys()</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="includeFieldDefinition" type="xs:string">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the result contains besides the returned rows also a header with information about the fetched fields (default: application default (true))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="lockRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (by appending ' for update nowait skip locked' to the end of the query) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' for update wait #' is used instead of ' for update nowait skip locked' (default: -1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRows" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of rows to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries (default: -1 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value used in result as contents of fields that contain no value (sql-null) (default: &lt;i&gt;empty string&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="packageContent" type="xs:string" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default:  )</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryType" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of: &lt;ul&gt;&lt;li&gt;&lt;code&gt;select&lt;/code&gt; for queries that return data&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateBlob&lt;/code&gt; for queries that update a BLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateClob&lt;/code&gt; for queries that update a CLOB&lt;/li&gt;&lt;li&gt;&lt;code&gt;package&lt;/code&gt; to execute Oracle PL/SQL package&lt;/li&gt;&lt;li&gt;&lt;code&gt;other&lt;/code&gt; or anything else for queries that return no data.&lt;/li&gt;&lt;/ul&gt; (default: &lt;code&gt;other&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>Query that can be used to obtain result of side-effect of update-query, like generated value of sequence. Example: SELECT mysequence.currval FROM dual</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rowIdSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If specified, the rowid of the processed row is put in the pipelinesession under the specified key (only applicable for &lt;code&gt;querytype=other&lt;/code&gt;). &lt;b&gt;Note:&lt;/b&gt; If multiple rows are processed a SqlException is thrown.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalar" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the value of the first column of the first row (or the startrow) is returned as the only result, as a simple non-xml value (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalarExtended" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;scalar&lt;/code&gt; is also &lt;code&gt;true&lt;/code&gt;, but returns no value, one of the following is returned: &lt;ul&gt;&lt;li&gt;'[absent]' no row is found&lt;/li&gt;&lt;li&gt;'[null]' a row is found, but the value is a SQL-NULL&lt;/li&gt;&lt;li&gt;'[empty]' a row is found, but the value is a empty string&lt;/li&gt;&lt;/ul&gt; (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startRow" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of the first row to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries. Rows before this are skipped from the output. (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset used when reading a stream (that is e.g. going to be written to a BLOB or CLOB). When empty, the stream is copied directly to the BLOB, without conversion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is streamed to the HttpServletResponse object of the RestServiceDispatcher (instead of passed as a String) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of seconds the driver will wait for a statement object to execute. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="xs:string" />
    <xs:attribute name="trimSpaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, every string in the message which equals &lt;code&gt;?{paramname+UNP_END+&lt;/code&gt; will be replaced by the setter method for the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped. (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XmlSwitchPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Forward returned when the content, on which the switch is performed, is empty. if &lt;code&gt;emptyforwardname&lt;/code&gt; is not specified, &lt;code&gt;notfoundforwardname&lt;/code&gt; is used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notFoundForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Forward returned when the pipename derived from the stylesheet could not be found.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceSelectionStylesheetFilename" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet may return a string representing the forward to look up (default: &lt;i&gt;a stylesheet that returns the name of the root-element&lt;/i&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the key in the &lt;code&gt;PipeLineSession&lt;/code&gt; to retrieve the input message from, if a serviceSelectionStylesheetFilename or a xpathExpression is specified. If no serviceSelectionStylesheetFilename or xpathExpression is specified, the value of the session variable is used as the name of the forward. If none of sessionKey, serviceSelectionStylesheetFilename or xpathExpression are specified, the element name of the root node of the input message is taken as the name of forward.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath-expression that returns a string representing the forward to look up. It's possible to refer to a parameter (which e.g. contains a value from a sessionkey) by using the parameter name prefixed with $</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xslt2" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XmlValidatorErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XmlValidatorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardFailureToSuccess" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="xs:string" />
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the root element, or a comma separated list of names to choose from (only one is allowed)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of uri references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name). see doc on the method.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message, the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate. Please note that this functionality is deprecated, using {@link nl.nn.adapterframework.soap.SoapValidator} is now the preferred solution in case a SOAP message needs to be validated, in other cases give this property an empty value (default: http://schemas.xmlsoap.org/soap/envelope/)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XmlValidatorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="addNamespaceToSchema" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="xs:string">
      <xs:annotation>
        <xs:documentation>Perform addional memory intensive checks (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lazyInit" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value in appconstants is overwritten (for this validator only) (default: &lt;code&gt;application default (false)&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in (default: failureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="xs:string">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated (default: &lt;code&gt;false&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) (default: &lt;code&gt;true&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive (default: xmlFailureReason)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  (default: &lt;code&gt;1.1&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XmlWellFormedCheckerPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="XsltErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="indentXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. When not set, the value specified in the stylesheet is followed (default: false, if not set in stylesheet)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>omit the xml declaration on top of the output. When not set, the value specified in the stylesheet is followed (default: false, if not set in stylesheet)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>For xpathExpression only: either 'text' or 'xml'. (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipEmptyTags" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey (default: 100)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xslt2" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XsltPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. When not set, the value specified in the stylesheet is followed (default: false, if not set in stylesheet)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>omit the xml declaration on top of the output. When not set, the value specified in the stylesheet is followed (default: false, if not set in stylesheet)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>For xpathExpression only: either 'text' or 'xml'. (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string" />
    <xs:attribute name="skipEmptyTags" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey (default: 100)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xslt2" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="XsltSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="indentXml" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. When not set, the value specified in the stylesheet is followed (default: false, if not set in stylesheet)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>omit the xml declaration on top of the output. When not set, the value specified in the stylesheet is followed (default: false, if not set in stylesheet)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>For xpathExpression only: either 'text' or 'xml'. (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipEmptyTags" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey (default: 100)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xslt2" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ZipIteratorPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapInputWrapper" type="ApiSoapInputWrapperType" minOccurs="0" />
        <xs:element name="BisInputWrapper" type="BisInputWrapperType" minOccurs="0" />
        <xs:element name="DirectInputWrapper" type="DirectInputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapInputWrapper" type="EsbSoapInputWrapperType" minOccurs="0" />
        <xs:element name="FxfInputWrapper" type="FxfInputWrapperType" minOccurs="0" />
        <xs:element name="SoapInputWrapper" type="SoapInputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlInputValidator" type="ApiWsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapInputValidator" type="EsbSoapInputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlInputValidator" type="FxfXmlInputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlInputValidator" type="Json2XmlInputValidatorType" minOccurs="0" />
        <xs:element name="SoapInputValidator" type="SoapInputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlInputValidator" type="WsdlXmlInputValidatorType" minOccurs="0" />
        <xs:element name="XmlInputValidator" type="XmlInputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="Afm2EdiFactSender" type="Afm2EdiFactSenderType" minOccurs="0" />
        <xs:element name="AmazonS3Sender" type="AmazonS3SenderType" minOccurs="0" />
        <xs:element name="BisJmsSender" type="BisJmsSenderType" minOccurs="0" />
        <xs:element name="CmisHttpSender" type="CmisHttpSenderType" minOccurs="0" />
        <xs:element name="CmisSender" type="CmisSenderType" minOccurs="0" />
        <xs:element name="CommandSender" type="CommandSenderType" minOccurs="0" />
        <xs:element name="DelaySender" type="DelaySenderType" minOccurs="0" />
        <xs:element name="DirectQuerySender" type="DirectQuerySenderType" minOccurs="0" />
        <xs:element name="EchoSender" type="EchoSenderType" minOccurs="0" />
        <xs:element name="EsbJmsSender" type="EsbJmsSenderType" minOccurs="0" />
        <xs:element name="ExchangeFolderSender" type="ExchangeFolderSenderType" minOccurs="0" />
        <xs:element name="FileSender" type="FileSenderType" minOccurs="0" />
        <xs:element name="FileSystemSender" type="FileSystemSenderType" minOccurs="0" />
        <xs:element name="FileSystemSenderWithAttachmentsSender" type="FileSystemSenderWithAttachmentsSenderType" minOccurs="0" />
        <xs:element name="FixedQuerySender" type="FixedQuerySenderType" minOccurs="0" />
        <xs:element name="FixedResultSender" type="FixedResultSenderType" minOccurs="0" />
        <xs:element name="FtpFileSystemSender" type="FtpFileSystemSenderType" minOccurs="0" />
        <xs:element name="FtpSender" type="FtpSenderType" minOccurs="0" />
        <xs:element name="HttpSender" type="HttpSenderType" minOccurs="0" />
        <xs:element name="IMSSender" type="IMSSenderType" minOccurs="0" />
        <xs:element name="IbisJavaSender" type="IbisJavaSenderType" minOccurs="0" />
        <xs:element name="IbisLocalSender" type="IbisLocalSenderType" minOccurs="0" />
        <xs:element name="IbisWebServiceSender" type="IbisWebServiceSenderType" minOccurs="0" />
        <xs:element name="IfsaSimulatorJmsSender" type="IfsaSimulatorJmsSenderType" minOccurs="0" />
        <xs:element name="JavascriptSender" type="JavascriptSenderType" minOccurs="0" />
        <xs:element name="JmsSender" type="JmsSenderType" minOccurs="0" />
        <xs:element name="JsonXsltSender" type="JsonXsltSenderType" minOccurs="0" />
        <xs:element name="LdapSender" type="LdapSenderType" minOccurs="0" />
        <xs:element name="LocalFileSystemSender" type="LocalFileSystemSenderType" minOccurs="0" />
        <xs:element name="LogSender" type="LogSenderType" minOccurs="0" />
        <xs:element name="MQSender" type="MQSenderType" minOccurs="0" />
        <xs:element name="MailSender" type="MailSenderType" minOccurs="0" />
        <xs:element name="MessageStoreSender" type="MessageStoreSenderType" minOccurs="0" />
        <xs:element name="MqttSender" type="MqttSenderType" minOccurs="0" />
        <xs:element name="MultipartHttpSender" type="MultipartHttpSenderType" minOccurs="0" />
        <xs:element name="NetStorageSender" type="NetStorageSenderType" minOccurs="0" />
        <xs:element name="ParallelSendersSender" type="ParallelSendersSenderType" minOccurs="0" />
        <xs:element name="ReloadSender" type="ReloadSenderType" minOccurs="0" />
        <xs:element name="RestSender" type="RestSenderType" minOccurs="0" />
        <xs:element name="ResultSet2FileSender" type="ResultSet2FileSenderType" minOccurs="0" />
        <xs:element name="Samba1Sender" type="Samba1SenderType" minOccurs="0" />
        <xs:element name="Samba2Sender" type="Samba2SenderType" minOccurs="0" />
        <xs:element name="SambaSender" type="SambaSenderType" minOccurs="0" />
        <xs:element name="SambaSenderOldSender" type="SambaSenderOldSenderType" minOccurs="0" />
        <xs:element name="SapSender" type="SapSenderType" minOccurs="0" />
        <xs:element name="SchedulerSender" type="SchedulerSenderType" minOccurs="0" />
        <xs:element name="SendGridSender" type="SendGridSenderType" minOccurs="0" />
        <xs:element name="SenderSeriesSender" type="SenderSeriesSenderType" minOccurs="0" />
        <xs:element name="SenderWrapperSender" type="SenderWrapperSenderType" minOccurs="0" />
        <xs:element name="ShadowSender" type="ShadowSenderType" minOccurs="0" />
        <xs:element name="TibcoSender" type="TibcoSenderType" minOccurs="0" />
        <xs:element name="WebServiceNtlmSender" type="WebServiceNtlmSenderType" minOccurs="0" />
        <xs:element name="WebServiceSender" type="WebServiceSenderType" minOccurs="0" />
        <xs:element name="XComSender" type="XComSenderType" minOccurs="0" />
        <xs:element name="XfbSender" type="XfbSenderType" minOccurs="0" />
        <xs:element name="XmlJmsBrowserSender" type="XmlJmsBrowserSenderType" minOccurs="0" />
        <xs:element name="XmlQuerySender" type="XmlQuerySenderType" minOccurs="0" />
        <xs:element name="XmlValidatorSender" type="XmlValidatorSenderType" minOccurs="0" />
        <xs:element name="XsltSender" type="XsltSenderType" minOccurs="0" />
        <xs:element name="ZipWriterSender" type="ZipWriterSenderType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="DummyMessageLog" type="DummyMessageLogType" minOccurs="0" />
        <xs:element name="EsbJmsMessageLog" type="EsbJmsMessageLogType" minOccurs="0" />
        <xs:element name="JdbcMessageLog" type="JdbcMessageLogType" minOccurs="0" />
        <xs:element name="JmsMessageLog" type="JmsMessageLogType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiWsdlXmlOutputValidator" type="ApiWsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="EsbSoapOutputValidator" type="EsbSoapOutputValidatorType" minOccurs="0" />
        <xs:element name="FxfXmlOutputValidator" type="FxfXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="Json2XmlOutputValidator" type="Json2XmlOutputValidatorType" minOccurs="0" />
        <xs:element name="SoapOutputValidator" type="SoapOutputValidatorType" minOccurs="0" />
        <xs:element name="WsdlXmlOutputValidator" type="WsdlXmlOutputValidatorType" minOccurs="0" />
        <xs:element name="XmlOutputValidator" type="XmlOutputValidatorType" minOccurs="0" />
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="ApiSoapOutputWrapper" type="ApiSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="BisOutputWrapper" type="BisOutputWrapperType" minOccurs="0" />
        <xs:element name="DirectOutputWrapper" type="DirectOutputWrapperType" minOccurs="0" />
        <xs:element name="EsbSoapOutputWrapper" type="EsbSoapOutputWrapperType" minOccurs="0" />
        <xs:element name="FxfOutputWrapper" type="FxfOutputWrapperType" minOccurs="0" />
        <xs:element name="SoapOutputWrapper" type="SoapOutputWrapperType" minOccurs="0" />
      </xs:choice>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addInputToResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. when set to a value greater than 0, it specifies the number of rows send in a block to the sender. (default: 0 (one line at a time, no prefix of suffix))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset used when reading the contents of the entry (only used if streamingcontens=false&gt; (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned. Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentsSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key used to store contents of each zip entry (default: zipdata)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked (default: all)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in {@link AbstractPipe}, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreExceptions" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemNoSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>either MESSAGEID or CORRELATIONID. For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. (default: correlationid)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxChildThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe) (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxItems" type="xs:string">
      <xs:annotation>
        <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="xs:string">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) (default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="xs:string">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either 'text' or 'xml'. only valid for xpathexpression (default: text)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parallel" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time (in seconds) after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts (default: 10 s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="removeDuplicates" type="xs:string">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeXmlDeclarationInResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made (default: 600)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="xs:string">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipBOM" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a possible bytes order mark (bom) at the start of the file is skipped (only used for encoding uft-8) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopConditionXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Expression evaluated on each result if set. Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used. This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the result is first base64 decoded and then streamed to the httpservletresponse object (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingActive" type="xs:string">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes (default: set by appconstant streaming.auto)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingContents" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;false&lt;/code&gt;, a string containing the contents of the entry is placed under the session key, instead of the inputstream to the contents (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ZipWriterErrorSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>characterset used for writing zip entry (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="zipWriterHandle" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key used to refer to zip session. must be used if zipwriterpipes are nested (default: zipwriterhandle)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ZipWriterPipeType">
    <xs:sequence>
      <xs:element name="Locker" type="LockerType" minOccurs="0" />
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Forward" type="ForwardType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>one of &lt;ul&gt;&lt;li&gt;open: to open a new zip file or stream&lt;/li&gt; &lt;li&gt;close: to close the zip file or stream&lt;/li&gt; &lt;li&gt;write: write the input to the zip as a new entry&lt;/li&gt; &lt;li&gt;stream: create a new zip entry, and provide an outputstream that another pipe can use to write the contents&lt;/li&gt; &lt;/ul&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls whether pipe is included in configuration. when set &lt;code&gt;false&lt;/code&gt; or set to something else as &lt;code&gt;true&lt;/code&gt;, (even set to the empty string), the pipe is not included in the configuration (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>only for action='write': charset used to write strings to zip entries (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>only for action='write': when set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after the zip entry is written (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOutputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>only for action='open': when set to &lt;code&gt;false&lt;/code&gt;, the outputstream is not closed after the zip creation is finished (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="completeFileHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>only for action='write': when set to &lt;code&gt;true&lt;/code&gt;, the fields 'crc-32', 'compressed size' and 'uncompressed size' in the zip entry file header are set explicitly (note: compression ratio is zero) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored (default: ref_ + the name of the element)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the &lt;code&gt;forward&lt;/code&gt; that is looked up upon completion. (default: success)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt; will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level, so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string" />
    <xs:attribute name="maxThreads" type="xs:string">
      <xs:annotation>
        <xs:documentation>maximum number of threads that may call {@link #doPipe(java.lang.Object, nl.nn.adapterframework.core.IPipeLineSession)} simultaneously (default: 0 (unlimited))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="xs:string">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes (default: application default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;) (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="xs:string" />
    <xs:attribute name="restoreMovedElements" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  {@link #setElementToMove(java.lang.String)}))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(default: (Only used when &lt;code&gt;writetoseclog=true&lt;/code&gt;) Comma separated list of keys of session variables that is appended to the security log record)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the processing continues directly at the forward of this pipe, without executing the pipe itself (default: false)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute" type="xs:string">
      <xs:annotation>
        <xs:documentation>Defines transaction and isolation behaviour.For developers: it is equalto &lt;a href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/guides/ejb/html/Transaction2.html#10494"&gt;EJB transaction attribute&lt;/a&gt;.Possible values are:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; (default: Supports)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttributeNum" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;transactionAttribute&lt;/code&gt;, but the chosen option is represented with a number. The numbers mean:&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Supports&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Mandatory&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;RequiresNew&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;NotSupported&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Never&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; (default: 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="xs:string">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) of transaction started to process a message. (default: &lt;code&gt;0&lt;/code&gt; (use system default))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="xs:string" />
    <xs:attribute name="zipWriterHandle" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key used to refer to zip session. must be used if zipwriterpipes are nested (default: zipwriterhandle)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ZipWriterSenderType">
    <xs:sequence>
      <xs:element name="Param" type="ParamType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>characterset used for writing zip entry (default: utf-8)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used (default: true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="zipWriterHandle" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key used to refer to zip session. must be used if zipwriterpipes are nested (default: zipwriterhandle)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
</xs:schema>
