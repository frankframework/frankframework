scenario.description		= Test 'Required' transactionAttribute when an exception occurs
scenario.fulldescription	= Scenario to test 'Required' transactionAttribute on receivers and pipelines

java.TransactionHandling.className=nl.nn.adapterframework.senders.IbisJavaSender
java.TransactionHandling.serviceName=ibis4test-TransactionHandlingRequiredSubAdapterException
java.TransactionHandling.convertExceptionToMessage=true

step1.java.TransactionHandling.write = scenario08/in.xml
step2.java.TransactionHandling.read = scenario08/out.xml

ignoreContentBetweenKeys1.key1=UnexpectedRollbackException)
ignoreContentBetweenKeys1.key2=</message>

#WAS
replaceRegularExpressionKeys1.key1=<message>IbisJavaSender \\[Test Tool IbisJavaSender\\] exception processing message using request processor \\[ibis4test-TransactionTimeoutHandlingTransacted\\]: \\(RequestProcessorException\\) RequestProcessor \\[ibis4test-TransactionTimeoutHandlingTransacted\\] caught exception: \\(UnexpectedRollbackException\\) JTA transaction unexpectedly rolled back \\(maybe due to a timeout\\); nested exception is javax\\.transaction\\.RollbackException: \\(RollbackException\\)</message>
replaceRegularExpressionKeys1.key2=<message>REPLACE1</message>

replaceRegularExpressionKeys2.key1=<message>JTA transaction unexpectedly rolled back \\(maybe due to a timeout\\); nested exception is javax\\.transaction\\.RollbackException</message>
replaceRegularExpressionKeys2.key2=<message>REPLACE2</message>

removeRegularExpressionKey1.key=<cause>\\s*?<throwable>\\s*?<class>javax\\.transaction\\.RollbackException</class>\\s*?<message>null</message>\\s*?</throwable>\\s*?</cause>

#TOMCATBTM
replaceRegularExpressionKeys3.key1=<message>IbisJavaSender \\[Test Tool IbisJavaSender\\] exception processing message using request processor \\[ibis4test-TransactionTimeoutHandlingTransacted\\]: \\(RequestProcessorException\\) RequestProcessor \\[ibis4test-TransactionTimeoutHandlingTransacted\\] caught exception: \\(UnexpectedRollbackException\\) JTA transaction unexpectedly rolled back \\(maybe due to a timeout\\); nested exception is bitronix\\.tm\\.internal\\.BitronixRollbackException: \\(BitronixRollbackException\\) transaction was marked as rollback only and has been rolled back</message>
replaceRegularExpressionKeys3.key2=<message>REPLACE1</message>

replaceRegularExpressionKeys4.key1=<message>JTA transaction unexpectedly rolled back \\(maybe due to a timeout\\); nested exception is bitronix\\.tm\\.internal\\.BitronixRollbackException: transaction was marked as rollback only and has been rolled back</message>
replaceRegularExpressionKeys4.key2=<message>REPLACE2</message>

removeRegularExpressionKey2.key=<cause>\\s*<throwable>\\s*<class>bitronix\\.tm\\.internal\\.BitronixRollbackException</class>\\s*<message>transaction was marked as rollback only and has been rolled back</message>\\s*</throwable>\\s*</cause>

#TOMCAT6
replaceRegularExpressionKeys5.key1=<message>IbisJavaSender \\[Test Tool IbisJavaSender\\] exception processing message using request processor \\[ibis4test-TransactionTimeoutHandlingTransacted\\]: \\(RequestProcessorException\\) RequestProcessor \\[ibis4test-TransactionTimeoutHandlingTransacted\\] caught exception: \\(UnexpectedRollbackException\\) Transaction rolled back because it has been marked as rollback-only</message>
replaceRegularExpressionKeys5.key2=<message>REPLACE1</message>

replaceRegularExpressionKeys6.key1=<message>Transaction rolled back because it has been marked as rollback-only</message>
replaceRegularExpressionKeys6.key2=<message>REPLACE2</message>
