scenario.description = MessageStoreSender

include = common.properties

# delete all lines from ibistore that are in related slotIds
step1.jdbc.deleteTableIbisStore.read = scenario01/jdbc-delete.xml

# make the messageStoreSender write a message
step2.java.MessageStoreSender.write  = scenario01/in.xml

# read the result of the MessageStoreSender pipeline, which is 
# either the key of the newly inserted line in the ibisstore
# or a message that the message to be inserted already exists
step3.java.MessageStoreSender.read   = scenario01/out.xml

# wait a little for listener to pick up the message
step4.java.DelayPipe.writeline = dummy
step5.java.DelayPipe.read = ignore

# there should be no items in de errorStorage of the writer part
step6.jdbc.selectWriteErrors.read = scenario01/out-write-errors.xml
# there should be one message in the write log
step7.jdbc.selectWriteLog.read    = scenario01/out-write-log.xml

# there should be no items in de errorStorage of the read part
step8.jdbc.selectReadErrors.read  = scenario01/out-read-errors.xml

# there should be no items in de errorStorage of the read part
step9.jdbc.selectQueueErrors.read  = scenario01/out-read-errors.xml

# disabled checking of read log and queue for now, because it appears to be unstable
#step7.jdbc.selectReadLog.read     = scenario01/out-read-log.xml
#step8.jdbc.selectQueue.read       = scenario01/out-queue.xml