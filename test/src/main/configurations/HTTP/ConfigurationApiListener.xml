<module>
	<adapter name="ApiListener_SimpleInsert">
		<receiver
			checkForDuplicates="true"
			processResultCacheSize="0"
			>
			<listener
				name="SimpleInsertListener"
				className="nl.nn.adapterframework.http.rest.ApiListener"
				uriPattern="insert"
				method="post"
			/>
			<messageLog className="nl.nn.adapterframework.jdbc.JdbcTransactionalStorage" slotId="ApiListenerDuplicateCheck" />
		</receiver>
		<pipeline transactionAttribute="Required">
			<exits>
				<exit state="success" path="EXIT" />
			</exits>

			<pipe name="FixedInsert" className="nl.nn.adapterframework.pipes.SenderPipe">
				<sender className="nl.nn.adapterframework.jdbc.FixedQuerySender" query="INSERT INTO IBISTEMP (tkey,tvarchar) VALUES (SEQ_IBISTEMP.NEXTVAL,?)" queryType="insert" >
					<param name="tvarchar" sessionKey="messageId" />
				</sender>
			</pipe>

			<pipe name="FixedResultPipe" className="nl.nn.adapterframework.pipes.FixedResultPipe" returnString="&lt;success/&gt;">
				<forward name="success" path="EXIT" />
			</pipe>

		</pipeline>
	</adapter>
	<adapter name="ApiListener_SimpleInsertWithTransactedException">
		<receiver
			checkForDuplicates="true"
			processResultCacheSize="0"
			transactionAttribute="Required"
			>
			<listener
				name="SimpleInsertListener"
				className="nl.nn.adapterframework.http.rest.ApiListener"
				uriPattern="transacted-exception"
				method="post"
			/>
			<messageLog className="nl.nn.adapterframework.jdbc.JdbcTransactionalStorage" slotId="ApiListenerDuplicateCheck" />
		</receiver>
		<pipeline transactionAttribute="Required">
			<exits>
				<exit state="success" path="EXIT" />
			</exits>

			<pipe name="FixedInsert" className="nl.nn.adapterframework.pipes.SenderPipe">
				<sender className="nl.nn.adapterframework.jdbc.FixedQuerySender" query="INSERT INTO IBISTEMP (tkey,tvarchar) VALUES (SEQ_IBISTEMP.NEXTVAL,?)" queryType="insert" >
					<param name="tvarchar" sessionKey="messageId" />
				</sender>
			</pipe>
			<pipe name="generateException" className="nl.nn.adapterframework.pipes.ExceptionPipe">
				<forward name="success" path="EXIT" />
			</pipe>
		</pipeline>
	</adapter>
	<adapter name="ApiListener_SimpleInsertWithException">
		<receiver
			checkForDuplicates="true"
			processResultCacheSize="0"
			>
			<listener
				name="SimpleInsertListener"
				className="nl.nn.adapterframework.http.rest.ApiListener"
				uriPattern="exception"
				method="post"
			/>
			<errorStorage className="nl.nn.adapterframework.jdbc.JdbcTransactionalStorage" slotId="ApiListenerDuplicateCheck-Errors"/>
			<messageLog className="nl.nn.adapterframework.jdbc.JdbcTransactionalStorage" slotId="ApiListenerDuplicateCheck" />
		</receiver>
		<pipeline transactionAttribute="Required">
			<exits>
				<exit state="success" path="EXIT" />
			</exits>

			<pipe name="FixedInsert" className="nl.nn.adapterframework.pipes.SenderPipe">
				<sender className="nl.nn.adapterframework.jdbc.FixedQuerySender" query="INSERT INTO IBISTEMP (tkey,tvarchar) VALUES (SEQ_IBISTEMP.NEXTVAL,?)" queryType="insert" >
					<param name="tvarchar" sessionKey="messageId" />
				</sender>
			</pipe>
			<pipe name="generateException" className="nl.nn.adapterframework.pipes.ExceptionPipe">
				<forward name="success" path="EXIT" />
			</pipe>
		</pipeline>
	</adapter>
	<adapter name="ApiListener_MultiOriginalMessage">
		<receiver
			processResultCacheSize="0"
		>
			<listener
				name="MultipleUseOfOriginalMessage"
				className="nl.nn.adapterframework.http.rest.ApiListener"
				uriPattern="multiOriginalMessage"
				method="post"
			/>
		</receiver>
		<pipeline>
			<exits>
				<exit path="READY" state="success" />
			</exits>
			<pipe name="first"  className="nl.nn.adapterframework.pipes.XsltPipe" xpathExpression="*/*" outputType="xml" />
			<pipe name="second" className="nl.nn.adapterframework.pipes.XsltPipe" xpathExpression="*/*" outputType="xml" getInputFromSessionKey="originalMessage" />
		</pipeline>
	</adapter>

	<adapter name="CallApiListener">
		<receiver>
			<listener className="nl.nn.adapterframework.receivers.JavaListener" serviceName="ibis4test-CallApiListener" />
		</receiver>
		<pipeline firstPipe="callApiListener">
			<exits>
				<exit path="EXIT" state="success" />
			</exits>

			<pipe name="callApiListener"
				className="nl.nn.adapterframework.pipes.SenderPipe">
				<sender className="nl.nn.adapterframework.http.HttpSender"
					urlParam="url_param" methodType="POST" resultStatusCodeSessionKey="statusCode"
					allowSelfSignedCertificates="true"
					verifyHostname="false"
					authAlias="${framework.api.user.alias}"
					headersParams="Message-Id"
				>
					<param name="url_param" xpathExpression="*/@uri" /> <!-- use pipeline input -->
					<param name="Message-Id" sessionKey="cid" /> <!-- use well known value for messageId, to be able to test duplicate check -->
				</sender>
			</pipe>

			<pipe
				name="successOrException"
				className="nl.nn.adapterframework.pipes.XmlSwitch" forwardNameSessionKey="statusCode">
				<forward name="200" path="EXIT" />
				<forward name="500" path="FixedResultOnException" />
			</pipe>

			<pipe name="FixedResultOnException" className="nl.nn.adapterframework.pipes.FixedResultPipe" returnString="&lt;error/&gt;">
				<forward name="success" path="EXIT" />
			</pipe>
		</pipeline>
	</adapter>
</module>
