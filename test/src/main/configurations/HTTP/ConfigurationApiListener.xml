<module>
	<adapter name="ApiListener_SimpleInsert">
		<receiver
			checkForDuplicates="true"
			checkForDuplicatesMethod="CORRELATIONID"
			processResultCacheSize="0"
			>
			<listener
				name="SimpleInsertListener"
				className="org.frankframework.http.rest.ApiListener"
				uriPattern="insert"
				methods="post,put"
			/>
			<messageLog className="org.frankframework.jdbc.JdbcTransactionalStorage" slotId="ApiListenerDuplicateCheck" />
		</receiver>
		<pipeline transactionAttribute="Required">
			<exits>
				<exit state="success" path="EXIT" />
			</exits>

			<pipe name="FixedInsert" className="org.frankframework.pipes.SenderPipe">
				<sender className="org.frankframework.jdbc.FixedQuerySender" query="INSERT INTO IBISTEMP (tkey,tvarchar) VALUES (SEQ_IBISTEMP.NEXTVAL,?)" >
					<param name="tvarchar" sessionKey="messageId" />
				</sender>
			</pipe>
			<pipe name="echo" className="org.frankframework.pipes.EchoPipe" getInputFromFixedValue="&lt;success/&gt;">
				<forward name="success" path="EXIT" />
			</pipe>
		</pipeline>
	</adapter>
	<adapter name="ApiListener_SimpleGet">
		<receiver
			processResultCacheSize="0"
			>
			<listener
				name="SimpleGetListener"
				className="org.frankframework.http.rest.ApiListener"
				uriPattern="get"
			/>
		</receiver>
		<pipeline>
			<pipe name="echo" className="org.frankframework.pipes.EchoPipe" getInputFromFixedValue="&lt;success/&gt;">
				<forward name="success" path="READY" />
			</pipe>
		</pipeline>
	</adapter>
	<adapter name="ApiListener_SimpleInsertWithTransactedException">
		<receiver
			checkForDuplicates="true"
			processResultCacheSize="0"
			transactionAttribute="Required"
			>
			<listener
				name="SimpleInsertListener"
				className="org.frankframework.http.rest.ApiListener"
				uriPattern="transacted-exception"
				method="post"
			/>
			<messageLog className="org.frankframework.jdbc.JdbcTransactionalStorage" slotId="ApiListenerDuplicateCheck" />
		</receiver>
		<pipeline transactionAttribute="Required">
			<exits>
				<exit state="success" path="EXIT" />
			</exits>

			<pipe name="FixedInsert" className="org.frankframework.pipes.SenderPipe">
				<sender className="org.frankframework.jdbc.FixedQuerySender" query="INSERT INTO IBISTEMP (tkey,tvarchar) VALUES (SEQ_IBISTEMP.NEXTVAL,?)" >
					<param name="tvarchar" sessionKey="messageId" />
				</sender>
			</pipe>
			<pipe name="generateException" className="org.frankframework.pipes.ExceptionPipe">
				<forward name="success" path="EXIT" />
			</pipe>
		</pipeline>
	</adapter>
	<adapter name="ApiListener_SimpleInsertWithException">
		<receiver
			checkForDuplicates="true"
			processResultCacheSize="0"
			elementToMove="content"
			>
			<listener
				name="SimpleInsertListener"
				className="org.frankframework.http.rest.ApiListener"
				uriPattern="exception"
				method="post"
			/>
			<errorStorage className="org.frankframework.jdbc.JdbcTransactionalStorage" slotId="ApiListenerDuplicateCheck-Errors"/>
			<messageLog className="org.frankframework.jdbc.JdbcTransactionalStorage" slotId="ApiListenerDuplicateCheck" />
		</receiver>
		<pipeline transactionAttribute="Required">
			<exits>
				<exit state="success" path="EXIT" />
			</exits>

			<pipe name="FixedInsert" className="org.frankframework.pipes.SenderPipe">
				<sender className="org.frankframework.jdbc.FixedQuerySender" query="INSERT INTO IBISTEMP (tkey,tvarchar) VALUES (SEQ_IBISTEMP.NEXTVAL,?)" >
					<param name="tvarchar" sessionKey="messageId" />
				</sender>
			</pipe>
			<pipe name="generateException" className="org.frankframework.pipes.ExceptionPipe">
				<forward name="success" path="EXIT" />
			</pipe>
		</pipeline>
	</adapter>
	<adapter name="ApiListener_MultiOriginalMessage">
		<receiver processResultCacheSize="0">
			<listener
				name="MultipleUseOfOriginalMessage"
				className="org.frankframework.http.rest.ApiListener"
				uriPattern="multiOriginalMessage"
				method="post"
			/>
		</receiver>
		<pipeline>
			<exits>
				<exit path="READY" state="success" />
			</exits>
			<pipe name="first" className="org.frankframework.pipes.XsltPipe" xpathExpression="*/*" outputType="xml" />
			<pipe name="second" className="org.frankframework.pipes.XsltPipe" xpathExpression="*/*" outputType="xml" getInputFromSessionKey="originalMessage" />
		</pipeline>
	</adapter>

	<adapter name="CallApiListener">
		<receiver>
			<listener className="org.frankframework.receivers.JavaListener" serviceName="ibis4test-CallApiListener" />
		</receiver>
		<pipeline firstPipe="callApiListener">
			<exits>
				<exit path="EXIT" state="success" />
			</exits>

			<pipe name="callApiListener"
				className="org.frankframework.pipes.SenderPipe">
				<sender className="org.frankframework.http.HttpSender"
					urlParam="url_param" methodType="POST" resultStatusCodeSessionKey="statusCode"
					allowSelfSignedCertificates="true"
					verifyHostname="false"
					authAlias="${framework.api.user.alias}"
					headersParams="Message-Id"
				>
					<param name="url_param" xpathExpression="*/@uri" /> <!-- use pipeline input -->
					<param name="Message-Id" sessionKey="cid" /> <!-- use well known value for messageId, to be able to test duplicate check -->
				</sender>
			</pipe>

			<pipe name="successOrException"
				className="org.frankframework.pipes.XmlSwitch" forwardNameSessionKey="statusCode">
				<forward name="200" path="EXIT" />
				<forward name="304" path="EXIT" />
				<forward name="500" path="FixedResultOnException" />
			</pipe>

			<pipe name="FixedResultOnException" className="org.frankframework.pipes.EchoPipe" getInputFromFixedValue="&lt;error/&gt;">
				<forward name="success" path="EXIT" />
			</pipe>
		</pipeline>
	</adapter>

	<adapter name="CallApiListenerMultipleTimes">
		<receiver>
			<listener className="org.frankframework.receivers.JavaListener" serviceName="ibis4test-CallApiListenermMultipleTimes" />
		</receiver>
		<pipeline firstPipe="forEachElement">

			<ForEachChildElementPipe name="forEachElement" elementXPathExpression="/requests/request">
				<HttpSender urlParam="url_param" allowSelfSignedCertificates="true" verifyHostname="false" authAlias="${framework.api.user.alias}" headersParams="Message-Id, Correlation-Id">
					<param name="url_param" xpathExpression="*/@uri" /> <!-- use pipeline input -->
					<param name="Message-Id" pattern="{uuid}" />
					<param name="Correlation-Id" pattern="{uuid}" />
				</HttpSender>
			</ForEachChildElementPipe>

		</pipeline>
	</adapter>

	<adapter name="ApiListener_LargeStreamProducer">
		<receiver
			processResultCacheSize="0"
		>
			<listener
				name="LargeStreamProducer"
				className="org.frankframework.http.rest.ApiListener"
				uriPattern="largeStream"
			/>
		</receiver>
		<pipeline>
			<exits>
				<exit path="READY" state="success" />
			</exits>
			<pipe name="ManyBlocks" className="org.frankframework.pipes.LargeBlockTester" direction="produce" blockSize="10000" blockCount="20" sleepBetweenServedBlocks="100"/>
		</pipeline>
	</adapter>

	<adapter name="ApiListener_LargeStreamConsumer">
		<receiver>
			<listener className="org.frankframework.receivers.JavaListener" serviceName="ibis4test-ApiListener_LargeStream" />
		</receiver>
		<pipeline>
			<pipe name="callApiListener"
				className="org.frankframework.pipes.SenderPipe">
				<sender className="org.frankframework.http.HttpSender"
					url="${web.protocol}://${web.host}:${web.port}${web.contextpath}/api/largeStream"
					resultStatusCodeSessionKey="statusCode"
					allowSelfSignedCertificates="true"
					verifyHostname="false"
					authAlias="${framework.api.user.alias}"
				/>
			</pipe>

			<pipe name="consume"
				className="org.frankframework.pipes.LargeBlockTester" direction="consume" blockSize="10000" blockCount="20"
			/>
		</pipeline>
	</adapter>

</module>
