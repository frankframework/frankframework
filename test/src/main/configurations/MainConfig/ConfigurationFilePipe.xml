<ibis>
	<adapter name="FilePipe" description="Test the functioning of the FilePipe">
		<receiver className="nl.nn.adapterframework.receivers.GenericReceiver" name="FilePipe">
			<listener className="nl.nn.adapterframework.receivers.JavaListener" serviceName="ibis4test-FilePipe" />
		</receiver>
		<pipeline firstPipe="setFilename">
			<exits>
				<exit path="EXIT" state="success" />
			</exits>
						
			<!-- Set FileName -->
			<pipe name="setFilename" className="nl.nn.adapterframework.pipes.PutInSession" sessionKey="filename" value="${testdata.dir}/test.txt" >
 			 <forward name="success" path="setFileData"/> 			 
			</pipe>
			
			<!-- get file text from sample file -->
			<pipe name="setFileData" className="nl.nn.adapterframework.pipes.FixedResult" filename="/FilePipe/sample.txt">
			  <forward name="success" path="write file"/>
			</pipe>
			
			<!-- Write file -->
			<pipe
				name="write file"
	        	className="nl.nn.adapterframework.pipes.FilePipe"
	        	actions="write"
	        	filenameSessionKey="filename"
	        	createDirectory="true">
	        	<forward name="success" path="switchAction"/>
	        </pipe>
	        
			<!-- choose which action should be done -->
			<pipe name="switchAction" className="nl.nn.adapterframework.pipes.XmlSwitch" xpathExpression="request/@action" getInputFromSessionKey="originalMessage"/>
						
			<!-- Read file / getInputFromSessionKey -->
			<pipe
				name="read file via getInputFromSessionKey"
	        	className="nl.nn.adapterframework.pipes.FilePipe"
	        	actions="read"
	        	getInputFromSessionKey="filename"	        
	        	>
	        	<forward name="success" path="EXIT"/>
	        </pipe>

			<!-- Read file / filenameSessionKey -->
			<pipe
				name="read file via filenameSessionKey"
	        	className="nl.nn.adapterframework.pipes.FilePipe"
	        	actions="read"
	        	filenameSessionKey="filename">
	        	<forward name="success" path="EXIT"/>
	        </pipe>

			<!-- Read file at classpath -->
			<pipe
				name="read file at classpath"
	        	className="nl.nn.adapterframework.pipes.FilePipe"
	        	actions="read"
	        	getInputFromFixedValue="FilePipe/sample.txt"
	        	fileSource="classpath">
	        	<forward name="success" path="EXIT"/>
	        </pipe>

			<!-- Read binary file as bytes -->
			<pipe
				name="read binary file as bytes"
				className="nl.nn.adapterframework.pipes.FilePipe"
				actions="read"
				outputType="bytes"
				getInputFromFixedValue="FilePipe/file.pdf"
				fileSource="classpath">
			</pipe>
			<pipe name="encode binary file bytes" className="nl.nn.adapterframework.pipes.Base64Pipe">
				<forward name="success" path="EXIT" />
			</pipe>

			<!-- Read binary file as stream -->
			<pipe
				name="read binary file as stream"
				className="nl.nn.adapterframework.pipes.FilePipe"
				actions="read"
				outputType="stream"
				getInputFromFixedValue="FilePipe/file.pdf"
				fileSource="classpath">
			</pipe>
			<pipe name="encode binary file stream" className="nl.nn.adapterframework.pipes.Base64Pipe">
				<forward name="success" path="EXIT" />
			</pipe>

			<!-- Read binary file as base64 -->
			<pipe
				name="read binary file as base64"
				className="nl.nn.adapterframework.pipes.FilePipe"
				actions="read"
				outputType="base64"
				getInputFromFixedValue="FilePipe/file.pdf"
				fileSource="classpath">
				<forward name="success" path="EXIT" />
			</pipe>

			<!-- Delete file with use of directory and fileNam e-->
			<pipe
				name="delete file"
	        	className="nl.nn.adapterframework.pipes.FilePipe"
	        	actions="delete"
	        	filename="test.txt"
	        	directory="${testdata.dir}"
	        	createDirectory="true"
	        	testExists="false"
	        	deleteEmptyDirectory="true">
	        	<forward name="success" path="EXIT"/>
	        </pipe>

			<!-- Delete file without use of directory and filename (filenameSessionKey) -->
			<pipe
				name="delete file no directory specified"
	        	className="nl.nn.adapterframework.pipes.FilePipe"
	        	actions="delete"
	        	filenameSessionKey="filename"
	        >
	        	<forward name="success" path="EXIT"/>
	        </pipe>
	        
	        <!-- Delete file no directory no filename (input) -->
			<pipe
				name="delete file no directory no filename"
	        	className="nl.nn.adapterframework.pipes.FilePipe"
	        	actions="delete"
	        	getInputFromFixedValue="${testdata.dir}/test.txt">
	        	<forward name="success" path="EXIT"/>
	        </pipe>
	        

			<!-- Delete file that does not exist with use of directory -->
			<pipe
				name="delete file that does not exists"
	        	className="nl.nn.adapterframework.pipes.FilePipe"
	        	actions="delete"
	        	filename="none_existing_file.txt"
	        	testExists="false"
	        	directory="${testdata.dir}">
	        	<forward name="success" path="EXIT"/>
	        </pipe>
	    	        	       
			<!-- List files -->
			<pipe
				name="list files"
	        	className="nl.nn.adapterframework.pipes.FilePipe"
	        	actions="list"
	        	filename="dummy*.txt"
	        	testExists="false"
	        	directory="${testdata.dir}">
	        	<forward name="success" path="EXIT"/>
	        </pipe>

			<!-- List files without use of directory -->
			<pipe
				name="list files no directory specified"
	        	className="nl.nn.adapterframework.pipes.FilePipe"
	        	actions="list"
	        	filename="${testdata.dir}/dummy*.txt">
	        	<forward name="success" path="EXIT"/>
	        </pipe>

			<!-- Create file and info -->
			<pipe name="create file" className="nl.nn.adapterframework.pipes.FilePipe"
				actions="create" directory="${testdata.dir}" writeSuffix=".abc">
				<param name="writeSuffix" value=".txt" />
				<forward name="success" path="info file" />
			</pipe>
		
			<pipe name="info file" className="nl.nn.adapterframework.pipes.FilePipe"
				actions="info">
				<forward name="success" path="EXIT" />
			</pipe>
		</pipeline>
	</adapter>
</ibis>