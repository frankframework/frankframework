# Explicit `log.dir` (which would otherwise implicitly be set by the application).
log.dir=/usr/local/tomcat/logs

# Defaults to the local `LOC` stage for ease of use, can/should be overwritten via system properties.
dtap.stage=LOC

# The default directories the Frank!Framework reads from.
shared.loader=/opt/frank/resources/,/opt/frank/resources/*.jar,/opt/frank/configurations/,/opt/frank/configurations/*.jar
configurations.directory=/opt/frank/configurations

# The default directories the Larva tool reads from.
scenariosroot1.directory=/opt/frank/testtool
scenariosroot1.description=embedded testtool directory /opt/frank/testtool
scenariosroot2.directory=/opt/frank/testtool-ext
scenariosroot2.description=external testtool directory /opt/frank/testtool-ext

# Permissions for the `log viewer`, which directories it may and may not read from.
FileViewer.permission.rules=${credentialFactory.filesystem.root} * deny | /usr/local/tomcat/logs * allow | /opt/frank * allow

# Enables the `Frank!Framework CredentialManager Capability`, this allows property substitution in Tomcat settings, such as the `context.xml`.
org.apache.tomcat.util.digester.PROPERTY_SOURCE=org.apache.tomcat.util.digester.EnvironmentPropertySource,org.frankframework.credentialprovider.CredentialProvidingPropertySource
credentialFactory.filesystem.root=/opt/frank/secrets
credentialFactory.class=nl.nn.credentialprovider.FileSystemCredentialFactory

# Allow Frank!Framework `Web Resources` to be loaded in directly.
tomcat.util.scan.StandardJarScanFilter.jarsToSkip=*.jar
tomcat.util.scan.StandardJarScanFilter.jarsToScan=frankframework-*.jar

# The Frank!Framework runs on HTTP by default. It can be secured with a reverse proxy or by overriding this property with a system property (more configuration is needed).
application.security.http.transportGuarantee=NONE
