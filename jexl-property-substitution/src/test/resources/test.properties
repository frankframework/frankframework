test.v1 = 3
test.v2 = 2

# Looking up other properties in the expression needs to be resolved via ${...} syntax, otherwise it will be
# interpreted as if "v1" and "v2" are properties on an object "test", which doesn't exist
test.vmin = ${=Math.min(${test.v1}, ${test.v2})}

# test.v3 should be added as system property instead of defined in the file
factor = ${test.v3}

# Direct reference can be made to property that doesn't contain a dot
test.expr1 = ${= ${test.vmin} * factor }

# Embedded expression should be used to reference properties that do contain dots
test.expr2 = ${= ${test.vmin} * ${test.v3} }

str.c1 = We
str.c2 = Are

str.switch = F

str.text1 = ${=StringUtil.concat(" ", "${str.c1}", "${str.c2}", ('${str.switch}' == 'F' ? "Frank" : "IBIS")) }
str.text2 = ${= "${str.c1} ${str.c2} " + ('${str.switch}' == 'F' ? "Frank" : "IBIS") }

sc1=${str.c1}
sc2=${str.c2}
switch=${str.switch}
str.text3 = ${= "%s %s %s".formatted(sc1, sc2, switch == 'F' ? "Frank" : "IBIS")}

inp=${str.text2}
str.transform1 = ${= StringUtil.safeCollectionToString(StringUtil.splitToStream(inp, " ").map(s -> StringUtil.lcFirst(s)).toList()) }
