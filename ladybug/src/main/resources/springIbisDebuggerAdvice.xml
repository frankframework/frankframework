<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation=
		"
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		"
	>

	<bean name="ibisDebugger" class="org.frankframework.ibistesttool.Debugger" autowire="byName"/>

	<bean
		name="ibisDebuggerAdvice,threadLifeCycleEventListener,xmlDebugger"
		class="org.frankframework.ibistesttool.IbisDebuggerAdvice"
		autowire="byName"
	/>

	<aop:config proxy-target-class="true">
		<aop:aspect ref="ibisDebuggerAdvice">
			<aop:around
				pointcut=
					"
					execution(
						*
						org.frankframework.processors.CorePipeLineProcessor.processPipeLine(
							..
						)
					)
					and
					args(pipeLine, messageId, message, pipeLineSession, ..)
					"
				method="debugPipeLineInputOutputAbort"
				arg-names="pipeLine, messageId, message, pipeLineSession"
			/>
			<aop:around
				pointcut=
					"
					execution(
						*
						org.frankframework.processors.InputOutputPipeProcessor.processPipe(
							org.frankframework.core.PipeLine,
							org.frankframework.core.IPipe,
							org.frankframework.stream.Message,
							org.frankframework.core.PipeLineSession
						)
					)
					and
					args(pipeLine, pipe, message, pipeLineSession)
					"
				method="debugPipeInputOutputAbort"
				arg-names="pipeLine, pipe, message, pipeLineSession"
			/>
			<aop:around
				pointcut=
					"
					execution(
						*
						org.frankframework.processors.LimitingParallelExecutionPipeProcessor.processPipe(
							org.frankframework.core.PipeLine,
							org.frankframework.core.IPipe,
							org.frankframework.stream.Message,
							org.frankframework.core.PipeLineSession
						)
					)
					and
					args(pipeLine, pipe, message, pipeLineSession)
					"
				method="debugPipeGetInputFrom"
				arg-names="pipeLine, pipe, message, pipeLineSession"
			/>
			<aop:around
				pointcut=
					"
					execution(
						*
						org.frankframework.processors.LimitingParallelExecutionPipeProcessor.validate(
							org.frankframework.core.PipeLine,
							org.frankframework.core.IValidator,
							org.frankframework.stream.Message,
							org.frankframework.core.PipeLineSession,
							String
						)
					)
					and
					args(pipeLine, validator, message, pipeLineSession, messageRoot)
					"
				method="debugValidatorInputOutputAbort"
				arg-names="pipeLine, validator, message, pipeLineSession, messageRoot"
			/>
			<aop:around
				pointcut=
					"
					execution(
						*
						org.frankframework.core.ISender.sendMessage(
							org.frankframework.stream.Message,
							org.frankframework.core.PipeLineSession
						)
					)
					and
					args(message, session)
					"
				method="debugSenderWithForwardInputOutputAbort"
				arg-names="message, session"
			/>
			<aop:around
				pointcut=
					"
					execution(
						*
						org.frankframework.core.ISender.sendMessageOrThrow(
							org.frankframework.stream.Message,
							org.frankframework.core.PipeLineSession
						)
					)
					and
					args(message, session)
					"
				method="debugSenderInputOutputAbort"
				arg-names="message, session"
			/>
			<aop:around
				pointcut=
					"
					execution(
						*
						org.frankframework.core.IBlockEnabledSender+.sendMessage(
							*,
							org.frankframework.stream.Message,
							org.frankframework.core.PipeLineSession
						)
					)
					and
					args(blockHandle, message, session)
					"
				method="debugBlockEnabledSenderInputOutputAbort"
				arg-names="blockHandle, message, session"
			/>
			<aop:around
				pointcut=
					"
					execution(
						*
						org.frankframework.processors.CacheSenderWrapperProcessor.sendMessage(
							org.frankframework.senders.SenderWrapperBase,
							org.frankframework.stream.Message,
							org.frankframework.core.PipeLineSession
						)
					)
					and
					args(senderWrapperBase, message, session)
					"
				method="debugSenderGetInputFrom"
				arg-names="senderWrapperBase, message, session"
			/>
			<aop:around
				pointcut=
					"
					execution(
						*
						org.frankframework.processors.CoreListenerProcessor.getMessage(
							org.frankframework.core.ICorrelatedPullingListener,
							String, org.frankframework.core.PipeLineSession
						)
					)
					and
					args(listener, correlationId, pipeLineSession)
					"
				method="debugReplyListenerInputOutputAbort"
				arg-names="listener, correlationId, pipeLineSession"
			/>
			<aop:around
				pointcut=
					"
					execution(
						*
						org.springframework.core.task.TaskExecutor.execute(
							Runnable
						)
					)
					and
					args(runnable)
					"
				method="debugThreadCreateStartEndAbort"
				arg-names="runnable"
			/>
			<aop:around
				pointcut=
					"
					execution(
						*
						org.frankframework.parameters.IParameter.getValue(
							org.frankframework.parameters.ParameterValueList,
							org.frankframework.stream.Message,
							org.frankframework.core.PipeLineSession,
							boolean
						)
					)
					and
					args(alreadyResolvedParameters, message, session, namespaceAware)
					"
				method="debugParameterResolvedTo"
				arg-names="alreadyResolvedParameters, message, session, namespaceAware"
			/>
		</aop:aspect>
	</aop:config>

</beans>
