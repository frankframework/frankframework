/*
   Copyright 2018-2020 Nationale-Nederlanden, 2020-2024 WeAreFrank!

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package org.frankframework.ibistesttool.larva;

import nl.nn.testtool.Checkpoint;
import nl.nn.testtool.Report;
import nl.nn.testtool.extensions.CustomReportAction;
import nl.nn.testtool.extensions.CustomReportActionResult;

import nu.studer.java.util.OrderedProperties;
import org.apache.commons.lang3.function.TriConsumer;
import org.apache.commons.lang3.function.TriFunction;
import org.frankframework.util.PropertyLoader;
import org.frankframework.util.XmlUtils;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.OptionalInt;
import java.util.Properties;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.stream.Stream;

public class ConvertToLarvaAction implements CustomReportAction {

	private Path dir;

	@Override
	public String getButtonText() {
		return "Convert to Larva";
	}

	public void setReportsFolder(String dir) {
		this.dir = Paths.get(dir, "autogenerated");
	}

	@Override
	public CustomReportActionResult handleReports(List<Report> reports) {
		List<Report> successReports = new ArrayList<>();
		CustomReportActionResult customReportActionResult = new CustomReportActionResult();
		StringBuilder additionalErrors = new StringBuilder();

		for (Report report : reports) {
			HashMap<Path, String> originalFiles = new HashMap<>();
			HashSet<Path> newFiles = new HashSet<>();
			String reportName = report.getName();

			BiConsumer<List<Map.Entry<Path, String>>, List<Path>> addModifiedFiles = (or, nr) -> {
				nr.forEach(path -> {
					if (!originalFiles.containsKey(path)) newFiles.add(path);
				});
				or.forEach(entry -> {
					if (!newFiles.contains(entry.getKey())) originalFiles.putIfAbsent(entry.getKey(), entry.getValue());
				});
			};

			Function<ActionResponse<?>, Boolean> handleActionResponse = (actionResponse) -> {
				addModifiedFiles.accept(actionResponse.originalResources, actionResponse.newResources);
				if (actionResponse.error != null) {
					addErrorToResult(customReportActionResult, reportName, actionResponse.error, cleanupModifiedFiles(originalFiles, newFiles));
					return false;
				}
				return true;
			};

			ActionResponse<Boolean> checkReportType = checkReportType(reportName);
			if (!handleActionResponse.apply(checkReportType)) continue;

			String adapterName = reportName.substring(9);
			Path testDir = dir.resolve(adapterName);
			ActionResponse<Boolean> tryCreateDir = tryCreateDir(testDir);
			if (!handleActionResponse.apply(tryCreateDir)) continue;

			ActionResponse<String> tryGetScenarioSuffix = tryGetScenarioSuffix(testDir);
			if (!handleActionResponse.apply(tryGetScenarioSuffix)) continue;
			String scenarioSuffix = tryGetScenarioSuffix.response;

			Path scenarioDir = testDir.resolve(scenarioSuffix);
			Path scenarioFile = testDir.resolve("scenario" + scenarioSuffix + ".properties");
			Path commonFile = testDir.resolve("common.properties");
			ActionResponse<Boolean> checkScenarioDirNotInUse = checkScenarioDirNotInUse(scenarioDir);
			if (!handleActionResponse.apply(checkScenarioDirNotInUse)) continue;
			ActionResponse<Boolean> tryCreateCommonFile = tryCreateCommonFile(commonFile);
			if (!handleActionResponse.apply(tryCreateCommonFile)) continue;

			// Create scenario with the properties resolved earlier
			Scenario scenario = new Scenario(report, scenarioDir, scenarioFile, commonFile, adapterName, addModifiedFiles);
			// If creating the scenario created additional errors, add them to the list of additional errors
			if (!scenario.errors.isEmpty()) {
				additionalErrors.append("\t[").append(report).append("]: ").append(String.join("\r\n", scenario.errors));
			}
			successReports.add(report);
		}

		//If there are additional errors, append them to the existing error message
		if (additionalErrors.length() != 0) {
			String oldError = customReportActionResult.getErrorMessage();
			customReportActionResult.setErrorMessage(
					(oldError != null && !oldError.isEmpty() ? oldError + "\r\n" : "") +
							"Errors while generating test scenarios: \r\n" +
							additionalErrors
			);
		}
		customReportActionResult.setSuccessMessage("Generated larva test scenario(s) for reports: " + successReports);
		return customReportActionResult;
	}

	private ActionResponse<Boolean> checkReportType(String reportName) {
		if (!reportName.startsWith("Pipeline ")) {
			return ActionResponse.ActionResponseError("This not a pipeline report. Test generation isn't implemented for this type of report.");
		}
		return new ActionResponse<>();
	}

	private ActionResponse<Boolean> tryCreateDir(Path testDir) {
		try {
			// Tries to create dir and parents. Does not throw error if it/they already exist(s)
			Files.createDirectories(testDir);
		} catch (IOException e) {
			return ActionResponse.ActionResponseError("Could not create test directory [" + testDir.toAbsolutePath().normalize() + "]");
		}
		return new ActionResponse<>();
	}

	private ActionResponse<String> tryGetScenarioSuffix(Path testDir) {
		String scenarioSuffix;
		try (Stream<Path> list = Files.list(testDir)) {
			//Get the highest suffix found in the directory, both in file and directory names
			OptionalInt maxSuffix = list.mapToInt(path -> {
				String fileName = path.getFileName().toString();
				if (Files.isDirectory(path)) {
					if (fileName.matches("\\d+")) {
						return Integer.parseInt(fileName);
					}
				} else if (fileName.matches("scenario\\d+.properties")) {
					return Integer.parseInt(fileName.substring(8,fileName.indexOf(".")));
				}
				return -1;
			}).max();
			if (maxSuffix.isPresent()) {
				scenarioSuffix = String.format("%0" + 2 + "d", maxSuffix.getAsInt() + 1);
			} else {
				scenarioSuffix = "01";
			}
		} catch (IOException e) {
			return ActionResponse.ActionResponseError("Could not count existing scenarios in test directory [" + testDir.toAbsolutePath().normalize() + "]");
		}
		return new ActionResponse<>(scenarioSuffix);
	}

	private ActionResponse<Boolean> checkScenarioDirNotInUse(Path scenarioDir) {
		if (!Files.exists(scenarioDir)) {
			try {
				Files.createDirectory(scenarioDir);
			} catch (IOException e) {
				return ActionResponse.ActionResponseError("Could not create scenario directory [" + scenarioDir.toAbsolutePath().normalize() + "]");
			}
		} else {
			try(Stream<Path> files = Files.list(scenarioDir)) {
				if (files.findAny().isPresent()) {
					return ActionResponse.ActionResponseError("Scenario directory [" + scenarioDir.toAbsolutePath().normalize() + "] already exists and is not empty");
				}
			} catch (IOException e) {
				return ActionResponse.ActionResponseError("Scenario directory [" + scenarioDir.toAbsolutePath().normalize() + "] already exists and could not be checked for files inside of it");
			}
		}
		return new ActionResponse<>();
	}

	private ActionResponse<Boolean> tryCreateCommonFile(Path commonFile) {
		try {
			Files.createFile(commonFile);
		} catch (FileAlreadyExistsException e) {
			return new ActionResponse<>();
		} catch (IOException e) {
			return ActionResponse.ActionResponseError("Could not create common file [" + commonFile.toAbsolutePath().normalize() + "]");
		}
		return new ActionResponse<Boolean>().setNewResources(commonFile);
	}

	private void addErrorToResult(CustomReportActionResult customReportActionResult, String reportName, String reason, String cleanupResult) {
		String oldError = customReportActionResult.getErrorMessage();
		customReportActionResult.setErrorMessage(
				(oldError != null && !oldError.isEmpty() ? oldError : "Following reports could not be converted:") +
						"\r\n\t[" + reportName + "]: " + reason + "\r\n" + cleanupResult
		);
	}

	public static String stepPadding(int i) {
		return String.format("%0" + 2 + "d", i);
	}

	private String cleanupModifiedFiles(HashMap<Path, String> originalResources, HashSet<Path> newResources) {
		List<String> errors = new ArrayList<>();
		originalResources.forEach((path, original) -> {
			try {
				Files.writeString(path, original);
			} catch (IOException e) {
				errors.add("Modified file [" + path + "] could not be reverted.");
			}
		});
		newResources.forEach(path -> {
			try {
				Files.delete(path);
			} catch (IOException e) {
				errors.add("Created file [" + path + "] could not be deleted.");
			}
		});
		if (errors.isEmpty()) return "\t\tChanges were reverted successfully";
		return "\t\tSome changes could not be reverted:\r\n\t\t\t" + String.join("\r\n\t\t\t", errors);
	}

	private static class ActionResponse<T> {
		String error;
		T response;
		List<Path> newResources = new ArrayList<>();
		List<Map.Entry<Path, String>> originalResources = new ArrayList<>();

		public static <T> ActionResponse<T> ActionResponseError(String error) {
			ActionResponse<T> ar = new ActionResponse<>();
			ar.error = error;
			return ar;
		}

		public ActionResponse() {}
		public ActionResponse(T response) {
			this.response = response;
		}

		public ActionResponse<T> setNewResources(Path ...newResources) {
			this.newResources = List.of(newResources);
			return this;
		}

		public ActionResponse<T> setOriginalResources(Map.Entry<Path, String> ...originalResources) {
			this.originalResources = List.of(originalResources);
			return this;
		}
	}

	private static class Scenario {


		private static final HashSet<String> allowedSenders = new HashSet<>(Arrays.asList(
				"org.frankframework.senders.DelaySender",
				"org.frankframework.senders.EchoSender",
				"org.frankframework.senders.IbisLocalSender",
				"org.frankframework.senders.LogSender",
				"org.frankframework.senders.ParallelSenders",
				"org.frankframework.senders.SenderSeries",
				"org.frankframework.senders.SenderWrapper",
				"org.frankframework.senders.XsltSender",
				"org.frankframework.senders.CommandSender",
				"org.frankframework.senders.FixedResultSender",
				"org.frankframework.senders.JavascriptSender",
				"org.frankframework.jdbc.MessageStoreSender",
				"org.frankframework.senders.ReloadSender",
				"org.frankframework.compression.ZipWriterSender"
		));

		private static final HashSet<String> ignoredSessionKeys = new HashSet<>(Arrays.asList(
				"cid",
				"mid",
				"id",
				"key",
				"messageId",
				"originalMessage",
				"tcid",
				"tsReceived",
				"conversationId",
				"timestamp",
				"tsSent",
				"xPathLogKeys",
				"replyTo",
				"JmsSession",
				"servletResponse",
				"servletRequest",
				"servletContext",
				"securityHandler",
				"__isManualRetry"
		));

		public List<String> errors = new ArrayList<>();

		public Scenario(Report report, Path scenarioDir, Path scenario, Path common, String adapterName, BiConsumer<List<Map.Entry<Path, String>>, List<Path>> addModfiedFiles) {
			Map<String, String> existingStubs = new HashMap<>();

			String scenarioDirPrefix = scenarioDir.getFileName().toString() + "/";
			File scenarioFile = scenario.toFile();
			File commonFile = common.toFile();

			OrderedProperties.OrderedPropertiesBuilder commonBuilder = new OrderedProperties.OrderedPropertiesBuilder();
			commonBuilder.withOrdering(new CommonPropertiesComparator());
			commonBuilder.withSuppressDateInComment(true);
			OrderedProperties commonProperties = commonBuilder.build();

			Properties currentCommonProps = new Properties();
			try {
				InputStream stream = Files.newInputStream(common);
				currentCommonProps.load(stream);
			} catch (IOException e) {
				errors.add("Could not read common.properties [" + common + "]");
			}
			currentCommonProps.forEach((key, value) -> {
				if (key instanceof String && value instanceof String) {
					commonProperties.setProperty((String) key, (String) value);
					if (((String) key).matches("\\.stub.[a-zA-Z0-9-_.]+\\.serviceName")) {
						existingStubs.put((String) value, ((String) key).substring(5, ((String) key).lastIndexOf('.')));
					}
				}
			});

			OrderedProperties.OrderedPropertiesBuilder scenarioBuilder = new OrderedProperties.OrderedPropertiesBuilder();
			scenarioBuilder.withOrdering(new ScenarioPropertiesComparator());
			scenarioBuilder.withSuppressDateInComment(true);
			OrderedProperties scenarioProperties = scenarioBuilder.build();

			scenarioProperties.setProperty("scenario.description", "Test scenario for adapter " + adapterName + ", automatically generated based on a ladybug report");
			scenarioProperties.setProperty("include", "common.properties");
			String adapterProperty = "adapter." + adapterName.replaceAll("\\s","-");

			List<Checkpoint> checkpoints = report.getCheckpoints();
			int paramI = 1;
			int current_step_nr = 1;

			String adapterInputMessage = checkpoints.get(0).getMessage();
			String adapterInputFileName = createFileName(current_step_nr, "adapter", adapterName, true, adapterInputMessage);
			scenarioProperties.setProperty("step" + current_step_nr + "." + adapterProperty + ".write", scenarioDirPrefix + adapterInputFileName);
			createInputOutputFile(scenarioDir, adapterInputFileName, adapterInputMessage);

			commonProperties.setProperty(adapterProperty + ".className", "org.frankframework.senders.IbisJavaSender");
			commonProperties.setProperty(adapterProperty + ".serviceName", "testtool-" + adapterName);
			commonProperties.setProperty(adapterProperty + ".convertExceptionToMessage", "true");

			boolean skipUntilEndOfSender = false;
			String skipUntilEndOfSenderName = "";
			int skipUntilEndOfSenderLevel = -1;

			for (Checkpoint checkpoint : checkpoints) {
				if (skipUntilEndOfSender) {
					//If we're currently stubbing a sender, and we haven't reached the end of it yet
					String checkpointName = checkpoint.getName().substring(7);
					if (checkpoint.getLevel() == skipUntilEndOfSenderLevel && checkpoint.getType() == Checkpoint.TYPE_ENDPOINT && checkpointName.equals(skipUntilEndOfSenderName)) {
						String senderResponseMessage = checkpoint.getMessage();
						String senderResponseFileName = createFileName(++current_step_nr, "stub", checkpointName, false, senderResponseMessage);
						scenarioProperties.setProperty(
								"step" + current_step_nr + ".stub." + checkpointName.replaceAll("\\s","-") + ".write",
								scenarioDirPrefix + senderResponseFileName);
						createInputOutputFile(scenarioDir, senderResponseFileName, senderResponseMessage);
						skipUntilEndOfSender = false;
					}
				} else if (checkpoint.getType() == Checkpoint.TYPE_STARTPOINT && checkpoint.getName().startsWith("Sender ")) {
					if (!allowedSenders.contains(checkpoint.getSourceClassName())) {
						//If sender should be stubbed:
						String senderName = checkpoint.getName().substring(7, checkpoint.getName().length() - 7);
						String senderProperty = "stub." + senderName.replaceAll("\\s","-");
						String senderInputMessage = checkpoint.getMessage();
						String senderInputFileName = createFileName(++current_step_nr, "stub", senderName, true, senderInputMessage);
						scenarioProperties.setProperty(
								"step" + current_step_nr + ".stub" + senderProperty + ".read",
								scenarioDirPrefix + senderInputFileName);
						createInputOutputFile(scenarioDir, senderInputFileName, senderInputMessage);

						String serviceName = "testtool-" + senderName;
						String existingStubName = existingStubs.get(serviceName.toLowerCase());
						if (!senderProperty.equals(existingStubName)) {
							existingStubs.put(serviceName.toLowerCase(), senderProperty);
							commonProperties.setProperty(senderProperty + ".className", "org.frankframework.receivers.JavaListener");
							commonProperties.setProperty(senderProperty + ".serviceName", serviceName);

							if (existingStubName != null) {
								commonProperties.removeProperty(existingStubName + ".className");
								commonProperties.removeProperty(existingStubName + ".serviceName");
								try {
									replaceStubName(scenario.getParent(), existingStubName, senderProperty);
								} catch (IOException e) {
									errors.add("Could not replace old stub name [" + existingStubName + "] with new stub name [" + senderProperty + "]");
								}
							}
						}

						skipUntilEndOfSender = true;
						skipUntilEndOfSenderName = senderName;
						skipUntilEndOfSenderLevel = checkpoint.getLevel() + 1;
					}
				} else if (checkpoint.getLevel() == 1 && checkpoint.getType() == Checkpoint.TYPE_INPUTPOINT && checkpoint.getName().startsWith("SessionKey ")) {
					//SessionKey for listener found
					String sessionKeyName = checkpoint.getName().substring(11);
					if (!ignoredSessionKeys.contains(sessionKeyName)) {
						scenarioProperties.setProperty(adapterProperty + ".param" + paramI + ".name", sessionKeyName);
						scenarioProperties.setProperty(adapterProperty + ".param" + paramI + ".value", checkpoint.getMessage());
						paramI++;
					}
				}
			}
			if (skipUntilEndOfSender) {
				errors.add("Response of sender: [" + skipUntilEndOfSenderName + "] could not be found. Cause is likely a faulty ladybug report");
			}
			String adapterOutputMessage = checkpoints.get(checkpoints.size() - 1).getMessage();
			String adapterOutputFileName = createFileName(++current_step_nr, "adapter", adapterName, false, adapterOutputMessage);
			scenarioProperties.setProperty("step" + current_step_nr + "." + adapterProperty + ".read", scenarioDirPrefix + adapterOutputFileName);
			createInputOutputFile(scenarioDir, adapterOutputFileName, adapterOutputMessage);

			try (OutputStreamWriter scenarioWriter = new OutputStreamWriter(Files.newOutputStream(scenarioFile.toPath()), StandardCharsets.UTF_8);) {
				scenarioProperties.store(scenarioWriter, null);
			} catch (IOException e) {
				errors.add("Could not write properties to file [" + scenarioFile + "]");
			}
			try (OutputStreamWriter commonWriter = new OutputStreamWriter(Files.newOutputStream(commonFile.toPath()), StandardCharsets.UTF_8)) {
				commonProperties.store(commonWriter, null);
			} catch (IOException e) {
				errors.add("Could not write properties to file [" + commonFile + "]");
			}
		}

		private static void replaceStubName(Path folder, String oldStubName, String newStubName) throws IOException {
			if (oldStubName.equals(newStubName)) {
				return;
			}
			File[] scenarios = folder.toFile().listFiles((dir, name) -> name.matches("scenario\\d*\\.properties"));
			assert scenarios != null;
			for (File scenario : scenarios) {
				List<String> result = Files.readAllLines(scenario.toPath());
				boolean changed = false;
				for (int i = 0; i < result.size(); i++) {
					String line = result.get(i);
					if (line.contains(oldStubName + ".read") || line.contains(oldStubName + ".write")) {
						result.set(i, line.replace(oldStubName, newStubName));
						changed = true;
					}
				}
				if (changed) Files.write(scenario.toPath(), result);
			}
		}

		private String createFileName(int step, String type, String name, boolean startPoint, String message) {
			return String.format("%s-%s-%s-%s%s",
					stepPadding(step),
					type,
					name,
					startPoint ? "in" : "out",
					XmlUtils.isWellFormed(message) ? ".xml" : ".txt"
			);
		}

		private void createInputOutputFile(Path folder, String fileName, String message) {
			File messageFile = folder.resolve(fileName).toFile();
			try {
				if (messageFile.createNewFile()) {
					Files.writeString(messageFile.toPath(), message);
				}
			} catch (IOException e) {
				errors.add("Could not create message file: [" + messageFile + "]");
			}
		}
	}

}
