<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<digester-rules>
	<!-- Rules are parsed with the DigesterRuleParser. Objects will be created with the Spring Beans Factory. -->
	<!-- See DigesterRule for more information -->

	<rule pattern="configuration" factory="null"/>

	<rule pattern="*/include" registerMethod="registerInclude" beanClass="nl.nn.adapterframework.configuration.Include" />

	<rule pattern="configuration/jmsRealms" registerMethod="setJmsRealms" factory="nl.nn.adapterframework.configuration.digester.JmsRealmsFactory"/>
	<rule pattern="*/jmsRealm" registerMethod="registerJmsRealm" beanClass="nl.nn.adapterframework.jms.JmsRealm"/>

	<rule pattern="configuration/sapSystems" registerMethod="setSapSystems" beanClass="nl.nn.adapterframework.configuration.extensions.SapSystems"/>
	<rule pattern="*/sapSystem" registerMethod="registerSapSystem" beanClass="nl.nn.adapterframework.extensions.sap.SapSystem" selfRegisterMethod="registerItem"/>

	<rule pattern="*/adapter" registerMethod="registerAdapter" beanClass="nl.nn.adapterframework.core.Adapter"/>
	<rule pattern="*/adapter/pipeline" registerMethod="setPipeLine" beanClass="nl.nn.adapterframework.core.PipeLine"/>
	<rule pattern="*/errorMessageFormatter" registerMethod="setErrorMessageFormatter" beanClass="nl.nn.adapterframework.errormessageformatters.XslErrorMessageFormatter"/>

	<rule pattern="*/receiver" registerMethod="registerReceiver" beanClass="nl.nn.adapterframework.receivers.Receiver"/>
	<!-- Also applied for monitors -->
	<rule pattern="*/sender" registerMethod="setSender" beanClass="nl.nn.adapterframework.core.ISender" />
	<rule pattern="*/sender" registerMethod="registerSender" beanClass="nl.nn.adapterframework.core.ISender" /> <!-- to tell FrankDoc about multiplicity of SenderSeries and ParallelSenders. Duplicate pattern will be suppressed by core digester -->
	<rule pattern="*/listener" factory="nl.nn.adapterframework.configuration.digester.ListenerFactory" registerMethod="setListener"/>
	<rule pattern="*/errorSender" registerMethod="setErrorSender" beanClass="nl.nn.adapterframework.core.ISender"/>
	<rule pattern="*/messageLog" registerMethod="setMessageLog"/>
	<rule pattern="*/inProcessStorage" registerMethod="setInProcessStorage"/>
	<rule pattern="*/errorStorage" registerMethod="setErrorStorage"/>
	<rule pattern="*/inputValidator" registerMethod="setInputValidator"/>
	<rule pattern="*/outputValidator" registerMethod="setOutputValidator"/>
	<rule pattern="*/inputWrapper" registerMethod="setInputWrapper"/>
	<rule pattern="*/outputWrapper" registerMethod="setOutputWrapper"/>

	<rule pattern="*/pipe" registerMethod="addPipe" paramtype="nl.nn.adapterframework.core.IPipe" beanClass="nl.nn.adapterframework.pipes.SenderPipe"/>

	<!-- forward element is on the pipeline / global-forward as well as on the pipe element -->
	<rule pattern="*/global-forwards" registerMethod="setGlobalForwards"/>
	<rule pattern="*/forward" registerMethod="registerForward" beanClass="nl.nn.adapterframework.core.PipeForward"/>
	<rule pattern="*/child" registerMethod="registerChild"/>
	<rule pattern="*/outputFields" registerMethod="registerOutputFields"/>
	<rule pattern="*/inputFields" registerMethod="registerInputFields"/>
	<rule pattern="*/exits" registerMethod="setPipeLineExits"/>
	<rule pattern="*/exit" registerMethod="registerPipeLineExit" beanClass="nl.nn.adapterframework.core.PipeLineExit"/>

	<rule pattern="configuration/scheduler" registerMethod="setScheduleManager"/>
	<rule pattern="*/job" factory="nl.nn.adapterframework.configuration.digester.JobFactory" registerMethod="registerScheduledJob"/>
	<rule pattern="*/locker" registerMethod="setLocker" beanClass="nl.nn.adapterframework.util.Locker"/>
	<rule pattern="*/param" registerMethod="addParameter" beanClass="nl.nn.adapterframework.parameters.Parameter"/>
	<rule pattern="*/directoryCleaner" registerMethod="addDirectoryCleaner" beanClass="nl.nn.adapterframework.util.DirectoryCleaner"/>

	<!-- batch related rules -->
	<rule pattern="*/readerFactory" registerMethod="setReaderFactory"/>
	<rule pattern="*/manager" registerMethod="registerManager"/>
	<rule pattern="*/manager/flow" registerMethod="addHandler" beanClass="nl.nn.adapterframework.batch.RecordHandlingFlow" />
	<rule pattern="*/recordHandler" registerMethod="registerRecordHandler"/>
	<rule pattern="*/resultHandler" registerMethod="registerResultHandler"/>

<!-- 	<rule pattern="*/statisticsHandler" registerMethod="registerStatisticsHandler" beanClass="nl.nn.adapterframework.statistics.StatisticsKeeperIterationHandler"/> -->
<!-- 	<rule pattern="*/statisticsHandlers" registerMethod="registerStatisticsHandler" paramtype="nl.nn.adapterframework.statistics.StatisticsKeeperIterationHandler" beanClass="nl.nn.adapterframework.statistics.StatisticsKeeperIterationHandlerCollection"/> -->
	<rule pattern="*/cache" registerMethod="setCache" beanClass="nl.nn.adapterframework.cache.EhCache"/>

	<!-- Digester rules for monitoring -->
	<rule pattern="configuration/monitoring" registerMethod="setMonitoring" factory="nl.nn.adapterframework.monitoring.MonitoringFactory"/>

	<rule pattern="*/destination" registerMethod="registerDestination" beanClass="nl.nn.adapterframework.monitoring.IMonitorAdapter"/>

	<rule pattern="*/monitor" registerMethod="addMonitor" beanClass="nl.nn.adapterframework.monitoring.Monitor"/>

	<rule pattern="*/monitor/trigger" registerMethod="registerTrigger" beanClass="nl.nn.adapterframework.monitoring.Trigger"/>
	<rule pattern="*/monitor/trigger/event" registerTextMethod="addEventCode"/>

	<rule pattern="*/adapterfilter" registerMethod="registerAdapterFilter" beanClass="nl.nn.adapterframework.monitoring.AdapterFilter"/>
	<rule pattern="*/adapterfilter/source" registerTextMethod="registerSubObject"/>
</digester-rules>
