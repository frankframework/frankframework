#
# SqlTranslationPatterns.properties
#
# Specifies sources regexes and replacement targets for SQL translation between SQL dialects
# For each required translation specify:
# <labelname>.source.<source sql dialect>=<regex>
# <labelname>.target.<target sql dialect>=<replacement>
# Use $0 in a replacement pattern to obtain the full source match
# If no target replacement is found for a source pattern for a given label, or the replacement is equal to $0,
# then the translation is ignored for that label.
#

nextval.source.Oracle=(\w+)\.NEXTVAL
nextval.target.MS_SQL=NEXT VALUE FOR $1
nextval.target.MySql =NULL

currval.source.Oracle=(\w+)\.CURRVAL
currval.target.MS_SQL=(SELECT current_value FROM sys.sequences WHERE name = '$1')
currval.target.MySql =NULL

seq_minval.source.Oracle=(CREATE\s+SEQUENCE.*)MINVALUE\s+-\d{18,}(.*)
seq_minval.target.H2    =$1MINVALUE -999999999999999999$2

seq_maxval.source.Oracle=(CREATE\s+SEQUENCE.*)MAXVALUE\s+\d{18,}(.*)
seq_maxval.target.H2    =$1MAXVALUE 999999999999999999$2
seq_maxval.target.MS_SQL=$1MAXVALUE 999999999999999999999999999$2

empty_blob.source.Oracle=EMPTY_BLOB\(\)
empty_blob.target.H2    =''
empty_blob.target.MS_SQL=0x
empty_blob.target.MySql =NULL

empty_clob.source.Oracle=EMPTY_CLOB\(\)
empty_clob.target.H2    =''
empty_clob.target.MS_SQL=0x
empty_clob.target.MySql =NULL

sysdate.source.Oracle=SYSDATE
sysdate.target.H2    =SYSDATE
sysdate.target.MS_SQL=GETDATE()
sysdate.target.MySql= SYSDATE()

systimestamp.source.Oracle=SYSTIMESTAMP
systimestamp.target.H2    =SYSTIMESTAMP
systimestamp.target.MS_SQL=CURRENT_TIMESTAMP
systimestamp.target.MySql =CURRENT_TIMESTAMP()

dual.source.Oracle=\s*FROM DUAL
dual.target.H2    =
dual.target.MS_SQL=

for_update.source.Oracle=SELECT(\s+\w+)\s+FROM(\s+\w+\s)WHERE(\s\w+)(\s*=.*)FOR\s+UPDATE
for_update.target.H2    =SELECT$1,$3 FROM $2 WHERE $3$4FOR UPDATE

limit.source.Oracle=FETCH FIRST ([0-9]+) ROWS ONLY
limit.target.H2    =LIMIT $1
limit.target.MS_SQL=
limit.target.MySql =LIMIT $1

grouping.source.Oracle=LISTAGG\((.*),(.*)\)\s*WITHIN\s+GROUP\s*\(ORDER\s+BY(.*)\)
grouping.target.H2    =group_concat($1 ORDER BY $3 SEPARATOR $2)

constraints01.source.Oracle=\s*INITIALLY\s+?(IMMEDIATE|DEFERRED)?
constraints01.target.H2    =

constraints02.source.Oracle=\s*(ENABLE\s+|DISABLE\s+)?VALIDATE
constraints02.target.H2    =

constraints03.source.Oracle=\s*(NOT\s+)?DEFERRABLE
constraints03.target.H2    =

constraints04.source.Oracle=\s*(NO)?MONITORING
constraints04.target.H2    =

constraints05.source.Oracle=\s*(NO)?COMPRESS
constraints05.target.H2    =

constraints06.source.Oracle=\s*(NO)?LOGGING
constraints06.target.H2    =

constraints07.source.Oracle=\s*(UN)?RECOVERABLE

constraints08.source.Oracle=\s*(NO)?PARALLEL
constraints08.target.H2    =

constraints09.source.Oracle=\s*(NO)?CYCLE

constraints10.source.Oracle=\s*NOORDER
constraints10.target.H2    =

constraints11.source.Oracle=\s*NOCACHE
constraints11.target.H2    =

constraints12.source.Oracle=\s*CACHE\s+\d+

number_precision.source.Oracle=NUMBER\(\s*\*\s*,\s*(\d+)\s*\)
number_precision.target.H2    =NUMBER(38, $1)

drop_sequence.source.Oracle=DROP\s+SEQUENCE\s+(\w+)
drop_sequence.target.H2    =DROP SEQUENCE IF EXISTS $1

create_trigger.source.Oracle=CREATE\s+OR\s+REPLACE\s+TRIGGER\s+.*END;
create_trigger.target.H2    =

alter_trigger.source.Oracle=ALTER\s+TRIGGER\s+(\w+)\s+(\w+);
alter_trigger.target.H2    =

exit.source.Oracle=EXIT;?
exit.target.H2    =

set_define_off.source.Oracle=SET\s+DEFINE\s+(\w+);
set_define_off.target.H2    =

create_index.source.Oracle=(CREATE\s+(?:UNIQUE\s+)?INDEX.*)\(LOWER\((\w+)\)
create_index.target.H2    =$1($2
