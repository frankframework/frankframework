#
# NN IOS AdapterFramework
# Application Constants
#

# use application.server.type to set the type of application server, if it is not properly autodetected
# set application.server.type.custom to e.g. 'ACTIVEMQ' or 'TIBCO', to enable additional features.
SPRING.CONFIG.LOCATIONS=spring${application.server.type}${application.server.type.custom}.xml,springIbisDebuggerAdvice.xml,springCustom.xml

# These files will be loaded in the specified order
ADDITIONAL.PROPERTIES.FILE=DeploymentSpecifics.properties,BuildInfo.properties,ServerSpecifics_${application.server.type}${application.server.type.custom}.properties,SideSpecifics_${dtap.side}.properties,StageSpecifics_${dtap.stage}.properties,Test.properties
#Deprecated cannot/should not be used anymore
ADDITIONAL.PROPERTIES.FILE.SUFFIX=

# If started from a container, this property will automatically be determined/set during startup
application.server.type=
application.server.type.custom=${transactionmanager.type.default}
# the transactionmanager.type.default property allows an overridable default to be set by a hosting platform
transactionmanager.type.default=

# If TRUE, authentication is enforced on ALL servlets
# When left empty the default is TRUE, and FALSE when dtap.stage == LOC
application.security.http.authentication=
# Either NONE or CONFIDENTIAL. When set to CONFIDENTIAL a secure protocol (SSL/TLS/HTTPS) is enforced for ALL servlets
# When left empty the default is CONFIDENTIAL, and NONE when dtap.stage == LOC
application.security.http.transportGuarantee=

# Authenticators for HTTP endpoints
# application.security.http.authenticators=myADAuth
# application.security.http.authenticators.myADAuth.type=AD
# application.security.http.authenticators.myADAuth.baseDn=DC=company,DC=org
# application.security.http.authenticators.myADAuth.url=ldap://10.1.2.3
application.security.http.authenticators=

application.name=IAF
#Deprecated as we now use maven this can be determined dynamically
application.version=${frankframework-core.version}
#Deprecated not used
application.build_id=not-used

# The name of this instance of the AdapterFramework
instance.name=Frank
# ${project.version} of the instance
instance.version=
# timestamp in YYYYMMDD-HHMM format
instance.timestamp=
#Deprecated should be automatically determined by the instance.version and instance.timestamp properties (typically automatically generated and stored in BuildInfo.properties)
instance.build_id=not-used

configurations.names.application=IAF_Util,${configurations.names}
configurations.names=${instance.name}

configurations.directory=

configurations.autoStart=true
configurations.validate=true
configurations.validation=${configurations.validate}

adapters.autoStart=true


# Temporary directory in which the Frank!Framework can write temporary files such as J2V8, the flow diagrams, etc.
ibis.tmpdir=${java.io.tmpdir}/${instance.name}

flow.adapter.dir=${ibis.tmpdir}/flow/adapter
flow.config.dir=${ibis.tmpdir}/flow/config
flow.generator=org.frankframework.util.flow.MermaidFlowGenerator
flow.javascript.engines=org.frankframework.javascript.J2V8

#
# cache.dir is used by caches, to store data on disk.
#
cache.dir=${log.dir}

cache.default.maxElementsInMemory=100
cache.default.memoryStoreEvictionPolicy=LRU
cache.default.eternal=false
cache.default.timeToLiveSeconds=36000
cache.default.timeToIdleSeconds=36000
cache.default.overflowToDisk=false
cache.default.maxElementsOnDisk=10000
cache.default.diskPersistent=false
cache.default.diskExpiryThreadIntervalSeconds=600

# indicates wether (with loglevel debug) the results between calling pipes have to be logged.
log.logIntermediaryResults=true

# The number of messages displayed in browsers, e.g. for the errorStorage and messageLog
browse.messages.max = 100
browse.messages.order = DESC
browse.errors.order = ASC

transactionmanager.log.dir=${log.dir}/transactionlogs/${instance.name.lc}
transactionmanager.uid=

# Maximum timeout (in s) that can be allowed for transactions.
transactionmanager.defaultTransactionTimeout=180

# Amount of time (in ms) between runs of the TX maintenance thread.
transactionmanager.narayana.reapTime=120000
# Interval (in ms) allowed for a single active connection to be in use to the backend resource before it is considered to be *stuck.*
transactionmanager.narayana.stuckTime=180000
# How often (in ms) the connection pool checks for stuck connections.
transactionmanager.narayana.stuckTimerTime=30000

## Narayana ObjectStore Settings
# When using the database the FQDN must be used, eg; com.arjuna.ats.internal.arjuna.objectstore.jdbc.JDBCStore
transactionmanager.narayana.objectStoreType=com.arjuna.ats.internal.arjuna.objectstore.ShadowNoFileLockStore
# JNDI DataSource name, should not be XA-capable and will be managed + pooled by the framework.
transactionmanager.narayana.objectStoreDatasource=
transactionmanager.narayana.dropTable=false
transactionmanager.narayana.createTable=true

jdbc.required=true
jdbc.datasource.default=jdbc/${instance.name.lc}

## JDBC Connection Pool properties
# Deprecated, use instead `transactionmanager.jdbc.connection.minIdle`
transactionmanager.jdbc.connection.minPoolSize=0
# Minimum number of physical connections that should be maintained in IDLE state when the pool is not full.
# Keeping idle connections available in the pool can increase performance.
transactionmanager.jdbc.connection.minIdle=${transactionmanager.jdbc.connection.minPoolSize}
# Maximum number of physical connections that you can create in this pool.
transactionmanager.jdbc.connection.maxPoolSize=20
# Maximum number of physical connections that are allowed to be idle in the pool.
transactionmanager.jdbc.connection.maxIdle=2
# The maximum lifetime (in seconds) that a connection can stay in the pool before getting closed.
transactionmanager.jdbc.connection.maxLifeTime=0
# The interval (in seconds) between checks on idle connections in the pool
transactionmanager.jdbc.connection.checkInterval=300
# Optional test-query for validation of the connection. If not set, JDBC4 driver based validation will be used.
transactionmanager.jdbc.connection.testQuery=

## JMS Connection Pool properties for Narayana
# Maximum number of physical connections that you can create in this pool.
transactionmanager.narayana.jms.connection.maxPoolSize=10
# Amount of time a connection can be unused or idle until it can be discarded.
transactionmanager.narayana.jms.connection.maxIdleTime=60
# Maximum number of jms sessions per connection that can be created in the connection pool.
transactionmanager.narayana.jms.connection.maxSessions=100
# When set (in seconds), connections are validated, and either kept or removed from the pool, at this interval.
transactionmanager.narayana.jms.connection.checkInterval=300
# Max time to wait (in seconds) for a connection to become available if no connections are available from the pool
transactionmanager.narayana.jms.connections.sessionWaitTimeout=15

# Deprecated. Use instead transactionmanager.jdbc.connection.minIdle
transactionmanager.narayana.jdbc.connection.minPoolSize=${transactionmanager.jdbc.connection.minIdle}
# Deprecated. Use instead transactionmanager.jdbc.connection.minIdle.
transactionmanager.narayana.jdbc.connection.minIdle=${transactionmanager.narayana.jdbc.connection.minPoolSize}

# control parameters for accessing JdbcTransactionalStorage
jdbc.storage.useIndexHint=false
jdbc.storage.useFirstRowsHint=true
jdbc.storage.useParameters=true
jdbc.storage.assumePrimaryKeyUnique=true
jdbc.storage.checkTable=true
jdbc.storage.checkIndices=true

jdbc.dateFormat=yyyy-MM-dd
jdbc.timestampFormat=yyyy-MM-dd HH:mm:ss

jdbc.convertFieldnamesToUppercase=true

# Disable use of MSSQL WITH(rowlock) by setting dbmssupport.mssql.queuereading.rowlock=false,
# because MsSql Server starts with a rowlock, escalates to higher level (page lock, table lock) when it thinks it is appropriate
dbmssupport.mssql.queuereading.rowlock=false

# the path where the logging can be found, respectively the wildcard for log-files
logging.path=${log.dir}
# Deprecated. Use 'log.viewer.wildcard' instead
logging.wildcard=*
# Deprecated. Use 'log.viewer.showdirectories' instead
logging.showdirectories=true
# Deprecated. Use 'log.viewer.maxitems' instead
logging.items.max=500

log.viewer.wildcard=${logging.wildcard}
log.viewer.showdirectories=${logging.showdirectories}
log.viewer.maxitems=${logging.items.max}


# Class boundaries for StatisticsKeeper. [milliseconds]
# These map to percentiles in exported metrics
Statistics.boundaries=100,1000,2000,10000
#
# Class boundaries for SizeStatisticsKeeper. [bytes]
# These map to percentiles in exported metrics
Statistics.size.boundaries=100000,1000000

#
# Percentiles for StatisticsKeeper.
# These map to Service Level Objectives in exported metrics
Statistics.percentiles=50,90,95,98

# Determines the number of digits of precision to maintain on the dynamic range
# histogram used to compute percentile approximations. The higher the degrees of
# precision, the more accurate the approximation is at the cost of more memory.
Statistics.percentiles.precision=1

# Set Statistics.percentiles.publish=true to support and export percentiles and service level objectives in a non-aggregatable way.
# Memory requirements will increase from 0.1kB to about 6kB per measured value.
# Each Pipe has at least message size and duration measured.
Statistics.percentiles.publish=false

# Set Statistics.histograms.publish=true to support and export histograms, percentiles and service level objectives that can be aggregated.
# Memory requirements will increase from about 0.1kB to 12kB per measured value at precision=1.
# Each Pipe has at least message size and duration measured.
# see also https://micrometer.io/docs/concepts#_distribution_summaries
Statistics.histograms.publish=false


## Management Capabilities
# Statistics
management.metrics.export.local.enabled=true
management.metrics.export.local.configurator=org.frankframework.metrics.LocalRegistryConfigurator

management.metrics.export.prometheus.enabled=false
management.metrics.export.prometheus.configurator=org.frankframework.metrics.PrometheusRegistryConfigurator

management.metrics.export.cloudwatch.enabled=false
management.metrics.export.cloudwatch.configurator=org.frankframework.metrics.CloudWatchRegistryConfigurator
management.metrics.export.cloudwatch.namespace=${instance.name.lc}
management.metrics.export.cloudwatch.step=15m

management.metrics.export.statsd.enabled=false
management.metrics.export.statsd.configurator=org.frankframework.metrics.StatsDRegistryConfigurator
management.metrics.export.statsd.flavor=etsy
management.metrics.export.statsd.step=15m

management.metrics.export.influx.enabled=false
management.metrics.export.influx.configurator=org.frankframework.metrics.InfluxRegistryConfigurator
management.metrics.export.influx.uri=http://localhost:8086
management.metrics.export.influx.org=waf
management.metrics.export.influx.bucket=${instance.name.lc}
management.metrics.export.influx.authAlias=influx

management.metrics.export.kairos.enabled=false
management.metrics.export.kairos.configurator=org.frankframework.metrics.KairosDbRegistryConfigurator
management.metrics.export.kairos.uri=http://localhost:8080/api/v1/datapoints
management.metrics.export.kairos.authAlias=

# JMX
management.endpoints.jmx.enabled=false
management.endpoints.jmx.domain=${instance.name}
# An empty string forces the PlatformMbeanServer to be used
management.endpoints.jmx.agentId=


# Management Gateway Properties
management.gateway.outbound.class=org.frankframework.management.bus.LocalGateway
management.gateway.inbound.class=



# number of days statistics are kept on the filesystem
statistics.retention=42
# cron pattern to be used by dump statistics
statistics.cron=0 45 23 * * ?

statistics.size=true

# cron pattern to be used by cleanup the database
cleanup.database.cron=0 45 1 * * ?
# maximum number of rows to delete from ibisstore table in one execution of job. Set to 0 for unlimited.
cleanup.database.maxrows=25000
cleanup.database.active=true

# cron pattern to be used by cleanup the file system
cleanup.filesystem.cron=0 35 1 * * ?
cleanup.filesystem.active=true

cleanup.log.dir.retention=60d

# cron pattern to be used by recover adapters
recover.adapters.interval=300000

checkReload.interval=60000

loadDatabaseSchedules.active=false
loadDatabaseSchedules.interval=60000


xml.namespaceAware.default=true
# set xslt.streaming.default=true to use streaming Xslt.
# N.B. 2019-11-25 this appeared to cause NullPointerExceptions in Xalans TransformerHandlerImpl, therefor we then disabled this setting
# (also because it is using more memory than expected, e.g. ForEachChildElementPipe with elementXPathExpression still goes out of memory on large files)
xslt.streaming.default=true
xslt.auto.reload=false
xslt.bufsize=4096
# Sets the default XSLT version throughout the entire application except the ForEachChildElementPipe.
# The ForEachChildElementPipe usually works with large files and thus is streaming preferred.
# Currently streaming is only supported with XSLT version 1.
# Therefore this property will not change the XSLT version in the ForEachChildElementPipe.
# If desired, the XSLT version can be changed for each individual ForEachChildElementPipe using xsltVersion=2.
xslt.version.default=2

xmlValidator.warn=true
# When true don't initialize validators at startup (initialize validator when it
# is called for the first time)
xmlValidator.lazyInit=false
# Maximum number of validators to keep initialized after which the least recent
# used validator will be reset and needs to be initialized again when it is
# called. A low value will result in more initialization calls (hence more CPU
# usage and less performance). A high value will result in more initialized
# objects being held in memory (hence more memory usage). A value of -1 will
# keep all validators initialized
xmlValidator.maxInitialised=-1

jms.connectionsArePooled=true
jms.sessionsArePooled=true
# IF (jms.connectionsArePooled==true) THEN jms.useSingleDynamicReplyQueue=false
jms.useSingleDynamicReplyQueue=false
jms.createDestination=false
# default value for the lookupDestination attribute in jms classes
jms.lookupDestination=true
# Default class of messages for outgoing JMS message: AUTO, TEXT, or BYTES.
# In case of AUTO the system will send BytesMessage for binary messages, TextMessage otherwise.
jms.messageClass.default=AUTO

jms.cleanUpOnClose=true
# Default value for forceMessageIdAsCorrelationId in the EsbJmsListener for RR protocol,
# when no attribute is specified in the configuration.
jms.esb.rr.forceMessageIdAsCorrelationId.default=

application.security.jwt.allowWeakSecrets=false

# set fxf.version to 'auto' for automatic version detection
# alternatively set to '1' or '2'
fxf.version=auto

jta.userTransactionUrl1=java:comp/UserTransaction
jta.userTransactionUrl2=jta/usertransaction

# Monitoring is now deprecated. Its usage is mostly replaced by log management
# tools like Splunk and Logstash. When monitoring is enabled keep in mind that
# it will cause OutOfMemory exceptions after a number of configuration reloads.
monitoring.enabled=false

dtap.stage=${otap.stage}
dtap.side=${otap.side}

otap.stage=xxx
otap.side=xxx

query.includeFieldDefinition.default=true

# Enable ${instance.name.lc}-messages.log (see Adapter.msgLogLevel also)
msg.log.level.default=INFO
# Log the size of the message instead of the content of the message (see Adapter.msgLogHidden also)
msg.log.hidden.default=true

# Optionally override keys to log on listener level with <listener xPathLoggingKeys="conversationId,testId" ... /> (see JmsListenerBase.xPathLoggingKeys also)
msg.log.keys=conversationId
# Define xPath for key conversationId
msg.log.xPath.conversationId=*[local-name()='Envelope']/*[local-name()='Header']/*[local-name()='MessageHeader']/*[local-name()='HeaderFields']/*[local-name()='ConversationId']

# Display duration in human-readable format by appending a duration letter such as 'S' (second) or 'M' (minute)
msg.log.humanReadable=false


sec.log.includeMessage=false

adapter.message.max.size=1000

message.size.warn.default=30MB


# perform stubbing of the configuration for Larva Test Tool
stub4testtool.configuration=false
# setting for changing the default timeout in larva
larva.timeout=10000
# setting when using parallel executement, to exclude from the scenario list, and run in sequential order instead.
larva.parallel.blacklistDirs=
# setting when using parallel executement, how many threads may be used in parallel.
larva.parallel.threads=4

# Larva Test Tool properties to use when deviating from default settings (in LarvaTool.java)
#larva.javasource.directory=${webapp.realpath}/../resources
#larva.configuration.directory=${webapp.realpath}/../Configuration
#larva.windiff.command=${webapp.realpath}/../../../../IbisAlgemeenWasbak/WinDiff/WinDiff.Exe
#larva.diffs.autosave=true

# Optionally use a custom configuration for the Ladybug Test Tool
ibistesttool.custom=
# Spring XML file that loads all TestTool beans
ibistesttool.springConfigFile=springIbisTestTool${ibistesttool.custom}.xml
# Maximum number of checkpoints per report
ibistesttool.maxCheckpoints=2500
# Maximum estimated memory usage per report, in bytes
ibistesttool.maxMemoryUsage=100000000
# Maximum character length for a report message. NOTE: Log4j messages can be capped with the 'log.lengthLogRecords'
# property in the log4j4ibis.properties file.
ibistesttool.maxMessageLength=1000000
# Report transformation xslt
ibistesttool.reportTransformation=TestTool/xsl/Default.xsl
# Maximum database size. When necessary the oldest report(s) will be deleted when adding a new one (default is 100MB)
#   ibistesttool.maxStorageSize=100MB
# Maximum file size for debug storage (.tts) files (default is 1MB)
#   ibistesttool.maxFileSize=1MB
# Maximum number of debug storage backup (.tts) files (default is 9)
#   ibistesttool.maxBackupIndex=9
# When free space on disk drops below freeSpaceMinimum the user will see a warning in the Ladybug Debug tab and reports
# for debugging will be discarded (not saved to disk anymore) (default is maxFileSize * (maxBackupIndex + 1) * 10)
#   ibistesttool.freeSpaceMinimum=10MB
# Regex filter for reports to show up in debug tab (leave empty to not apply any thread filter regex). This was used
# with old GUI: ibistesttool.regexFilter=^(?!Pipeline WebControl).*
ibistesttool.regexFilter=
# Root directory for xml storage (Frank!Runner will override it with a system property)
ibistesttool.directory=${log.dir}/testtool
# Enable running the Ladybug Liquibase scripts (proxy storage will switch to file storage when table not present)
# (default is ${jdbc.migrator.active} when available, otherwise default is false)
#   ladybug.jdbc.migrator.active=true
# DataSource to be used by Ladybug, and it's Liquibase script (default is ${jdbc.datasource.default})
#   ladybug.jdbc.datasource=
# Enable report generator in all environments (default: false when dtap.stage=ACC or dtap.stage=PRD, otherwise true)
#   testtool.enabled=true

# the property messageLog.check is replaced by property warnings.suppress.integrityCheck, which can be set on the adapterlevel too and means effectively its opposite
messageLog.count.show=true
errorStore.count.show=true

#Deprecated
FileViewerServlet.permission.rules=${logging.path} * allow
# Definitions for the FileViewer
FileViewer.permission.rules=${FileViewerServlet.permission.rules}

browseJdbcTable.permission.rules=* * allow

adapterServiceWatchedDirectory=

adapterServiceCheckRateInSeconds=60

ldap.auth.mode=None
ldap.auth.dev.url=
ldap.auth.tst.url=
ldap.auth.acc.url=
ldap.auth.prd.url=
ldap.auth.user.base=
ldap.auth.observer.base=
ldap.auth.dataadmin.base=

manageDatabase.active=false
manageDatabase.webServiceListener.active=false
# set manageDatabase.serviceName to make manageDatabase available via ServiceDispatcher as external JavaListener
manageDatabase.serviceName=

checkReload.active=true
manageFileSystem.active=false



# Comma separated list of (external) protocols where the ClassLoader may retrieve files from.
# Possible protocols include: file,http,ftp
classloader.allowed.protocols=classpath

#
# RESTFUL Etag Caching
#

# Type of cache to be used. (memcached,ehcache) NOTE: Ehcache is local (stateful)
etag.cache.type=ehcache

# Url(s) of external caching mechanisms (space separated)
etag.cache.server=

# If applicable, authentication for the etag cache server
etag.cache.username=
etag.cache.password=

# Timeout for the etag precondition check
etag.cache.timeout=10

etag.ehcache.maxElementsInMemory=512
etag.ehcache.memoryStoreEvictionPolicy=LRU
etag.ehcache.eternal=false
etag.ehcache.overflowToDisk=false
etag.ehcache.maxElementsOnDisk=10000
etag.ehcache.dir=${cache.dir}
etag.ehcache.diskPersistent=false
etag.ehcache.diskExpiryThreadIntervalSeconds=600

# Cross Site Request Forgery protection
csrf.enabled=true
csrf.cookie.path=

# Below listed 4 suppression keys should be used with an adapter name to avoid losing any useful configuration warnings.
# Example: warnings.suppress.transaction.{NameOfTheAdapter}=true
# SqlInjection warnings can not be suppressed globally on application level, however it is possible to set
# System property warnings.suppress.sqlInjections=true to suppress all related configuration warnings at once.
warnings.suppress.sqlInjections=false
warnings.suppress.defaultvalue=false
warnings.suppress.deprecated=false
# setting this true will suppress the transaction warnings in the console.
# Namely, the warnings "implementing setting of transacted=...",
# "listener type {name} requires transactional processing",
# "... but has no errorSender or errorStorage"
warnings.suppress.transaction=false

# If warnings.suppress.integrityCheck is set true, this suppresses a warning that is issued by MessageSendingPipes if asynchronous senders do not have a messageLog.
# Having the messageLog enables service management to provide proof of the messages sent, and when applicable,
# to prove that for each message received by the adapter a corresponding message was sent by the MessageSendingPipe.
warnings.suppress.integrityCheck=false

########## INTERACTIVE CONSOLE ##########
# Activates the new Frank!Framework API + GUI3.0
iaf-api.enabled=true
console.location=iaf/gui/

# Enable deprecated API endpoints
iaf-api.allowDeprecated=false
console.active=${iaf-api.enabled}

#Cookie settings
#console.cookies.functional=true
#console.cookies.personalization=true
#console.cookies.analytical=true

#How often the interactive frontend should poll the IAF API for new data
console.pollerInterval=5000

#How often the interactive frontend should poll during IDLE state
console.idle.pollerInterval=60000

#After x seconds the interactive console goes into 'IDLE' state, in the idle state the console changes it's polling interval
#Use 0 to disable this functionality
console.idle.time=300

#After x seconds of inactivity the user will be forcefully logged out
#Use 0 to disable this functionality
console.idle.timeout=0

#Time format in which to display the time and date.
console.dateFormat=yyyy-MM-dd HH:mm:ss

#Feedback URL to be used
console.feedbackURL=https://ibissource.org/iaf/feedback/

#Load balancer url(this will be used to create server object in openapi schema)
loadBalancer.url=

# Maximum size of message that is to be kept in memory. Messages larger than this
# are potentially kept in a temporary file on disk.
message.max.memory.size=5242880

# Flag deciding to rewrite package names in legacy-format configurations, where classes are specified in `className` attribute.
# Set to 'true' to make it easier to load existing configurations without updating everything.
# Default in version 8.0 is 'true', to rewrite classnames. In higher versions, this will be set to 'false' by default.
# true value will negatively impact startup performance.
migration.rewriteLegacyClassNames=true
