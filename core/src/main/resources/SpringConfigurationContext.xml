<?xml version="1.0" encoding="UTF-8"?>
<!--
	Beans defined in this file are unique for every configuration. If you want
	to reuse a bean over multiple configurations, add it to the SpringApplicationContext.xml
	Singleton beans are managed by Spring and will be closed upon configuration unload.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	default-autowire="byName"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	">

	<!-- AOP has to be enabled explicitly on a per Context basis. This allows us to programmatically enable and disable Ladybug 'point-cutting'. -->
	<beans profile="aop">
		<aop:config proxy-target-class="true" />
	</beans>

	<beans>
		<bean name="configurationDigester" class="org.frankframework.configuration.ConfigurationDigester" />

		<bean name="lifecycleProcessor" class="org.frankframework.lifecycle.ConfiguringLifecycleProcessor" />

		<bean name="configurationMetrics" class="org.frankframework.statistics.MetricsInitializer" />

		<bean name="sharedWsdlDefinitions" class="org.frankframework.core.SharedWsdlDefinitions" />

<!-- Configurable Lifecycle beans -->
		<bean name="jdbcMigrator" class="org.frankframework.jdbc.migration.LiquibaseMigrator" />
		<bean name="configFlowGenerator" class="org.frankframework.util.flow.SpringContextFlowDiagramProvider" />
		<bean name="scheduleManager" class="org.frankframework.scheduler.ScheduleManager" autowire="byType" />
		<bean name="monitorManager" class="org.frankframework.monitoring.MonitorManager" />


		<bean name="configurationWarnings" class="org.frankframework.configuration.ConfigurationWarnings" />
		<bean name="eventPublisher" class="org.frankframework.monitoring.EventPublisher" />

<!-- 	<bean name="applicationEventMulticaster" class="org.frankframework.lifecycle.FrankEventMulticaster" /> -->

		<bean
			name="pipeLineProcessor"
			class="org.frankframework.processors.InputOutputPipeLineProcessor"
			autowire="byName"
			scope="prototype"
			>
			<property name="pipeLineProcessor">
				<bean
					class="org.frankframework.processors.CachePipeLineProcessor"
					autowire="byName"
					scope="prototype"
					>
					<property name="pipeLineProcessor">
						<bean
							class="org.frankframework.processors.LimitingParallelExecutionPipeLineProcessor"
							autowire="byName"
							scope="prototype"
							>
							<property name="pipeLineProcessor">
								<bean
									class="org.frankframework.processors.TransactionAttributePipeLineProcessor"
									autowire="byName"
									scope="prototype"
									>
									<property name="pipeLineProcessor">
										<bean
											class="org.frankframework.processors.LockerPipeLineProcessor"
											autowire="byName"
											scope="prototype"
											>
											<property name="pipeLineProcessor">
												<bean
													class="org.frankframework.processors.CorePipeLineProcessor"
													autowire="byName"
													scope="prototype"
												/>
											</property>
										</bean>
									</property>
								</bean>
							</property>
						</bean>
					</property>
				</bean>
			</property>
		</bean>

		<bean
			name="pipeProcessor,inputValidatorProcessor,outputValidatorProcessor,inputWrapperProcessor,outputWrapperProcessor"
			class="org.frankframework.processors.MonitoringPipeProcessor"
			autowire="byName"
			scope="prototype"
			>
			<property name="pipeProcessor">
				<!-- allows a managed exception to be stored in the session -->
				<bean
					class="org.frankframework.processors.InputOutputPipeProcessor"
					autowire="byName"
					scope="prototype"
					>
					<property name="pipeProcessor">
						<bean
							class="org.frankframework.processors.ExceptionHandlingPipeProcessor"
							autowire="byName"
							scope="prototype"
							>
							<property name="pipeProcessor">
								<bean
									class="org.frankframework.processors.LimitingParallelExecutionPipeProcessor"
									autowire="byName"
									scope="prototype"
									>
									<property name="pipeProcessor">
										<bean
											class="org.frankframework.processors.TransactionAttributePipeProcessor"
											autowire="byName"
											scope="prototype"
											>
											<property name="pipeProcessor">
												<bean
													class="org.frankframework.processors.LockerPipeProcessor"
													autowire="byName"
													scope="prototype"
													>
													<property name="pipeProcessor">
														<bean
															class="org.frankframework.processors.CheckMessageSizePipeProcessor"
															autowire="byName"
															scope="prototype"
															>
															<property name="pipeProcessor">
																<bean
																	class="org.frankframework.processors.TrackPreviousPipeInMetadataProcessor"
																	autowire="byName"
																	scope="prototype">
																	<property name="pipeProcessor">
																		<bean
																			class="org.frankframework.processors.CorePipeProcessor"
																			autowire="byName"
																			scope="prototype"
																		/>
																	</property>
																</bean>
															</property>
														</bean>
													</property>
												</bean>
											</property>
										</bean>
									</property>
								</bean>
							</property>
						</bean>
					</property>
				</bean>
			</property>
		</bean>

		<bean
			name="senderWrapperProcessor"
			class="org.frankframework.processors.InputOutputSenderWrapperProcessor"
			autowire="byName"
			scope="prototype"
			>
			<property name="senderWrapperProcessor">
				<bean
					class="org.frankframework.processors.CacheSenderWrapperProcessor"
					autowire="byName"
					scope="prototype"
					>
					<property name="senderWrapperProcessor">
						<bean
							class="org.frankframework.processors.CoreSenderWrapperProcessor"
							autowire="byName"
							scope="prototype"
							>
						</bean>
					</property>
				</bean>
			</property>
		</bean>

		<bean
			name="listenerProcessor"
			class="org.frankframework.processors.CoreListenerProcessor"
			autowire="byName"
			scope="prototype"
		/>
	</beans>
</beans>
