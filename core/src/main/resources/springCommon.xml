<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	default-autowire="byName"
	xsi:schemaLocation="http://www.springframework.org/schema/beans classpath:xml/xsd/spring-beans-3.2.xsd"
	>

	<bean
		name="lowerCasePropertyPlaceholderConfigurer"
		class="nl.nn.adapterframework.configuration.LowerCasePropertyPlaceholderConfigurer"
		autowire="byName"
	/>

	<bean
		name="jndiContextPrefixPropertyPlaceholderConfigurer"
		class="nl.nn.adapterframework.configuration.OverwritePropertyPlaceholderConfigurer"
		autowire="byName"
		>
		<property name="propertyName" value="jndiContextPrefix"/>
		<property name="propertyValue" value=""/>
	</bean>

	<bean
		name="hostnamePropertyPlaceholderConfigurer"
		class="nl.nn.adapterframework.configuration.HostnamePropertyPlaceholderConfigurer"
		autowire="byName"
	/>

	<bean
		name="fxfPropertyPlaceholderConfigurer"
		class="nl.nn.adapterframework.extensions.fxf.FxfPropertyPlaceholderConfigurer"
		autowire="byName"
	/>

	<bean
		name="jmsRealmsFactory"
		class="nl.nn.adapterframework.jms.JmsRealmFactory"
		autowire="byName"
		factory-method="getInstance"
	/>

	<bean
		name="proto-jmsRealm"
		class="nl.nn.adapterframework.jms.JmsRealm"
		autowire="byName"
		scope="prototype"
		>
		<property name="jndiContextPrefix" value="${jndiContextPrefix}"/>
	</bean>

	<bean
		name="jdbcMigrator"
		class="nl.nn.adapterframework.jdbc.migration.Migrator"
		autowire="byName"
		scope="prototype"
		>
		<property name="jndiContextPrefix" value="${jndiContextPrefix}"/>
	</bean>

	<bean
		name="flowDiagramManager"
		class="nl.nn.adapterframework.util.flow.FlowDiagramManager"
		autowire="no"
		scope="singleton"
		lazy-init="true"
		>
	</bean>
	<bean
		name="flowGenerator"
		class="nl.nn.adapterframework.util.flow.V8FlowGenerator"
		scope="singleton"
		lazy-init="true"
		>
	</bean>

	<bean
		name="listenerContainer"
		class="nl.nn.adapterframework.receivers.PullingListenerContainer"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		id="schedulerHelper"
		class="nl.nn.adapterframework.scheduler.SchedulerHelper"
		autowire="byName"
		lazy-init="true"
	/>

	<bean
		id="txManagerProxy"
		class="nl.nn.adapterframework.util.SpringTxManagerProxy"
		>
		<property name="realTxManagerBeanName">
			<idref bean="txManagerReal"/>
		</property>
	</bean>

	<alias name="txManagerProxy" alias="txManager"/>

	<bean
		name="isolatedServiceCaller"
		class="nl.nn.adapterframework.pipes.IsolatedServiceCaller"
		autowire="byName"
		scope="singleton"
	/>

	<bean
		name="pipeLineProcessor"
		class="nl.nn.adapterframework.processors.InputOutputPipeLineProcessor"
		autowire="byName"
		scope="prototype"
		>
		<property name="pipeLineProcessor">
			<bean
				class="nl.nn.adapterframework.processors.CachePipeLineProcessor"
				autowire="byName"
				scope="prototype"
				>
				<property name="pipeLineProcessor">
					<bean
						class="nl.nn.adapterframework.processors.TransactionAttributePipeLineProcessor"
						autowire="byName"
						scope="prototype"
						>
						<property name="pipeLineProcessor">
							<bean
								class="nl.nn.adapterframework.processors.LockerPipeLineProcessor"
								autowire="byName"
								scope="prototype"
								>
								<property name="pipeLineProcessor">
									<bean
										class="nl.nn.adapterframework.processors.CorePipeLineProcessor"
										autowire="byName"
										scope="prototype"
									/>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean
		name="pipeProcessor,inputValidatorProcessor,outputValidatorProcessor,inputWrapperProcessor,outputWrapperProcessor"
		class="nl.nn.adapterframework.processors.MonitoringPipeProcessor"
		autowire="byName"
		scope="prototype"
		>
		<property name="pipeProcessor">
			<bean
				class="nl.nn.adapterframework.processors.InputOutputPipeProcessor"
				autowire="byName"
				scope="prototype"
				>
				<property name="pipeProcessor">
					<bean
						class="nl.nn.adapterframework.processors.CheckSemaphorePipeProcessor"
						autowire="byName"
						scope="prototype"
						>
						<property name="pipeProcessor">
							<bean
								class="nl.nn.adapterframework.processors.TransactionAttributePipeProcessor"
								autowire="byName"
								scope="prototype"
								>
								<property name="pipeProcessor">
									<bean
										class="nl.nn.adapterframework.processors.LockerPipeProcessor"
										autowire="byName"
										scope="prototype"
										>
										<property name="pipeProcessor">
											<bean
												class="nl.nn.adapterframework.processors.CheckMessageSizePipeProcessor"
												autowire="byName"
												scope="prototype"
												>
												<property name="pipeProcessor">
													<bean
														class="nl.nn.adapterframework.processors.CorePipeProcessor"
														autowire="byName"
														scope="prototype"
													/>
												</property>
											</bean>
										</property>
									</bean>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean
		name="senderWrapperProcessor"
		class="nl.nn.adapterframework.processors.InputOutputSenderWrapperProcessor"
		autowire="byName"
		scope="prototype"
		>
		<property name="senderWrapperProcessor">
			<bean
				class="nl.nn.adapterframework.processors.CacheSenderWrapperProcessor"
				autowire="byName"
				scope="prototype"
				>
				<property name="senderWrapperProcessor">
					<bean
						class="nl.nn.adapterframework.processors.CoreSenderWrapperProcessor"
						autowire="byName"
						scope="prototype"
						>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean
		name="listenerProcessor"
		class="nl.nn.adapterframework.processors.CoreListenerProcessor"
		autowire="byName"
		scope="prototype"
	/>

	<!--
	Beans created from Configuration.xml, but prototyped here for
	extra dependencies which cannot be created otherwise.
	Bean names are prefixed with 'proto-' so that autowiring by
	name doesn't create unnessecary instances.
	-->
	<bean
		name="proto-adapter"
		class="nl.nn.adapterframework.core.Adapter"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-pipeline"
		class="nl.nn.adapterframework.core.PipeLine"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-param"
		class="nl.nn.adapterframework.parameters.Parameter"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-receiver"
		class="nl.nn.adapterframework.receivers.GenericReceiver"
		autowire="byName"
		scope="prototype"
	/>

	<!-- Default pipe is a message-sending pipe -->
	<bean
		name="proto-pipe"
		class="nl.nn.adapterframework.pipes.GenericMessageSendingPipe"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-sender"
		class="nl.nn.adapterframework.core.ISender"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-RecordHandlingFlow"
		class="nl.nn.adapterframework.batch.RecordHandlingFlow"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-monitor"
		class="nl.nn.adapterframework.monitoring.Monitor"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-trigger"
		class="nl.nn.adapterframework.monitoring.Trigger"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-alarm"
		class="nl.nn.adapterframework.monitoring.Trigger"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-clearing"
		class="nl.nn.adapterframework.monitoring.Trigger"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-job"
		class="nl.nn.adapterframework.scheduler.JobDef"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-directoryCleaner"
		class="nl.nn.adapterframework.util.DirectoryCleaner"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-statisticsHandlers"
		class="nl.nn.adapterframework.statistics.StatisticsKeeperIterationHandlerCollection"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-statisticsHandler"
		class="nl.nn.adapterframework.statistics.StatisticsKeeperIterationHandler"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-cache"
		class="nl.nn.adapterframework.cache.EhCache"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="taskExecutor"
		class="org.springframework.core.task.SimpleAsyncTaskExecutor"
		scope="singleton"
	/>

	<bean
		name="concurrentTaskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
		scope="prototype"
	>
		<property name="WaitForTasksToCompleteOnShutdown" value="true" />
	</bean>

	<bean
		name="messageListenerClassName"
		class="java.lang.String"
		>
		<constructor-arg value="${jms.messageListenerClassName}"/>
	</bean>

	<bean
		id="dbmsSupportFactoryDefault"
		class="nl.nn.adapterframework.jdbc.dbms.DbmsSupportFactory"
		>
		<property name="dbmsSupportMap">
			<props>
				<prop key="Oracle">nl.nn.adapterframework.jdbc.dbms.OracleDbmsSupport</prop>
				<prop key="Microsoft SQL Server">nl.nn.adapterframework.jdbc.dbms.MsSqlServerDbmsSupport</prop>
				<prop key="DB2/NT">nl.nn.adapterframework.jdbc.dbms.Db2DbmsSupport</prop>
				<prop key="DB2/LINUXX8664">nl.nn.adapterframework.jdbc.dbms.Db2DbmsSupport</prop>
				<prop key="H2">nl.nn.adapterframework.jdbc.dbms.H2DbmsSupport</prop>
				<prop key="MySQL">nl.nn.adapterframework.jdbc.dbms.MySqlDbmsSupport</prop>
			</props>
		</property>
	</bean>

</beans>
