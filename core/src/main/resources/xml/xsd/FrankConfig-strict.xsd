<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="7.8-SNAPSHOT">
  <xs:element name="Configuration">
    <xs:annotation>
      <xs:documentation>The Configuration is the container of all configuration objects.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="ConfigurationType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="Module">
    <xs:annotation>
      <xs:documentation>Root element for XML files that contain multiple adapters and/or cron jobs and are included as entity reference in another XML file. It does not influence the behavior of your Frank config.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:group ref="ConfigurationDeclaredChildGroup" />
      <xs:attribute ref="active" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Adapter">
    <xs:annotation>
      <xs:documentation>The Adapter is the central manager in the IBIS Adapterframework, that has knowledge
 and uses Receivers and a PipeLine.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Receiver" minOccurs="1" maxOccurs="unbounded" />
        <xs:group ref="ErrorMessageFormatterElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:element ref="Pipeline" minOccurs="1" maxOccurs="1" />
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>name of the adapter</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="description" type="xs:string">
        <xs:annotation>
          <xs:documentation>some functional description of the &lt;code&gt;Adapter&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="autoStart" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>AutoStart indicates that the adapter should be started when the configuration
 is started. Default: &lt;code&gt;true&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="replaceNullMessage" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>If &lt;code&gt;true&lt;/code&gt; a null message is replaced by an empty message Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="messageKeeperSize" type="frankInt">
        <xs:annotation>
          <xs:documentation>number of message displayed in ibisconsole Default: 10</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="msgLogLevel" type="xs:string">
        <xs:annotation>
          <xs:documentation>Defines behaviour for logging messages. Configuration is done in the MSG appender in log4j4ibis.properties.
 Possible values are: &lt;table border='1'&gt;&lt;tr&gt;&lt;th&gt;msgLogLevel&lt;/th&gt;&lt;th&gt;messages which are logged&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td colspan='1'&gt;Off&lt;/td&gt; &lt;td&gt;No logging&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td colspan='1'&gt;Basic&lt;/td&gt;&lt;td&gt;Logs information from adapter level messages &lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td colspan='1'&gt;Terse&lt;/td&gt;&lt;td&gt;Logs information from pipe messages.&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td colspan='1'&gt;All&lt;/td&gt; &lt;td&gt;Logs all messages.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; Default: &lt;code&gt;BASIC&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="msgLogHidden" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the length of the message is shown in the msg log instead of the content of the message Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="targetDesignDocument" type="xs:string" />
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.core.Adapter" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="adapter" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Receiver">
    <xs:annotation>
      <xs:documentation>The receiver is the trigger and central communicator for the framework.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="ListenerElementGroup" minOccurs="1" maxOccurs="1" />
        <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="ErrorSenderElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="ErrorStorageElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="MessageLogElementGroup" minOccurs="0" maxOccurs="1" />
      </xs:sequence>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the Receiver as known to the Adapter</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onError">
        <xs:simpleType>
          <xs:union memberTypes="OnErrorAttributeValuesType variableRef">
            <xs:annotation>
              <xs:documentation>One of 'continue' or 'close'. Controls the behaviour of the Receiver when it encounters an error sending a reply or receives an exception asynchronously Default: CONTINUE</xs:documentation>
            </xs:annotation>
          </xs:union>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="numThreads" type="frankInt">
        <xs:annotation>
          <xs:documentation>The number of threads that may execute a Pipeline concurrently (only for pulling listeners) Default: 1</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="numThreadsPolling" type="frankInt">
        <xs:annotation>
          <xs:documentation>The number of threads that are actively polling for messages concurrently. '0' means 'limited only by &lt;code&gt;numthreads&lt;/code&gt;' (only for pulling listeners) Default: 1</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="pollInterval" type="frankInt">
        <xs:annotation>
          <xs:documentation>The number of seconds waited after an unsuccesful poll attempt before another poll attempt is made. Only for polling listeners, not for e.g. ifsa, jms, webservice or javaListeners Default: 10</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="startTimeout" type="frankInt">
        <xs:annotation>
          <xs:documentation>timeout to start receiver. If this timeout is reached, the Receiver may be stopped again</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="stopTimeout" type="frankInt">
        <xs:annotation>
          <xs:documentation>timeout to stopped receiver. If this timeout is reached, a new stop command may be issued</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="checkForDuplicates" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, each message is checked for presence in the messageLog. If already present, it is not processed again. Only required for non XA compatible messaging. Requires messageLog! Default: false</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="checkForDuplicatesMethod">
        <xs:simpleType>
          <xs:union memberTypes="CheckForDuplicatesMethodAttributeValuesType variableRef">
            <xs:annotation>
              <xs:documentation>(Only used when &lt;code&gt;checkForDuplicates=true&lt;/code&gt;) Indicates whether the messageid or the correlationid is used for checking presence in the message log Default: MESSAGEID</xs:documentation>
            </xs:annotation>
          </xs:union>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="maxDeliveries" type="frankInt">
        <xs:annotation>
          <xs:documentation>The maximum delivery count after which to stop processing the message (only for listeners that know the delivery count of received messages). If -1 the delivery count is ignored Default: 5</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="maxRetries" type="frankInt">
        <xs:annotation>
          <xs:documentation>The number of times a processing attempt is automatically retried after an exception is caught or rollback is experienced. If &lt;code&gt;maxRetries &amp;lt; 0&lt;/code&gt; the number of attempts is infinite Default: 1</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="processResultCacheSize" type="frankInt">
        <xs:annotation>
          <xs:documentation>Size of the cache to keep process results, used by maxRetries Default: 100</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="returnedSessionKeys" type="xs:string">
        <xs:annotation>
          <xs:documentation>Comma separated list of keys of session variables that should be returned to caller, for correct results as well as for erronous results. (Only for Listeners that support it, like JavaListener)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="correlationIDXPath" type="xs:string">
        <xs:annotation>
          <xs:documentation>XPath expression to extract correlationid from message</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
        <xs:annotation>
          <xs:documentation>Namespace defintions for correlationIDXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="correlationIDStyleSheet" type="xs:string">
        <xs:annotation>
          <xs:documentation>Stylesheet to extract correlationID from message</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="labelXPath" type="xs:string">
        <xs:annotation>
          <xs:documentation>XPath expression to extract label from message</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="labelNamespaceDefs" type="xs:string">
        <xs:annotation>
          <xs:documentation>Namespace defintions for labelXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="labelStyleSheet" type="xs:string">
        <xs:annotation>
          <xs:documentation>Stylesheet to extract label from message</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="chompCharSize" type="xs:string">
        <xs:annotation>
          <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="elementToMove" type="xs:string">
        <xs:annotation>
          <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="elementToMoveSessionKey" type="xs:string">
        <xs:annotation>
          <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored Default: ref_ + the name of the element</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="elementToMoveChain" type="xs:string">
        <xs:annotation>
          <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. adapter;pipeline;pipe)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="removeCompactMsgNamespaces" type="frankBoolean" />
      <xs:attribute name="hideRegex" type="xs:string">
        <xs:annotation>
          <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hideMethod" type="xs:string">
        <xs:annotation>
          <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked Default: all</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hiddenInputSessionKeys" type="xs:string">
        <xs:annotation>
          <xs:documentation>Comma separated list of keys of session variables which are available when the &lt;code&gt;PipelineSession&lt;/code&gt; is created and of which the value will not be shown in the log (replaced by asterisks)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="forceRetryFlag" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, every message read will be processed as if it is being retried, by setting a session variable 'retry' Default: false</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="numberOfExceptionsCaughtWithoutMessageBeingReceivedThreshold" type="frankInt">
        <xs:annotation>
          <xs:documentation>Number of connection attemps to put the adapter in warning status Default: 5</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="transactionTimeout" type="frankInt">
        <xs:annotation>
          <xs:documentation>Timeout (in seconds) of transaction started to process a message. Default: &lt;code&gt;0&lt;/code&gt; (use system default)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="transactionAttribute">
        <xs:simpleType>
          <xs:union memberTypes="TransactionAttributeAttributeValuesType variableRef">
            <xs:annotation>
              <xs:documentation>The &lt;code&gt;transactionAttribute&lt;/code&gt; declares transactional behavior of execution. It applies both to database transactions and XA transactions.The pipeline uses this to start a new transaction or suspend the current one when required. For developers: it is equalto &lt;a href="https://docs.oracle.com/javaee/7/tutorial/transactions003.htm"&gt;EJB transaction attribute&lt;/a&gt;. Possible values for transactionAttribute:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; Default: Supports</xs:documentation>
            </xs:annotation>
          </xs:union>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.receivers.Receiver" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="receiver" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Param">
    <xs:annotation>
      <xs:documentation>Generic parameter definition.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the parameter</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:union memberTypes="ParameterTypeAttributeValuesType variableRef" />
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="value" type="xs:string">
        <xs:annotation>
          <xs:documentation>The value of the parameter, or the base for transformation using xpathExpression or stylesheet, or formatting.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="sessionKey" type="xs:string">
        <xs:annotation>
          <xs:documentation>Key of a PipelineSession-variable. &lt;br/&gt;If specified, the value of the PipelineSession variable is used as input for
 the xpathExpression or stylesheet, instead of the current input message. &lt;br/&gt;If no xpathExpression or stylesheet are
 specified, the value itself is returned. &lt;br/&gt;If the value '*' is specified, all existing sessionkeys are added as
 parameter of which the name starts with the name of this parameter. &lt;br/&gt;If also the name of the parameter has the
 value '*' then all existing sessionkeys are added as parameter (except tsReceived)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="contextKey" type="xs:string">
        <xs:annotation>
          <xs:documentation>key of message context variable to use as source, instead of the message found from input message or sessionKey itself</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="sessionKeyXPath" type="xs:string">
        <xs:annotation>
          <xs:documentation>Instead of a fixed &lt;code&gt;sessionKey&lt;/code&gt; it's also possible to use a XPath expression applied to the input message to extract the name of the session-variable.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleSheetName" type="xs:string">
        <xs:annotation>
          <xs:documentation>URL to a stylesheet that wil be applied to the contents of the message or the value of the session-variable.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="xpathExpression" type="xs:string">
        <xs:annotation>
          <xs:documentation>the XPath expression to extract the parameter value from the (xml formatted) input or session-variable.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="xsltVersion" type="frankInt">
        <xs:annotation>
          <xs:documentation>when set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="namespaceDefs" type="xs:string">
        <xs:annotation>
          <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of 
 &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. One entry can be without a prefix, that will define the default namespace.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="removeNamespaces" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>When set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before the stylesheet/xpathExpression is executed</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="defaultValue" type="xs:string">
        <xs:annotation>
          <xs:documentation>If the result of sessionKey, xpathExpression and/or stylesheet returns null or an empty string, this value is returned</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="defaultValueMethods" type="xs:string">
        <xs:annotation>
          <xs:documentation>Comma separated list of methods (&lt;code&gt;defaultValue&lt;/code&gt;, &lt;code&gt;sessionKey&lt;/code&gt;, &lt;code&gt;pattern&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;input&lt;/code&gt;) to use as default value. Used in the order they appear until a non-null value is found.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="pattern" type="xs:string">
        <xs:annotation>
          <xs:documentation>Value of parameter is determined using substitution and formating, following MessageFormat syntax with named parameters. The expression can contain references
 to session-variables or other parameters using {name-of-parameter} and is formatted using java.text.MessageFormat.
 &lt;br/&gt;If for instance &lt;code&gt;fname&lt;/code&gt; is a parameter or session variable that resolves to eric, then the pattern
 'hi {fname}, hoe gaat het?' resolves to 'hi eric, hoe gaat het?'.&lt;br/&gt;
 The following predefined reference can be used in the expression too:&lt;ul&gt;
 &lt;li&gt;{now}: the current system time&lt;/li&gt;
 &lt;li&gt;{uid}: an unique identifier, based on the IP address and java.rmi.server.UID&lt;/li&gt;
 &lt;li&gt;{uuid}: an unique identifier, based on the IP address and java.util.UUID&lt;/li&gt;
 &lt;li&gt;{hostname}: the name of the machine the application runs on&lt;/li&gt;
 &lt;li&gt;{username}: username from the credentials found using authAlias, or the username attribute&lt;/li&gt;
 &lt;li&gt;{password}: password from the credentials found using authAlias, or the password attribute&lt;/li&gt;
 &lt;li&gt;{fixeddate}: fake date, for testing only&lt;/li&gt;
 &lt;li&gt;{fixeduid}: fake uid, for testing only&lt;/li&gt;
 &lt;li&gt;{fixedhostname}: fake hostname, for testing only&lt;/li&gt;
 &lt;/ul&gt;
 A guid can be generated using {hostname}_{uid}, see also
 &lt;a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/rmi/server/uid.html\"&gt;http://java.sun.com/j2se/1.4.2/docs/api/java/rmi/server/uid.html&lt;/a&gt; for more information about (g)uid's or 
 &lt;a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/util/uuid.html\"&gt;http://docs.oracle.com/javase/1.5.0/docs/api/java/util/uuid.html&lt;/a&gt; for more information about uuid's.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="authAlias" type="xs:string">
        <xs:annotation>
          <xs:documentation>Alias used to obtain username and password, used when a &lt;code&gt;pattern&lt;/code&gt; containing {username} or {password} is specified</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="username" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default username that is used when a &lt;code&gt;pattern&lt;/code&gt; containing {username} is specified</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="password" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default password that is used when a &lt;code&gt;pattern&lt;/code&gt; containing {password} is specified</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="formatString" type="xs:string">
        <xs:annotation>
          <xs:documentation>Used in combination with types &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;datetime&lt;/code&gt;"</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="decimalSeparator" type="xs:string">
        <xs:annotation>
          <xs:documentation>Used in combination with type &lt;code&gt;number&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="groupingSeparator" type="xs:string">
        <xs:annotation>
          <xs:documentation>Used in combination with type &lt;code&gt;number&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="minLength" type="frankInt">
        <xs:annotation>
          <xs:documentation>If set (&gt;=0) and the length of the value of the parameter falls short of this minimum length, the value is padded</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="maxLength" type="frankInt">
        <xs:annotation>
          <xs:documentation>If set (&gt;=0) and the length of the value of the parameter exceeds this maximum length, the length is trimmed to this maximum length</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="maxInclusive" type="xs:string">
        <xs:annotation>
          <xs:documentation>Used in combination with type &lt;code&gt;number&lt;/code&gt;; if set and the value of the parameter exceeds this maximum value, this maximum value is taken</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="minInclusive" type="xs:string">
        <xs:annotation>
          <xs:documentation>Used in combination with type &lt;code&gt;number&lt;/code&gt;; if set and the value of the parameter falls short of this minimum value, this minimum value is taken</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hidden" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the value of the parameter will not be shown in the log (replaced by asterisks)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.parameters.Parameter" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="param" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Pipeline">
    <xs:annotation>
      <xs:documentation>Processor and keeper of a line of Pipes.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="InputValidatorElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="OutputValidatorElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="InputWrapperElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="OutputWrapperElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:element ref="Exits" minOccurs="0" maxOccurs="1" />
        <xs:element ref="Global-forwards" minOccurs="0" maxOccurs="1" />
        <xs:element ref="Locker" minOccurs="0" maxOccurs="1" />
        <xs:group ref="CacheElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="PipeElementGroup" minOccurs="1" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="firstPipe" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the first pipe to execute when a message is to be processed Default: first pipe of the pipeline</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="maxThreads" type="frankInt">
        <xs:annotation>
          <xs:documentation>Maximum number of threads that may execute this Pipeline simultaneously, use 0 to disable limit Default: 0</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="storeOriginalMessageWithoutNamespaces" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; the original message without namespaces (and prefixes) is stored under the session key originalMessageWithoutNamespaces Default: false</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="messageSizeWarn" type="xs:string">
        <xs:annotation>
          <xs:documentation>If messageSizeWarn&gt;=0 and the size of the input or result pipe message exceeds the value specified a warning message is logged. You can specify the value with the suffixes &lt;code&gt;KB&lt;/code&gt;, &lt;code&gt;MB&lt;/code&gt; or &lt;code&gt;GB&lt;/code&gt; Default: application default (3MB)"</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="transformNullMessage" type="xs:string">
        <xs:annotation>
          <xs:documentation>when specified and &lt;code&gt;null&lt;/code&gt; is received as a message the message is changed to the specified value</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="adapterToRunBeforeOnEmptyInput" type="xs:string">
        <xs:annotation>
          <xs:documentation>when specified and an empty message is received the specified adapter is run before passing the message (response from specified adapter) to the pipeline</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="transactionTimeout" type="frankInt">
        <xs:annotation>
          <xs:documentation>Timeout (in seconds) of transaction started to process a message. Default: &lt;code&gt;0&lt;/code&gt; (use system default)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="transactionAttribute">
        <xs:simpleType>
          <xs:union memberTypes="TransactionAttributeAttributeValuesType variableRef">
            <xs:annotation>
              <xs:documentation>The &lt;code&gt;transactionAttribute&lt;/code&gt; declares transactional behavior of execution. It applies both to database transactions and XA transactions.The pipeline uses this to start a new transaction or suspend the current one when required. For developers: it is equalto &lt;a href="https://docs.oracle.com/javaee/7/tutorial/transactions003.htm"&gt;EJB transaction attribute&lt;/a&gt;. Possible values for transactionAttribute:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; Default: Supports</xs:documentation>
            </xs:annotation>
          </xs:union>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.core.PipeLine" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="pipeline" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Forward">
    <xs:annotation>
      <xs:documentation>Bean that knows a functional name of a Forward, to be referred by
 other Pipes and the PipeLine.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>the &lt;code&gt;name&lt;/code&gt; is a symbolic reference to a &lt;code&gt;path&lt;/code&gt;.&lt;br/&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="path" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>The name of the next Pipe or Exit. When the Pipeline doesn't have an Exits element configured it will be
 initialized with one Exit having name READY and state SUCCESS</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.core.PipeForward" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="forward" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Locker">
    <xs:annotation>
      <xs:documentation>Locker of scheduler jobs and pipes.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="objectId" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>Identifier for this lock</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:union memberTypes="LockTypeAttributeValuesType variableRef">
            <xs:annotation>
              <xs:documentation>Type for this lock: P(ermanent) or T(emporary). A temporary lock is released after the job has completed Default: T</xs:documentation>
            </xs:annotation>
          </xs:union>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="dateFormatSuffix" type="xs:string">
        <xs:annotation>
          <xs:documentation>Format for date which is added after &lt;code&gt;objectid&lt;/code&gt; (e.g. yyyyMMdd to be sure the job is executed only once a day)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="retention" type="frankInt">
        <xs:annotation>
          <xs:documentation>The time (for type=P in days and for type=T in hours) to keep the record in the database before making it eligible for deletion by a cleanup process Default: 30 days (type=P), 4 hours (type=T)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="numRetries" type="frankInt">
        <xs:annotation>
          <xs:documentation>The number of times an attempt should be made to acquire a lock, after this many times an exception is thrown when no lock could be acquired, when -1 the number of retries is unlimited Default: 0</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="firstDelay" type="frankInt">
        <xs:annotation>
          <xs:documentation>The time in ms to wait before the first attempt to acquire a lock is made Default: 0</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="retryDelay" type="frankInt">
        <xs:annotation>
          <xs:documentation>The time in ms to wait before another attempt to acquire a lock is made Default: 10000</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ignoreTableNotExist" type="frankBoolean" />
      <xs:attribute name="transactionTimeout" type="frankInt">
        <xs:annotation>
          <xs:documentation>Timeout (in seconds) of transaction started to process a message. Default: &lt;code&gt;0&lt;/code&gt; (use system default)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lockWaitTimeout" type="frankInt">
        <xs:annotation>
          <xs:documentation>If &gt; 0: The time in s to wait before the INSERT statement to obtain the lock is canceled.  Default: 0</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="transactionAttribute">
        <xs:simpleType>
          <xs:union memberTypes="TransactionAttributeAttributeValuesType variableRef">
            <xs:annotation>
              <xs:documentation>The &lt;code&gt;transactionAttribute&lt;/code&gt; declares transactional behavior of execution. It applies both to database transactions and XA transactions.The pipeline uses this to start a new transaction or suspend the current one when required. For developers: it is equalto &lt;a href="https://docs.oracle.com/javaee/7/tutorial/transactions003.htm"&gt;EJB transaction attribute&lt;/a&gt;. Possible values for transactionAttribute:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; Default: Supports</xs:documentation>
            </xs:annotation>
          </xs:union>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="datasourceName" type="xs:string">
        <xs:annotation>
          <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too Default: ${jdbc.datasource.default}</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="authAlias" type="xs:string">
        <xs:annotation>
          <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="username" type="xs:string">
        <xs:annotation>
          <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="password" type="xs:string">
        <xs:annotation>
          <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="transacted" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>controls the use of transactions</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="connectionsArePooled" type="frankBoolean" />
      <xs:attribute name="authentication" type="xs:string">
        <xs:annotation>
          <xs:documentation>maps to the field context.security_authentication</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="credentials" type="xs:string">
        <xs:annotation>
          <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="initialContextFactoryName" type="xs:string">
        <xs:annotation>
          <xs:documentation>class to use as initial context factory</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="providerURL" type="xs:string" />
      <xs:attribute name="securityProtocol" type="xs:string">
        <xs:annotation>
          <xs:documentation>maps to the field context.security_protocol</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="urlPkgPrefixes" type="xs:string">
        <xs:annotation>
          <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="principal" type="xs:string">
        <xs:annotation>
          <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="jndiAuthAlias" type="xs:string">
        <xs:annotation>
          <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="jndiContextPrefix" type="xs:string" />
      <xs:attribute name="jndiProperties" type="xs:string" />
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the sender or the listener</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.util.Locker" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="locker" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Exits">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Exit" minOccurs="1" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.core.PipeLineExits" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="exits" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Exit">
    <xs:annotation>
      <xs:documentation>The Exit of a Pipeline that specifies the end state of a PipeLine.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>The name of the Exit that can be referenced by the Forward of a Pipe. When a Pipeline doesn't have an Exits
 element configured it will be initialized with one Exit having name READY (and state SUCCESS)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="state" use="required">
        <xs:simpleType>
          <xs:union memberTypes="ExitStateAttributeValuesType variableRef">
            <xs:annotation>
              <xs:documentation>The state of the Pipeline that is returned to the Receiver for this Exit. When a Pipeline doesn't have an Exits
 element configured it will be initialized with one Exit having state SUCCESS (and name READY)</xs:documentation>
            </xs:annotation>
          </xs:union>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>HTTP statusCode e.g. &lt;code&gt;500&lt;/code&gt; Default: 200</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="responseRoot" type="xs:string">
        <xs:annotation>
          <xs:documentation>Configures the responseRoot in the OpenAPI schema for this exit. If not set, the responseRoot value of the validator will be used. If that contains multiple (comma separated) values, the first will be used for the exits with state &lt;code&gt;SUCCESS&lt;/code&gt;, the last for the other exits.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="empty" type="xs:string">
        <xs:annotation>
          <xs:documentation>If using RestListener and set to &lt;code&gt;true&lt;/code&gt;, this removes the output and shows a blank page, the output is still logged in the ladybug testtool Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.core.PipeLineExit" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="exit" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Global-forwards">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Forward" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.core.PipeForwards" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="global-forwards" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Flow">
    <xs:annotation>
      <xs:documentation>The flow contains the handlers to handle records of a specific type.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="recordKey" type="xs:string">
        <xs:annotation>
          <xs:documentation>Key under which this flow is registered in the manager</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="nextRecordHandlerManagerRef" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the manager to be used after handling this record</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="recordHandlerRef" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the recordHandler to be used to transform records of the type specified in the key (optional)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="recordHandlerManagerRef" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the manager to which this flow must be added</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="resultHandlerRef" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the resultHandler to be used to handle the transformed result</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="openBlockBeforeLine" type="xs:string">
        <xs:annotation>
          <xs:documentation>Instructs the resultHandler to start a new block before the parsed line is processed</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="closeBlockBeforeLine" type="xs:string">
        <xs:annotation>
          <xs:documentation>Instructs the resultHandler to end the specified block before the parsed line is processed</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="openBlockAfterLine" type="xs:string">
        <xs:annotation>
          <xs:documentation>Instructs the resultHandler to start a new block after the parsed line is processed</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="closeBlockAfterLine" type="xs:string">
        <xs:annotation>
          <xs:documentation>Instructs the resultHandler to end the specified block after the parsed line is processed</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="autoCloseBlock" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, any open block of this type (and other nested open 'autoClose' block) is closed before a new one of the same type is opened. At a forced close, nested blocks are closed too (since 4.9) Default: true</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="openBlockBeforeLineNumber" type="frankInt">
        <xs:annotation>
          <xs:documentation>If &amp;gt;0 the &lt;code&gt;openBlockBeforeLine&lt;/code&gt; instruction is only performed when the current line number is a multiple of this value Default: 0</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.RecordHandlingFlow" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="flow" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="InputFields">
    <xs:complexType>
      <xs:attribute name="value" type="xs:string" />
      <xs:attribute name="description" type="xs:string" />
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.InputfieldsPart" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="inputFields" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="OutputFields">
    <xs:complexType>
      <xs:attribute name="value" type="xs:string" />
      <xs:attribute name="description" type="xs:string" />
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.OutputfieldsPart" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="outputFields" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Scheduler">
    <xs:annotation>
      <xs:documentation>Configure/start/stop lifecycles are managed by Spring.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="JobElementGroup" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.configuration.ScheduleManager" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="scheduler" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="DirectoryCleaner">
    <xs:annotation>
      <xs:documentation>Cleans up a directory.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="directory" type="xs:string">
        <xs:annotation>
          <xs:documentation>directory to be cleaned up</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="retention" type="xs:string">
        <xs:annotation>
          <xs:documentation>time (with suffix 'd', 'h', 'm' or 's' in milliseconds) that must have passed at least before a file will be deleted Default: 30d</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="subdirectories" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, files in subdirectories will be deleted, too Default: false</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="deleteEmptySubdirectories" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, empty subdirectories will be deleted, too Default: false</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="notExistWarn" type="frankBoolean">
        <xs:annotation>
          <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about not existing directories Default: true</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.util.DirectoryCleaner" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="directoryCleaner" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="SapSystems">
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="SapSystemElementGroup" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.configuration.extensions.SapSystems" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="sapSystems" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="JmsRealms">
    <xs:annotation>
      <xs:documentation>Singleton that has the different jmsRealms.&lt;br/&gt;
 Typical use: JmsRealmFactory.getInstance().&amp;lt;method to execute&amp;gt;
 &lt;br/&gt;</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="JmsRealm" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jms.JmsRealmFactory" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="jmsRealms" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="JmsRealm">
    <xs:annotation>
      <xs:documentation>A JmsRealm is a definition of a JMS provider, and is kind of a utility
 class to prevent the tedeous work of repeatedly defining all parameters
 to connect to a queue or topic.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="aliasForRealm" type="xs:string">
        <xs:annotation>
          <xs:documentation>Includes another realm into this one</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="realmName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Set the name of this realm&lt;br/&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="queueConnectionFactoryName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Set the name of the QueueConnectionFactory&lt;br/&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="topicConnectionFactoryName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Set the name of the TopicConnectionFactory&lt;br/&gt;</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="datasourceName" type="xs:string" />
      <xs:attribute name="securityProtocol" type="xs:string" />
      <xs:attribute name="urlPkgPrefixes" type="xs:string" />
      <xs:attribute name="authentication" type="xs:string" />
      <xs:attribute name="credentials" type="xs:string" />
      <xs:attribute name="initialContextFactoryName" type="xs:string" />
      <xs:attribute name="providerURL" type="xs:string" />
      <xs:attribute name="userTransactionUrl" type="xs:string" />
      <xs:attribute name="principal" type="xs:string" />
      <xs:attribute name="jndiAuthAlias" type="xs:string" />
      <xs:attribute name="authAlias" type="xs:string" />
      <xs:attribute name="jndiContextPrefix" type="xs:string" />
      <xs:attribute name="jndiProperties" type="xs:string" />
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jms.JmsRealm" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="jmsRealm" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Monitoring">
    <xs:annotation>
      <xs:documentation>Manager for Monitoring.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="DestinationElementGroup" minOccurs="0" maxOccurs="unbounded" />
        <xs:element ref="Monitor" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.monitoring.MonitorManager" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="monitoring" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Monitor">
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="TriggerElementGroup" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="destinations" type="xs:string" />
      <xs:attribute name="name" type="xs:string" />
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:union memberTypes="EventTypeEnumAttributeValuesType variableRef" />
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="typeEnum">
        <xs:simpleType>
          <xs:union memberTypes="EventTypeEnumAttributeValuesType variableRef" />
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="raised" type="frankBoolean" />
      <xs:attribute name="alarmSeverityEnum">
        <xs:simpleType>
          <xs:union memberTypes="SeverityEnumAttributeValuesType variableRef" />
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="additionalHitCount" type="frankInt" />
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.monitoring.Monitor" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="monitor" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:element name="Adapterfilter">
    <xs:annotation>
      <xs:documentation>Filter on Adapters, used by Triggers.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Source" minOccurs="0" maxOccurs="unbounded" type="xs:string" />
      </xs:sequence>
      <xs:attribute name="adapter" type="xs:string">
        <xs:annotation>
          <xs:documentation>Set the name of the Adapter that this AdapterFilter filters on.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.monitoring.AdapterFilter" use="prohibited" />
      <xs:attribute ref="active" />
      <xs:attribute name="elementRole" type="xs:string" fixed="adapterfilter" use="prohibited" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:complexType name="ConfigurationType">
    <xs:group ref="ConfigurationDeclaredChildGroup" />
    <xs:attributeGroup ref="ConfigurationDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.configuration.Configuration" use="prohibited" />
  </xs:complexType>
  <xs:group name="ConfigurationDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Module" minOccurs="0" maxOccurs="unbounded" />
      <xs:element ref="Adapter" minOccurs="0" maxOccurs="unbounded" />
      <xs:element ref="Scheduler" minOccurs="0" maxOccurs="1" />
      <xs:element ref="SapSystems" minOccurs="0" maxOccurs="1" />
      <xs:element ref="JmsRealms" minOccurs="0" maxOccurs="1" />
      <xs:element ref="Monitoring" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="ListenerElementGroup">
    <xs:choice>
      <xs:element name="Listener">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="Param" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ListenerElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:simpleType name="ParameterTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="STRING">
        <xs:annotation>
          <xs:documentation>Renders the contents of the first node (in combination with xslt or xpath). Please note that 
 if there are child nodes, only the contents are returned, use &lt;code&gt;XML&lt;/code&gt; if the xml tags are required</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="XML">
        <xs:annotation>
          <xs:documentation>Renders an xml-nodeset as an xml-string (in combination with xslt or xpath). This will include the xml tags</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="NODE">
        <xs:annotation>
          <xs:documentation>Renders the CONTENTS of the first node as a nodeset
 that can be used as such when passed as xslt-parameter (only for XSLT 1.0).
 Please note that the nodeset may contain multiple nodes, without a common root node.
 N.B. The result is the set of children of what you might expect it to be...</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DOMDOC">
        <xs:annotation>
          <xs:documentation>Renders XML as a DOM document; similar to &lt;code&gt;node&lt;/code&gt;
			with the distinction that there is always a common root node (required for XSLT 2.0)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DATE">
        <xs:annotation>
          <xs:documentation>Converts the result to a Date, by default using formatString &lt;code&gt;yyyy-MM-dd&lt;/code&gt;.
 When applied as a JDBC parameter, the method setDate() is used</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TIME">
        <xs:annotation>
          <xs:documentation>Converts the result to a Date, by default using formatString &lt;code&gt;HH:mm:ss&lt;/code&gt;.
 When applied as a JDBC parameter, the method setTime() is used</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DATETIME">
        <xs:annotation>
          <xs:documentation>Converts the result to a Date, by default using formatString &lt;code&gt;yyyy-MM-dd HH:mm:ss&lt;/code&gt;.
 When applied as a JDBC parameter, the method setTimestamp() is used</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TIMESTAMP">
        <xs:annotation>
          <xs:documentation>Similar to &lt;code&gt;DATETIME&lt;/code&gt;, except for the formatString that is &lt;code&gt;yyyy-MM-dd HH:mm:ss.SSS&lt;/code&gt; by default</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="XMLDATETIME">
        <xs:annotation>
          <xs:documentation>Converts the result from a XML formatted dateTime to a Date.
 When applied as a JDBC parameter, the method setTimestamp() is used</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="NUMBER">
        <xs:annotation>
          <xs:documentation>Converts the result to a Number, using decimalSeparator and groupingSeparator.
 When applied as a JDBC parameter, the method setDouble() is used</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INTEGER">
        <xs:annotation>
          <xs:documentation>Converts the result to an Integer</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BOOLEAN">
        <xs:annotation>
          <xs:documentation>Converts the result to a Boolean</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BINARY">
        <xs:annotation>
          <xs:documentation>Forces the parameter value to be treated as binary data (eg. when using a SQL BLOB field).</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:group name="SenderElementGroup">
    <xs:choice>
      <xs:element name="Sender">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="CacheElementGroup" />
              <xs:element ref="Param" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="SenderElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="CacheElementGroup">
    <xs:choice>
      <xs:element name="Cache">
        <xs:complexType>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="cache" use="prohibited" />
          <xs:attribute name="className" type="xs:string" default="nl.nn.adapterframework.cache.EhCache" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="CacheElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="CacheElementGroupBase">
    <xs:choice>
      <xs:element name="EhCache">
        <xs:annotation>
          <xs:documentation>General Cache provider.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EhCacheType">
              <xs:attribute name="elementRole" type="xs:string" fixed="cache" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="EhCacheType">
    <xs:attributeGroup ref="EhCacheCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.cache.EhCache" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="EhCacheDeclaredAttributeGroup">
    <xs:attribute name="maxElementsInMemory" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of elements in memory, before they are evicted Default: 100</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="memoryStoreEvictionPolicy" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;LRU&lt;/code&gt;=Least Recent Use,&lt;code&gt;LFU&lt;/code&gt;=Least Frequent Use or &lt;code&gt;FIFO&lt;/code&gt;=First In - First Out Default: LRU</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="eternal" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the elements in the cache are eternal, i.e. never expire Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeToLiveSeconds" type="frankInt">
      <xs:annotation>
        <xs:documentation>The amount of time &lt;i&gt;in seconds&lt;/i&gt; to live for an element from its creation date Default: 36000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeToIdleSeconds" type="frankInt">
      <xs:annotation>
        <xs:documentation>The amount of time &lt;i&gt;in seconds&lt;/i&gt; to live for an element from its last accessed or modified date Default: 36000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overflowToDisk" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the elements that are evicted from memory are spooled to disk Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxElementsOnDisk" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of elements on disk, before they are removed Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="diskPersistent" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the the cache is reloaded after the JVM restarts Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="diskExpiryThreadIntervalSeconds" type="frankInt">
      <xs:annotation>
        <xs:documentation>How often to run the disk store expiry thread Default: 600</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="EhCacheCumulativeAttributeGroup">
    <xs:attributeGroup ref="EhCacheDeclaredAttributeGroup" />
    <xs:attributeGroup ref="CacheAdapterBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="CacheAdapterBaseDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the cache, will be lowercased Default: &lt;code&gt;&amp;lt;ownerName&amp;gt;&lt;/code&gt;_cache</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract cache key from request message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyXPathOutputType">
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>output type of xpath expression to extract cache key from request message Default: text</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keyNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for keyxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract cache key from request message. Use in combination with cacheEmptyKeys to inhibit caching for certain groups of request messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyInputSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to use as input for transformation of request message to key by keyxpath or keystylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheEmptyKeys" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether empty keys are used for caching. when set true, cache entries with empty keys can exist. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract value to be cached key from response message. Use in combination with cacheEmptyValues to inhibit caching for certain groups of response messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueXPathOutputType">
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="valueNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for valuexpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract value to be cached from response message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueInputSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to use as input for transformation of response message to cached value by valuexpath or valuestylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheEmptyValues" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether empty values will be cached. when set true, empty cache entries can exist for any key. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:simpleType name="OutputTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="TEXT" />
      <xs:enumeration value="XML" />
    </xs:restriction>
  </xs:simpleType>
  <xs:group name="SenderElementGroupBase">
    <xs:choice>
      <xs:element name="Afm2EdiFactSender">
        <xs:annotation>
          <xs:documentation>Domparser om AFM-XML berichten om te zetten in edifactberichten (voor de backoffice).</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Afm2EdiFactSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="AmazonS3Sender">
        <xs:annotation>
          <xs:documentation>Sender to work with Amazon S3.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="AmazonS3SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CommandSender">
        <xs:annotation>
          <xs:documentation>Sender that executes either its input or a fixed line, with all parametervalues appended, as a command.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CommandSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DelaySender">
        <xs:annotation>
          <xs:documentation>Sender that sleeps for a specified time, which defaults to 5000 msecs.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DelaySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DirectQuerySender">
        <xs:annotation>
          <xs:documentation>QuerySender that interprets the input message as a query, possibly with attributes.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DirectQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EchoSender">
        <xs:annotation>
          <xs:documentation>Echos input to output.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EchoSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbJmsSender">
        <xs:annotation>
          <xs:documentation>ESB (Enterprise Service Bus) extension of JmsSender.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbJmsSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ExchangeFolderSender">
        <xs:annotation>
          <xs:documentation>Implementation of a FileSystemSender that enables to manipulate messages in a Exchange folder.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ExchangeFolderSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FileSystemSenderWithAttachmentsSender">
        <xs:annotation>
          <xs:documentation>FileSystem Sender extension to handle Attachments.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FileSystemSenderWithAttachmentsType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedQuerySender">
        <xs:annotation>
          <xs:documentation>QuerySender that assumes a fixed query, possibly with attributes.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedResultSender">
        <xs:annotation>
          <xs:documentation>FixedResultSender, same behaviour as FixedResultPipe, but now as a ISender.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedResultSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FtpFileSystemSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FtpFileSystemSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="HttpSender">
        <xs:annotation>
          <xs:documentation>Sender for the HTTP protocol using GET, POST, PUT or DELETE.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="HttpSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IbisJavaSender">
        <xs:annotation>
          <xs:documentation>Posts a message to another IBIS-adapter or application in the same JVM using IbisServiceDispatcher.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IbisJavaSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IbisLocalSender">
        <xs:annotation>
          <xs:documentation>Posts a message to another IBIS-adapter in the same IBIS instance.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IbisLocalSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IbisWebServiceSender">
        <xs:annotation>
          <xs:documentation>Posts a message to another IBIS-adapter as a WebService.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IbisWebServiceSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ImapSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ImapSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JavascriptSender">
        <xs:annotation>
          <xs:documentation>Sender used to run javascript code using J2V8 or Rhino
 
 This sender can execute a function of a given javascript file, the result of the function will be the output of the sender.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JavascriptSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JmsSender">
        <xs:annotation>
          <xs:documentation>This class sends messages with JMS.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JmsSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonXsltSender">
        <xs:annotation>
          <xs:documentation>Perform an XSLT transformation with a specified stylesheet on a JSON input, yielding JSON, yielding JSON, XML or text.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonXsltSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LdapSender">
        <xs:annotation>
          <xs:documentation>Sender to obtain information from and write to an LDAP Directory.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LdapSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LocalFileSystemSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LocalFileSystemSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LogSender">
        <xs:annotation>
          <xs:documentation>Sender that just logs its message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LogSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MailSender">
        <xs:annotation>
          <xs:documentation>sender that sends a mail specified by an XML message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MailSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MessageStoreSender">
        <xs:annotation>
          <xs:documentation>Send messages to the ibisstore to have them processed exactly-once by another
 adapter which will read the messages using a MessageStoreListener.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MessageStoreSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MongoDbSender">
        <xs:annotation>
          <xs:documentation>Sender to perform action on a MongoDB database.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MongoDbSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MqttSender">
        <xs:annotation>
          <xs:documentation>MQTT listener which will connect to a broker and subscribe to a topic.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MqttSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MultipartHttpSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MultipartHttpSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ParallelSendersSender">
        <xs:annotation>
          <xs:documentation>Collection of Senders, that are executed all at the same time.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ParallelSendersType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ReloadSender">
        <xs:annotation>
          <xs:documentation>Performs a reload on database configuration.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ReloadSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ResultSet2FileSender">
        <xs:annotation>
          <xs:documentation>QuerySender that writes each row in a ResultSet to a file.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ResultSet2FileSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba1Sender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba1SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba2Sender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba2SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SambaSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SambaSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SchedulerSender">
        <xs:annotation>
          <xs:documentation>Registers a trigger in the scheduler so that the message is send to a javalistener
 at a scheduled time.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SchedulerSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SendGridSender">
        <xs:annotation>
          <xs:documentation>Sender that sends a mail via SendGrid v3 (cloud-based SMTP provider).</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SendGridSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SenderSeriesSender">
        <xs:annotation>
          <xs:documentation>Series of Senders, that are executed one after another.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SenderSeriesType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SenderWrapperSender">
        <xs:annotation>
          <xs:documentation>Wrapper for senders, that allows to get input from a session variable, and to store output in a session variable.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SenderWrapperType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ShadowSender">
        <xs:annotation>
          <xs:documentation>Collection of Senders, that are executed all at the same time.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ShadowSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WebServiceNtlmSender">
        <xs:annotation>
          <xs:documentation>Sender that sends a message via a WebService based on NTLM authentication.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WebServiceNtlmSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WebServiceSender">
        <xs:annotation>
          <xs:documentation>Sender that sends a message via a WebService.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WebServiceSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XComSender">
        <xs:annotation>
          <xs:documentation>XCom client voor het versturen van files via XCom.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XComSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XfbSender">
        <xs:annotation>
          <xs:documentation>Sender for transferring files using the XFB protocol.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XfbSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlJmsBrowserSender">
        <xs:annotation>
          <xs:documentation>Sender for browsing and removing queue messages (with input and output in a XML message).</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlJmsBrowserSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlQuerySender">
        <xs:annotation>
          <xs:documentation>QuerySender that transforms the input message to a query.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlValidatorSender">
        <xs:annotation>
          <xs:documentation>&lt;code&gt;Sender&lt;/code&gt; that validates the input message against a XML-Schema.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlValidatorSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XsltSender">
        <xs:annotation>
          <xs:documentation>Perform an XSLT transformation with a specified stylesheet or XPath-expression.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XsltSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ZipWriterSender">
        <xs:annotation>
          <xs:documentation>Sender that writes an entry to a ZipStream, similar to ZipWriterPipe with action='write'.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ZipWriterSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="Afm2EdiFactSenderType">
    <xs:attributeGroup ref="Afm2EdiFactSenderDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.afm.Afm2EdiFactSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Afm2EdiFactSenderDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string" />
    <xs:attribute name="destination" type="xs:string" />
    <xs:attribute name="postbus" type="xs:string" />
    <xs:attribute name="tpnummer" type="xs:string" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="AmazonS3SenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="AmazonS3SenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.AmazonS3Sender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="AmazonS3SenderDeclaredAttributeGroup">
    <xs:attribute name="accessKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>access key to access to the AWS resources owned by the account</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secretKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>secret key to access to the AWS resources owned by the account</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain AWS credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chunkedEncodingDisabled" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>setting this flag will result in disabling chunked encoding for all requests. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceGlobalBucketAccessEnabled" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>set whether the client should be configured with global bucket access enabled. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientRegion" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the region that the client will be created from Default: eu-west-1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bucketName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the bucket to access</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>setting proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>setting proxy port</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="AmazonS3SenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="AmazonS3SenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="SenderWithParametersBaseDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="SenderBaseDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:attributeGroup name="FileSystemSenderDeclaredAttributeGroup">
    <xs:attribute name="action">
      <xs:simpleType>
        <xs:union memberTypes="FileSystemActionAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>If parameter [action] is set, then the attribute action value will be overridden with the value of the parameter.</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move or copy to is created if it does not exist Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, for actions move, copy or rename, the destination file is overwritten if it already exists Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="frankInt">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept. The inputFolder must point to the directory where the file resides Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept. Size is specified in plain bytes, suffixes like 'K', 'M' or 'G' are not recognized. The inputFolder must point to the directory where the file resides Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="frankInt">
      <xs:annotation>
        <xs:documentation>for the actions write and append, with rotateSize&gt;0: the number of backup files that is kept. The inputFolder must point to the directory where the file resides Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to look for in inputFolder e.g. '*.inp'. Works with actions move, copy, delete and list</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeWildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to be excluded when looking in inputFolder. Works with actions move, copy, delete and list</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNonEmptyFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to true then the folder and the content of the non empty folder will be deleted.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeLineSeparator" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to true then the system specific line separator will be appended to the file after executing the action. Works with actions write and append Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset to be used for read and write action</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="FileSystemActionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="list">
        <xs:annotation>
          <xs:documentation>list files in a folder/directory, specified by attribute &lt;code&gt;inputFolder&lt;/code&gt;, parameter &lt;code&gt;inputFolder&lt;/code&gt; or input message</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="info">
        <xs:annotation>
          <xs:documentation>show info about a single file, specified by attribute &lt;code&gt;filename&lt;/code&gt;, parameter &lt;code&gt;filename&lt;/code&gt; or input message</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="read">
        <xs:annotation>
          <xs:documentation>read a file, specified by attribute &lt;code&gt;filename&lt;/code&gt;, parameter &lt;code&gt;filename&lt;/code&gt; or input message</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="readDelete">
        <xs:annotation>
          <xs:documentation>like &lt;code&gt;read&lt;/code&gt;, but deletes the file after it has been read</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="move">
        <xs:annotation>
          <xs:documentation>move a file, specified by attribute &lt;code&gt;filename&lt;/code&gt;, parameter &lt;code&gt;filename&lt;/code&gt; or input message, to a folder specified by attribute &lt;code&gt;destination&lt;/code&gt; or parameter &lt;code&gt;destination&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="copy">
        <xs:annotation>
          <xs:documentation>copy a file, specified by attribute &lt;code&gt;filename&lt;/code&gt;, parameter &lt;code&gt;filename&lt;/code&gt; or input message, to a folder specified by attribute &lt;code&gt;destination&lt;/code&gt; or parameter &lt;code&gt;destination&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="delete">
        <xs:annotation>
          <xs:documentation>delete a file, specified by attribute &lt;code&gt;filename&lt;/code&gt;, parameter &lt;code&gt;filename&lt;/code&gt; or input message</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="mkdir">
        <xs:annotation>
          <xs:documentation>create a folder/directory, specified by attribute &lt;code&gt;inputFolder&lt;/code&gt;, parameter &lt;code&gt;inputFolder&lt;/code&gt; or input message</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="rmdir">
        <xs:annotation>
          <xs:documentation>remove a folder/directory, specified by attribute &lt;code&gt;inputFolder&lt;/code&gt;, parameter &lt;code&gt;inputFolder&lt;/code&gt; or input message</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="write">
        <xs:annotation>
          <xs:documentation>write contents, specified by parameter &lt;code&gt;contents&lt;/code&gt; or input message, to a file, specified by attribute &lt;code&gt;filename&lt;/code&gt;, parameter &lt;code&gt;filename&lt;/code&gt; or input message.
  At least one of the parameters must be specified. The missing parameter defaults to the input message. For streaming operation, the parameter &lt;code&gt;filename&lt;/code&gt; must be specified.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="append">
        <xs:annotation>
          <xs:documentation>(only for filesystems that support 'append') append contents, specified by parameter &lt;code&gt;contents&lt;/code&gt; or input message, to a file, specified by attribute &lt;code&gt;filename&lt;/code&gt;, parameter &lt;code&gt;filename&lt;/code&gt; or input message.
  At least one of the parameters must be specified. The missing parameter defaults to the input message. For streaming operation, the parameter &lt;code&gt;filename&lt;/code&gt; must be specified.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="rename">
        <xs:annotation>
          <xs:documentation>change the name of a file, specified by attribute &lt;code&gt;filename&lt;/code&gt;, parameter &lt;code&gt;filename&lt;/code&gt; or input message, to the value specified by attribute &lt;code&gt;destination&lt;/code&gt; or parameter &lt;code&gt;destination&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="forward">
        <xs:annotation>
          <xs:documentation>(for MailFileSystems only:) forward an existing file, specified by parameter &lt;code&gt;contents&lt;/code&gt; or input message, to a file, to an email address specified by attribute &lt;code&gt;destination&lt;/code&gt; or parameter &lt;code&gt;destination&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="listAttachments">
        <xs:annotation>
          <xs:documentation>Specific to FileSystemSenderWithAttachments</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="FileSystemSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="FileSystemSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CommandSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="CommandSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.CommandSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="CommandSenderDeclaredAttributeGroup">
    <xs:attribute name="command" type="xs:string">
      <xs:annotation>
        <xs:documentation>The command to be executed. Note: Executing a command in WAS requires &lt;&lt;ALL FILES&gt;&gt; execute permission to avoid that provide the absolute path of the command. Absolute path can be found with the following command 'which -a {commandName}'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOut" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of seconds to execute a command. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commandWithArguments" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>In case the command that will be executed contains arguments then this flag should be set to true Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CommandSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="CommandSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="DelaySenderType">
    <xs:attributeGroup ref="DelaySenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.DelaySender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="DelaySenderDeclaredAttributeGroup">
    <xs:attribute name="delayTime" type="frankInt">
      <xs:annotation>
        <xs:documentation>the time the thread will be put to sleep Default: 5000 [ms]</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="DelaySenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="DelaySenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="DirectQuerySenderType">
    <xs:group ref="JdbcSenderBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="JdbcQuerySenderBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.DirectQuerySender" use="prohibited" />
  </xs:complexType>
  <xs:group name="JdbcSenderBaseDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="JdbcSenderBaseDeclaredAttributeGroup">
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of seconds the driver will wait for a statement object to execute. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcSenderBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcSenderBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JdbcFacadeType">
    <xs:attributeGroup ref="JdbcFacadeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.JdbcFacade" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JdbcFacadeDeclaredAttributeGroup">
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too Default: ${jdbc.datasource.default}</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls the use of transactions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionsArePooled" type="frankBoolean" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcFacadeCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcFacadeDeclaredAttributeGroup" />
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the sender or the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="JndiBaseType">
    <xs:attributeGroup ref="JndiBaseDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jndi.JndiBase" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JndiBaseDeclaredAttributeGroup">
    <xs:attribute name="authentication" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="credentials" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="providerURL" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.security_protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlPkgPrefixes" type="xs:string">
      <xs:annotation>
        <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>loads JNDI (and other) properties from a JmsRealm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principal" type="xs:string">
      <xs:annotation>
        <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the sender or the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcQuerySenderBaseDeclaredAttributeGroup">
    <xs:attribute name="packageContent" type="xs:string">
      <xs:annotation>
        <xs:documentation>Controls wheter the returned package content is db2 format or xml format.
 Possible values:
 &lt;ul&gt;
 &lt;li&gt;select:&lt;/li&gt; xml content s expected
 &lt;li&gt;&lt;i&gt;anything else&lt;/i&gt;:&lt;/li&gt; db2 content is expected
 &lt;/ul&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryType">
      <xs:simpleType>
        <xs:union memberTypes="QueryTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Type of query to be executed Default: OTHER</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="scalar" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the value of the first column of the first row (or the startrow) is returned as the only result, as a simple non-xml value Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scalarExtended" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;scalar&lt;/code&gt; is also &lt;code&gt;true&lt;/code&gt;, but returns no value, one of the following is returned: &lt;ul&gt;&lt;li&gt;'[absent]' no row is found&lt;/li&gt;&lt;li&gt;'[null]' a row is found, but the value is a SQL-NULL&lt;/li&gt;&lt;li&gt;'[empty]' a row is found, but the value is a empty string&lt;/li&gt;&lt;/ul&gt; Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRows" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of rows to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries, -1 means unlimited rows Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startRow" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of the first row to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries. Rows before this are skipped from the output. Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value used in result as contents of fields that contain no value (sql-null) Default: &lt;i&gt;empty string&lt;/i&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>Query that can be used to obtain result of side-effect of update-query, like generated value of sequence. Example: SELECT mysequence.currval FROM dual</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnsReturned" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of columns whose values are to be returned. Works only if the driver implements jdbc 3.0 getGeneratedKeys(). 
 Note: not all drivers support multiple values and returned field names may vary between drivers.
 Works for H2 and Oracle. Could work for MS_SQL with a single identity column, with name GENERATED_KEYS, if a identity has been generated. Not supported for other DBMSes.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Named parameters will be auto detected by default. Every string in the query which equals &lt;code&gt;?{paramname}&lt;/code&gt; will be replaced by the value of the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="includeFieldDefinition" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the result contains besides the returned rows also includes a header with information about the fetched fields Default: application default (true)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trimSpaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rowIdSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If specified, the rowid of the processed row is put in the pipelinesession under the specified key (only applicable for &lt;code&gt;querytype=other&lt;/code&gt;). &lt;b&gt;Note:&lt;/b&gt; If multiple rows are processed a SqlException is thrown.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockRows" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="frankInt">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobColumn" type="frankInt">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateBlob': column that contains the BLOB to be updated Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateBlob': key of session variable that contains the data (String or InputStream) to be loaded to the BLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the BLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobBase64Direction">
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>controls whether the streamed blobdata will need to be base64 &lt;code&gt;encode&lt;/code&gt; or &lt;code&gt;decode&lt;/code&gt; or not.</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data. If blobCharset and blobSmartGet are not set, BLOBs are returned as bytes. Before version 7.6, blobs were base64 encoded after being read to accommodate for the fact that senders need to return a String. This is no longer the case</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobColumn" type="frankInt">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateClob': column that contains the CLOB to be updated Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateClob': key of session variable that contains the CLOB (String or InputStream) to be loaded to the CLOB. When empty, the input of the pipe, which then must be a String, is used.&lt;br/&gt;For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the CLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOutputstreamOnExit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Outputstream is not closed after BLOB or CLOB has been written to it Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset used when reading a stream (that is e.g. going to be written to a BLOB or CLOB). When empty, the stream is copied directly to the BLOB, without conversion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prettyPrint" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true and scalar=false, multiline indented XML is produced Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="QueryTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="SELECT">
        <xs:annotation>
          <xs:documentation>For queries that return data</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UPDATEBLOB">
        <xs:annotation>
          <xs:documentation>For queries that update a BLOB</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UPDATECLOB">
        <xs:annotation>
          <xs:documentation>For queries that update a CLOB</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="PACKAGE">
        <xs:annotation>
          <xs:documentation>To execute Oracle PL/SQL package</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="OTHER">
        <xs:annotation>
          <xs:documentation>For queries that return no data</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DirectionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ENCODE" />
      <xs:enumeration value="DECODE" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="JdbcQuerySenderBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcQuerySenderBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcSenderBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="EchoSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="EchoSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.EchoSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="EchoSenderDeclaredAttributeGroup">
    <xs:attribute name="synchronous" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>hack to allow to introduce a correlationid Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="EchoSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="EchoSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="EsbJmsSenderType">
    <xs:group ref="JmsSenderDeclaredChildGroup" />
    <xs:attributeGroup ref="EsbJmsSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.esb.EsbJmsSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="EsbJmsSenderDeclaredAttributeGroup">
    <xs:attribute name="messageProtocol">
      <xs:simpleType>
        <xs:union memberTypes="MessageProtocolAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>protocol of ESB service to be called</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="timeOut" type="frankInt">
      <xs:annotation>
        <xs:documentation>receiver timeout, in milliseconds
 ff.default 20000 (20s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode">
      <xs:simpleType>
        <xs:union memberTypes="DeliveryModeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Controls mode that messages are sent with Default: not set by application</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>(Only for synchronous=true). Maximum time in ms to wait for a reply. 0 means no timeout.  Default: 5000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the sender operates in RR mode: the a reply is expected, either on the queue specified in 'replyToName', or on a dynamically generated temporary queue Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>SOAPAction string sent as message property</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="MessageProtocolAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="FF">
        <xs:annotation>
          <xs:documentation>Fire &amp; Forget protocol</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="RR">
        <xs:annotation>
          <xs:documentation>Request-Reply protocol</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DeliveryModeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NOT_SET" />
      <xs:enumeration value="PERSISTENT" />
      <xs:enumeration value="NON_PERSISTENT" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="EsbJmsSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="EsbJmsSenderDeclaredAttributeGroup" />
    <xs:attribute name="destinationParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>Parameter that is used, if specified and not empty, to determine the destination. Overrides the destination attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the queue the reply is expected on. This value is sent in the JMSReplyTo-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of the JMSType field Default: not set by application</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="frankInt">
      <xs:annotation>
        <xs:documentation>Sets the priority that is used to deliver the message. Ranges from 0 to 9. Defaults to -1, meaning not set. Effectively the default priority is set by JMS to 4 Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string">
      <xs:annotation>
        <xs:documentation>SOAP encoding style URI</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string">
      <xs:annotation>
        <xs:documentation>SOAP service namespace URI</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of parameter containing SOAP header Default: soapHeader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store SOAP header of reply Default: replySoapHeader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod">
      <xs:simpleType>
        <xs:union memberTypes="LinkMethodAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>(Only used when synchronous='true' and and &lt;code&gt;replyToName&lt;/code&gt; is set). Indicates whether the server uses the correlationId from the pipeline, the correlationId from the message or the messageid in the correlationId field of the reply. This requires the sender to have set the correlationId at the time of sending. Default: MESSAGEID</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>A list of JMS headers of the response to add to the PipeLineSession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="JMSFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:simpleType name="LinkMethodAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="MESSAGEID">
        <xs:annotation>
          <xs:documentation>use the generated messageId as the correlationId in the selector for response messages</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CORRELATIONID">
        <xs:annotation>
          <xs:documentation>set the correlationId of the pipeline as the correlationId of the message sent, and use that as the correlationId in the selector for response messages</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CORRELATIONID_FROM_MESSAGE">
        <xs:annotation>
          <xs:documentation>do not automatically set the correlationId of the message sent, but use use the value found in that header after sending the message as the selector for response messages</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="JmsSenderType">
    <xs:group ref="JmsSenderDeclaredChildGroup" />
    <xs:attributeGroup ref="JmsSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jms.JmsSender" use="prohibited" />
  </xs:complexType>
  <xs:group name="JmsSenderDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="JmsSenderDeclaredAttributeGroup">
    <xs:attribute name="destinationParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>Parameter that is used, if specified and not empty, to determine the destination. Overrides the destination attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the sender operates in RR mode: the a reply is expected, either on the queue specified in 'replyToName', or on a dynamically generated temporary queue Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyToName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the queue the reply is expected on. This value is sent in the JMSReplyTo-header with the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of the JMSType field Default: not set by application</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode">
      <xs:simpleType>
        <xs:union memberTypes="DeliveryModeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Controls mode that messages are sent with Default: not set by application</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="priority" type="frankInt">
      <xs:annotation>
        <xs:documentation>Sets the priority that is used to deliver the message. Ranges from 0 to 9. Defaults to -1, meaning not set. Effectively the default priority is set by JMS to 4 Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string">
      <xs:annotation>
        <xs:documentation>SOAP encoding style URI</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string">
      <xs:annotation>
        <xs:documentation>SOAP service namespace URI</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>SOAPAction string sent as message property</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of parameter containing SOAP header Default: soapHeader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>(Only for synchronous=true). Maximum time in ms to wait for a reply. 0 means no timeout.  Default: 5000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to store SOAP header of reply Default: replySoapHeader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linkMethod">
      <xs:simpleType>
        <xs:union memberTypes="LinkMethodAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>(Only used when synchronous='true' and and &lt;code&gt;replyToName&lt;/code&gt; is set). Indicates whether the server uses the correlationId from the pipeline, the correlationId from the message or the messageid in the correlationId field of the reply. This requires the sender to have set the correlationId at the time of sending. Default: MESSAGEID</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>A list of JMS headers of the response to add to the PipeLineSession</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JmsSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="JmsSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JMSFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JMSFacadeType">
    <xs:attributeGroup ref="JMSFacadeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jms.JMSFacade" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JMSFacadeDeclaredAttributeGroup">
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the JMS destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationType">
      <xs:simpleType>
        <xs:union memberTypes="DestinationTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Type of the messageing destination Default: QUEUE</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="acknowledgeMode">
      <xs:simpleType>
        <xs:union memberTypes="AcknowledgeModeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>If not transacted, the way the application informs the JMS provider that it has successfully received a message. Default: auto</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="subscriberType">
      <xs:simpleType>
        <xs:union memberTypes="SubscriberTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Only applicable for topics Default: DURABLE</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI-name of the queueConnectionFactory, used when &lt;code&gt;destinationType&lt;code&gt;=&lt;/code&gt;QUEUE&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI-name of the topicConnectionFactory, used when &lt;code&gt;destinationType&lt;code&gt;=&lt;/code&gt;TOPIC&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). Useful when sending messages to MQ which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: MQJMS1044: String is not a valid hexadecimal number Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>Prefix to check before executing correlationIdToHex. If empty (and correlationIdToHex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationId to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationId). Default: id:</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="frankInt">
      <xs:annotation>
        <xs:documentation>The time &lt;i&gt;in milliseconds&lt;/i&gt; it takes for the message to expire. If the message is not consumed before, it will be lost. Must be a positive value for request/reply type of messages, 0 disables the expiry timeout  Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the length of the correlationId exceeds this maximum length, the correlationId is trimmed from the left side of a string to this maximum length Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value of this attribute is used as a selector to filter messages. Default: 0 (unlimited)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for authentication to JMS server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;false&lt;/code&gt;, the destinationName is used directly instead of performing a JNDI lookup Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="DestinationTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="QUEUE" />
      <xs:enumeration value="TOPIC" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AcknowledgeModeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="none" />
      <xs:enumeration value="auto">
        <xs:annotation>
          <xs:documentation>auto or auto_acknowledge: Specifies that the session is to automatically acknowledge consumer receipt of
 messages when message processing is complete.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="client">
        <xs:annotation>
          <xs:documentation>client or client_acknowledge: Specifies that the consumer is to acknowledge all messages delivered in this session.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="dups">
        <xs:annotation>
          <xs:documentation>dups or dups_ok_acknowledge: Specifies that the session is to "lazily" acknowledge the 
 delivery of messages to the consumer. "Lazy" means that the consumer can delay the acknowledgment
 of messages to the server until a convenient time; meanwhile the server might redeliver messages.
 This mode reduces the session overhead. If JMS fails, the consumer may receive duplicate messages.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SubscriberTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="DURABLE" />
      <xs:enumeration value="TRANSIENT" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="JMSFacadeCumulativeAttributeGroup">
    <xs:attributeGroup ref="JMSFacadeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JndiBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ExchangeFolderSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="ExchangeFolderSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.ExchangeFolderSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ExchangeFolderSenderDeclaredAttributeGroup">
    <xs:attribute name="mailAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>The mail address of the mailbox connected to (also used for auto discovery)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>Url of the Exchange server. Set to e.g. https://outlook.office365.com/EWS/Exchange.asmx to speed up start up, leave empty to use autodiscovery</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="accessToken" type="xs:string">
      <xs:annotation>
        <xs:documentation>AccessToken for authentication to Exchange mail server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain accessToken or username and password for authentication to Exchange mail server. If the alias refers to a combination of a username and a password, the deprecated Basic Authentication method is used. If the alias refers to a password without a username, the password is treated as the accessToken.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filter" type="xs:string">
      <xs:annotation>
        <xs:documentation>If empty, all mails are retrieved. If set to &lt;code&gt;NDR&lt;/code&gt; only Non-Delivery Report mails ('bounces') are retrieved</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyAddressFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of fields to try as response address Default: replyTo,from,sender,Return-Path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>proxy port Default: 8080</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy authAlias</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ExchangeFolderSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="ExchangeFolderSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FileSystemSenderWithAttachmentsType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.filesystem.FileSystemSenderWithAttachments" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="FixedQuerySenderType">
    <xs:group ref="JdbcSenderBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="FixedQuerySenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.FixedQuerySender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="FixedQuerySenderDeclaredAttributeGroup">
    <xs:attribute name="query" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The SQL query text to be excecuted each time sendMessage() is called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="batchSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>When set larger than 0 and used as a child of an IteratingPipe, then the database calls are made in batches of this size. Only for queryType=other. Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FixedQuerySenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="FixedQuerySenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcQuerySenderBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FixedResultSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="FixedResultSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.FixedResultSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="FixedResultSenderDeclaredAttributeGroup">
    <xs:attribute name="substituteVars" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>should values between ${ and } be resolved from the pipelinesession Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file containing the resultmessage</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnString" type="xs:string">
      <xs:annotation>
        <xs:documentation>returned message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceFrom" type="xs:string" />
    <xs:attribute name="replaceTo" type="xs:string" />
    <xs:attribute name="styleSheetName" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="FixedResultSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="FixedResultSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FtpFileSystemSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="FtpFileSystemSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.FtpFileSystemSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="FtpFileSystemSenderDeclaredAttributeGroup">
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>pathname of the file or directory to list. Default: Home folder of the ftp user</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name or ip address of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>Port number of remote host Default: 21</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the user to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy hostname</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>Proxy port Default: 1080</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias to obtain credentials to authenticate on proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default user name in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ftpType">
      <xs:simpleType>
        <xs:union memberTypes="FtpTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>FTP protocol to use Default: FTP</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="fileType">
      <xs:simpleType>
        <xs:union memberTypes="FileTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>File type</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="messageIsContent" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the contents of the message is send, otherwise it message contains the local filenames of the files to be send Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="passive" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, passive ftp is used: before data is sent, a pasv command is issued, and the connection is set up by the server Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyTransportType" type="frankInt">
      <xs:annotation>
        <xs:documentation>(sftp) Transport type in case of sftp (1=standard, 2=http, 3=socks4, 4=socks5) Default: 4</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefCSEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) Optional preferred encryption from client to server for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefSCEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) Optional preferred encryption from server to client for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyFilePath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) Path to private key file for sftp authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) Name of the alias to obtain credentials for passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) Passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="knownHostsPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>(sftp) Path to file with knownhosts</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consoleKnownHostsVerifier" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(sftp)  Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystore" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Resource url to keystore or certificate to be used for authentication. If none specified, the JVMs default keystore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType">
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>(ftps) Type of keystore Default: pkcs12</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Authentication alias used to obtain keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Default password to access keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Alias to obtain specific certificate or key in keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Authentication alias to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Default password to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Key manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Resource url to truststore to be used for authenticating peer. If none specified, the JVMs default truststore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType">
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>(ftps) Type of truststore Default: jks</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Authentication alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Default password to access truststore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Trust manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(ftps) If &lt;code&gt;true&lt;/code&gt;, the hostname in the certificate will be checked against the actual hostname of the peer</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(ftps) If &lt;code&gt;true&lt;/code&gt;, self signed certificates are accepted Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(ftps) If &lt;code&gt;true&lt;/code&gt;, CertificateExpiredExceptions are ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prot">
      <xs:simpleType>
        <xs:union memberTypes="ProtAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Sets the &lt;code&gt;Data Channel Protection Level&lt;/code&gt;. Default: C</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keyboardInteractive" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, keyboardinteractive is used to login Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="FtpTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="FTP" />
      <xs:enumeration value="SFTP" />
      <xs:enumeration value="FTPSI" />
      <xs:enumeration value="FTPSX(TLS)" />
      <xs:enumeration value="FTPSX(SSL)" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FileTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ASCII" />
      <xs:enumeration value="BINARY" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="KeystoreTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="PKCS12" />
      <xs:enumeration value="PEM" />
      <xs:enumeration value="JKS" />
      <xs:enumeration value="JCEKS" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ProtAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="C">
        <xs:annotation>
          <xs:documentation>Clear</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="S">
        <xs:annotation>
          <xs:documentation>Safe(SSL protocol only)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="E">
        <xs:annotation>
          <xs:documentation>Confidential(SSL protocol only)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="P">
        <xs:annotation>
          <xs:documentation>Private</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="FtpFileSystemSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="FtpFileSystemSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="HttpSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="HttpSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.http.HttpSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="HttpSenderDeclaredAttributeGroup">
    <xs:attribute name="postType">
      <xs:simpleType>
        <xs:union memberTypes="PostTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>When &lt;code&gt;methodType=POST&lt;/code&gt;, the type of post request Default: RAW</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="firstBodyPartName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;methodType=POST&lt;/code&gt; and &lt;code&gt;postType=URLENCODED&lt;/code&gt;, &lt;code&gt;FORM-DATA&lt;/code&gt; or &lt;code&gt;MTOM&lt;/code&gt;) Name of the first body part</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreRedirects" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if set, the result is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set and &lt;code&gt;methodtype=post&lt;/code&gt; and &lt;code&gt;paramsinurl=false&lt;/code&gt;, a multipart/form-data entity is created instead of a request body. for each part element in the session key a part in the multipart entity is created</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mtomContentTransferEncoding" type="xs:string" />
    <xs:attribute name="encodeMessages" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="treatInputMessageAsParameters" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if &lt;code&gt;true&lt;/code&gt;, the input will be added to the URL for methodType=GET, or for methodType=POST, PUT or PATCH if postType=RAW. This used to be the default behaviour in framework version 7.7 and earlier Default: for methodType=GET: &lt;code&gt;false&lt;/code&gt;,&lt;br/&gt;for methodTypes POST, PUT, PATCH: &lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="PostTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="RAW" />
      <xs:enumeration value="BINARY" />
      <xs:enumeration value="URLENCODED" />
      <xs:enumeration value="FORMDATA" />
      <xs:enumeration value="MTOM" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="HttpSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="HttpSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="HttpSenderBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="HttpSenderBaseDeclaredAttributeGroup">
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter that is used to obtain url; overrides url-attribute. Default: url</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="methodType">
      <xs:simpleType>
        <xs:union memberTypes="HttpMethodAttributeValuesType_2 variableRef">
          <xs:annotation>
            <xs:documentation>The HTTP Method used to execute the request Default: GET</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type (superset of mimetype + charset) of the request, for POST and PUT methods Default: text/html</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charSet" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset of the request. Typically only used on PUT and POST requests. Default: UTF-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="frankInt">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections Default: 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="frankInt">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication Alias used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tokenEndpoint" type="xs:string">
      <xs:annotation>
        <xs:documentation>Endpoint to obtain OAuth accessToken. If &lt;code&gt;authAlias&lt;/code&gt; or &lt;code&gt;username&lt;/code&gt;( and &lt;code&gt;password&lt;/code&gt;) are specified, 
 then a PasswordGrant is used, otherwise a ClientCredentials grant. The obtained accessToken will be added to the regular requests
 in an HTTP Header 'Authorization' with a 'Bearer' prefix.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tokenExpiry" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set to a non-negative value, then determines the time (in seconds) after which the token will be refreshed. Otherwise the token 
 will be refreshed when it is half way its lifetime as defined by the &lt;code&gt;expires_in&lt;/code&gt; clause of the token response, 
 or when the regular server returns a 401 status with a challenge. Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain client_id and client_secret for authentication to &lt;code&gt;tokenEndpoint&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Client_id used in authentication to &lt;code&gt;tokenEndpoint&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientSecret" type="xs:string">
      <xs:annotation>
        <xs:documentation>Client_secret used in authentication to &lt;code&gt;tokenEndpoint&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scope" type="xs:string">
      <xs:annotation>
        <xs:documentation>Space or comma separated list of scope items requested for accessToken, e.g. &lt;code&gt;read write&lt;/code&gt;. Only used when &lt;code&gt;tokenEndpoint&lt;/code&gt; is specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>proxy port Default: 80</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableCookies" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Disables the use of cookies, making the sender completely stateless Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to keystore or certificate to be used for authentication. If none specified, the JVMs default keystore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType">
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Type of keystore Default: pkcs12</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to obtain keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to access keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias to obtain specific certificate or key in keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Resource url to truststore to be used for authenticating peer. If none specified, the JVMs default truststore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to access truststore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType">
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Type of truststore Default: jks</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Trust manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the hostname in the certificate will be checked against the actual hostname of the peer</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, self signed certificates are accepted Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, CertificateExpiredExceptions are ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headersParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of parameter names which should be set as http headers</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. Default: 5000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xhtml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when true, the html response is transformed to xhtml Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;xhtml=true&lt;/code&gt;) stylesheet to apply to the html response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. Default: SSL</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>if set, the status code of the http response is put in specified in the sessionkey and the (error or okay) response message is returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="HttpMethodAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:enumeration value="GET" />
      <xs:enumeration value="POST" />
      <xs:enumeration value="PUT" />
      <xs:enumeration value="PATCH" />
      <xs:enumeration value="DELETE" />
      <xs:enumeration value="HEAD" />
      <xs:enumeration value="REPORT" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="HttpSenderBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="HttpSenderBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IbisJavaSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="IbisJavaSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.IbisJavaSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="IbisJavaSenderDeclaredAttributeGroup">
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>ServiceName of the JavaListener that should be called.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to specify ServiceName of the JavaListener that should be called.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnedSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of keys of session variables that should be returned to caller, for correct results as well as for erroneous results. (Only for listeners that support it, like JavaListener)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartResponse" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Currently used to mimic the HttpSender when it is stubbed locally. It could be useful in other situations too although currently the response string is used which isn't streamed, it would be better to pass the multipart as an input stream in the context map in which case content type and charset could also be passed Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dispatchType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Set to 'DLL' to make the dispatcher communicate with a DLL set on the classpath</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IbisJavaSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="IbisJavaSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IbisLocalSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="IbisLocalSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.IbisLocalSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="IbisLocalSenderDeclaredAttributeGroup">
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the WebServiceListener that should be called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isolated" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the call is made in a separate thread, possibly using separate transaction Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="javaListenerSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the sessionkey which holds the name of the JavaListener that should be called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="javaListener" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the JavaListener that should be called (will be ignored when javaListenerSessionKey is set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the call is made asynchronously. this implies &lt;code&gt;isolated=true&lt;/code&gt; Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkDependency" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the sender waits upon open until the called JavaListener is opened Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dependencyTimeOut" type="frankInt">
      <xs:annotation>
        <xs:documentation>maximum time (in seconds) the sender waits for the listener to start. A value of -1 indicates to wait indefinitely Default: 60</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnedSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of keys of session variables that should be returned to caller, for correct results as well as for erronous results. (Only for listeners that support it, like JavaListener)&lt;br/&gt;N.B. To get this working, the attribute returnedSessionKeys must also be set on the corresponding Receiver</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwJavaListenerNotFoundException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;false&lt;/code&gt;, the xml-string "&amp;lt;error&amp;gt;could not find JavaListener [...]&amp;lt;/error&amp;gt;" is returned instead of throwing a senderexception Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IbisLocalSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="IbisLocalSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IbisWebServiceSenderType">
    <xs:attributeGroup ref="IbisWebServiceSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.http.IbisWebServiceSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="IbisWebServiceSenderDeclaredAttributeGroup">
    <xs:attribute name="ibisHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>name (or ipaddress) and optinally port of the host where the ibis to be called is running Default: localhost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ibisInstance" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the ibis instance to be called Default: name of the current instance</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the receiver that should be called Default: servicelistener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IbisWebServiceSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="IbisWebServiceSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ImapSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="ImapSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.ImapSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ImapSenderDeclaredAttributeGroup">
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>The hostname of the IMAP server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>The port of the IMAP server Default: 993</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain accessToken or username and password for authentication to Exchange mail server. If the alias refers to a combination of a username and a password, the deprecated Basic Authentication method is used. If the alias refers to a password without a username, the password is treated as the accessToken.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username for authentication to mail server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication to mail server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyAddressFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of fields to try as response address Default: replyTo,from,sender,Return-Path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ImapSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="ImapSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JavascriptSenderType">
    <xs:group ref="SenderSeriesCumulativeChildGroup" />
    <xs:attributeGroup ref="JavascriptSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.JavascriptSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JavascriptSenderDeclaredAttributeGroup">
    <xs:attribute name="jsFileName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the javascript file containing the functions to run</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsFunctionName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the javascript function that will be called (first) Default: main</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="engineName">
      <xs:simpleType>
        <xs:union memberTypes="JavaScriptEnginesAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>the name of the javascript engine to be used Default: J2V8</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="JavaScriptEnginesAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="J2V8" />
      <xs:enumeration value="NASHORN" />
      <xs:enumeration value="RHINO" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="JavascriptSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="JavascriptSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderSeriesCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SenderSeriesType">
    <xs:group ref="SenderSeriesCumulativeChildGroup" />
    <xs:attributeGroup ref="SenderSeriesCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.SenderSeries" use="prohibited" />
  </xs:complexType>
  <xs:group name="SenderSeriesDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:group name="SenderSeriesCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="SenderSeriesDeclaredChildGroup" />
      <xs:group ref="SenderWrapperBaseCumulativeChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="SenderSeriesDeclaredAttributeGroup">
    <xs:attribute name="synchronous" type="frankBoolean" />
  </xs:attributeGroup>
  <xs:attributeGroup name="SenderSeriesCumulativeAttributeGroup">
    <xs:attributeGroup ref="SenderSeriesDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderWrapperBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="SenderWrapperBaseDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="CacheElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="SenderWrapperBaseCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="SenderWrapperBaseDeclaredChildGroup" />
      <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="SenderWrapperBaseDeclaredAttributeGroup">
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is restored before processing the next one Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeInputInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the input is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SenderWrapperBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="SenderWrapperBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JsonXsltSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="JsonXsltSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.JsonXsltSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JsonXsltSenderDeclaredAttributeGroup">
    <xs:attribute name="jsonResult" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the xml result of the transformation is converted back to json Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions Default: j=http://www.w3.org/2013/XSL/json</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JsonXsltSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="JsonXsltSenderDeclaredAttributeGroup" />
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey Default: 100</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>omit the xml declaration on top of the output. When not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableOutputEscaping" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, any output is reparsed before being handled as XML again. When not set, the stylesheet is searched for &lt;code&gt;@disable-output-escaping='yes'&lt;/code&gt; and the value is set accordingly Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>For xpathExpression only Default: text</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="indentXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. When not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipEmptyTags" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="debugInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; the input is written to the log file, at DEBUG level Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XsltSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="XsltSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.XsltSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="XsltSenderDeclaredAttributeGroup">
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey Default: 100</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>omit the xml declaration on top of the output. When not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableOutputEscaping" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, any output is reparsed before being handled as XML again. When not set, the stylesheet is searched for &lt;code&gt;@disable-output-escaping='yes'&lt;/code&gt; and the value is set accordingly Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>For xpathExpression only Default: text</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="indentXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. When not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipEmptyTags" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="debugInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; the input is written to the log file, at DEBUG level Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XsltSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="XsltSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LdapSenderType">
    <xs:group ref="LdapSenderDeclaredChildGroup" />
    <xs:attributeGroup ref="LdapSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.ldap.LdapSender" use="prohibited" />
  </xs:complexType>
  <xs:group name="LdapSenderDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="LdapSenderDeclaredAttributeGroup">
    <xs:attribute name="operation">
      <xs:simpleType>
        <xs:union memberTypes="OperationAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Specifies LDAP operation to perform Default: read</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="ldapProviderURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL to context to search in, e.g. 'ldap://edsnlm01.group.intranet/ou=people, o=ing' to search in te people group of ing cds. Used to overwrite the providerURL specified in jmsRealm.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="manipulationSubject">
      <xs:simpleType>
        <xs:union memberTypes="ManipulationAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Specifies subject to perform operation on. Default: attribute</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="attributesToReturn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of attributes to return. When no are attributes specified, all the attributes from the object read are returned. Default: &lt;i&gt;all attributes&lt;/i&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="usePooling" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Specifies whether connection pooling is used or not Default: true when principal not set as parameter, false otherwise</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="searchTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Specifies the time (in ms) that is spent searching for results for operation search Default: 20000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable used to store cause of errors Default: errorReason</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxEntriesReturned" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of entries to be returned by a search query, or &lt;code&gt;0&lt;/code&gt; for unlimited Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unicodePwd" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the attributes passed by the input xml are scanned for an attribute with id unicodepwd, when found the value of this attribute will be encoded as required by active directory (a UTF-16 encoded unicode string containing the password surrounded by quotation marks) before sending it to the LDAP server Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNotFound" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;operation=search/deepsearch&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt; the xml '&amp;lt;ldapresult&amp;gt;object not found&amp;lt;/ldapresult&amp;gt;' is returned instead of the PartialResultException 'unprocessed continuation reference(s)' Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="OperationAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="read">
        <xs:annotation>
          <xs:documentation>Read the contents of an entry. Configuration requirements: 
 &lt;ul&gt;
 	  &lt;li&gt;parameter 'entryName', resolving to RDN of entry to read&lt;/li&gt;
 	  &lt;li&gt;optional xml-inputmessage containing attributes to be returned&lt;/li&gt;
 &lt;/ul&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="create">
        <xs:annotation>
          <xs:documentation>Create an attribute or an entry. Configuration requirements: 
 &lt;ul&gt;
 	  &lt;li&gt;parameter 'entryName', resolving to RDN of entry to create&lt;/li&gt;
 	  &lt;li&gt;xml-inputmessage containing attributes to create&lt;/li&gt;
 &lt;/ul&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="update">
        <xs:annotation>
          <xs:documentation>Update an attribute or an entry. Configuration requirements: 
 &lt;ul&gt;
 	  &lt;li&gt;parameter 'entryName', resolving to RDN of entry to update&lt;/li&gt;
 	  &lt;li&gt;xml-inputmessage containing attributes to update&lt;/li&gt;
 	  &lt;li&gt;optional parameter 'newEntryName', new RDN of entry&lt;/li&gt;
 &lt;/ul&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="delete">
        <xs:annotation>
          <xs:documentation>Delete an attribute or an entry. Configuration requirements: 
 &lt;ul&gt;
 	  &lt;li&gt;parameter 'entryName', resolving to RDN of entry to delete&lt;/li&gt;
 	  &lt;li&gt;when manipulationSubject is set to attribute: xml-inputmessage containing attributes to be deleted&lt;/li&gt;
 &lt;/ul&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="search">
        <xs:annotation>
          <xs:documentation>Search for an entry in the direct children of the specified root. Configuration requirements: 
 &lt;ul&gt;
 	  &lt;li&gt;parameter 'entryName', resolving to RDN of entry to read&lt;/li&gt;
    &lt;li&gt;parameter 'filterExpression', specifying the entries searched for&lt;/li&gt;
 	  &lt;li&gt;optional attribute 'attributesReturned' containing attributes to be returned&lt;/li&gt;
 &lt;/ul&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="deepSearch">
        <xs:annotation>
          <xs:documentation>Search for an entry in the complete tree below the specified root. Configuration requirements: 
 &lt;ul&gt;
 	  &lt;li&gt;parameter 'entryName', resolving to RDN of entry to read&lt;/li&gt;
    &lt;li&gt;parameter 'filterExpression', specifying the entries searched for&lt;/li&gt;
 	  &lt;li&gt;optional attribute 'attributesReturned' containing attributes to be returned&lt;/li&gt;
 &lt;/ul&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="getSubContexts">
        <xs:annotation>
          <xs:documentation>Get a list of the direct children of the specifed root. Configuration requirements: 
 &lt;ul&gt;
 	  &lt;li&gt;parameter 'entryName', resolving to RDN of entry to read&lt;/li&gt;
 	  &lt;li&gt;optional attribute 'attributesReturned' containing attributes to be returned&lt;/li&gt;
 &lt;/ul&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="getTree">
        <xs:annotation>
          <xs:documentation>Get a copy of the complete tree below the specified root. Configuration requirements: 
 &lt;ul&gt;
 	  &lt;li&gt;parameter 'entryName', resolving to RDN of entry to read&lt;/li&gt;
 	  &lt;li&gt;optional attribute 'attributesReturned' containing attributes to be returned&lt;/li&gt;
 &lt;/ul&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="challenge">
        <xs:annotation>
          <xs:documentation>Check username and password against LDAP specifying principal and credential using parameters. Configuration requirements: 
 &lt;ul&gt;
 	  &lt;li&gt;parameter 'principal', resolving to RDN of user who's password should be verified&lt;/li&gt;
 	  &lt;li&gt;parameter 'credentials', password to verify&lt;/li&gt;
 &lt;/ul&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="changeUnicodePwd">
        <xs:annotation>
          <xs:documentation>Typical user change-password operation (one of the two methods to modify the unicodePwd attribute in AD (http://support.microsoft.com/kb/263991)). Configuration requirements: 
 &lt;ul&gt;
 	  &lt;li&gt;parameter 'entryName', resolving to RDN of user who's password should be changed&lt;/li&gt;
 	  &lt;li&gt;parameter 'oldPassword', current password, will be encoded as required by Active Directory (a UTF-16 encoded Unicode string containing the password surrounded by quotation marks) before sending it to the LDAP server. It's advised to set attribute hidden to true for parameter.&lt;/li&gt;
 	  &lt;li&gt;parameter 'newPassword', new password, will be encoded as required by Active Directory (a UTF-16 encoded Unicode string containing the password surrounded by quotation marks) before sending it to the LDAP server. It's advised to set attribute hidden to true for parameter.&lt;/li&gt;
 &lt;/ul&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ManipulationAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ENTRY" />
      <xs:enumeration value="ATTRIBUTE" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="LdapSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="LdapSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JndiBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LocalFileSystemSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="LocalFileSystemSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.LocalFileSystemSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="LocalFileSystemSenderDeclaredAttributeGroup">
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional base folder, that serves as root for all other folders</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LocalFileSystemSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="LocalFileSystemSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LogSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="LogSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.LogSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="LogSenderDeclaredAttributeGroup">
    <xs:attribute name="logCategory" type="xs:string">
      <xs:annotation>
        <xs:documentation>category under which messages are logged Default: name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logLevel" type="xs:string">
      <xs:annotation>
        <xs:documentation>level on which messages are logged Default: info</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LogSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="LogSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MailSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="MailSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.MailSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="MailSenderDeclaredAttributeGroup">
    <xs:attribute name="smtpHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the SMTP-host by which the messages are to be send</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="MailSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="MailSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="MailSenderBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="MailSenderBaseDeclaredAttributeGroup">
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authAlias used to obtain credentials for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userId" type="xs:string">
      <xs:annotation>
        <xs:documentation>userId on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of userid</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultSubject" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the subject: header if not specified in message itself</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultFrom" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the from: header if not specified in message itself</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout &lt;i&gt;in milliseconds&lt;/i&gt; for socket connection timeout and socket i/o timeouts Default: 20000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultAttachmentName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when this name is used, it will be followed by a number which is equal to the node's position Default: attachment</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>when messageType is not specified defaultMessageType will be used Default: text/plain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMessageBase64" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when messageBase64 is not specified defaultMessageBase64 will be used Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bounceAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>NDR return address when mail cannot be delivered. This adds a Return-Path header Default: MAIL FROM attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="MailSenderBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="MailSenderBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MessageStoreSenderType">
    <xs:group ref="MessageStoreSenderDeclaredChildGroup" />
    <xs:attributeGroup ref="MessageStoreSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.MessageStoreSender" use="prohibited" />
  </xs:complexType>
  <xs:group name="MessageStoreSenderDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="MessageStoreSenderDeclaredAttributeGroup">
    <xs:attribute name="sessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of sessionKey's to be stored together with the message. Please note: corresponding MessageStoreListener must have the same value for this attribute.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyStoreWhenMessageIdUnique" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the message is stored only if the MessageId is not present in the store yet. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="MessageStoreSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="MessageStoreSenderDeclaredAttributeGroup" />
    <xs:attribute name="slotId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional identifier for this storage, to be able to share the physical storage between a number of receivers and pipes.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are &lt;code&gt;E&lt;/code&gt; (error store), &lt;code&gt;M&lt;/code&gt; (message store), &lt;code&gt;L&lt;/code&gt; (message log for Pipe) or &lt;code&gt;A&lt;/code&gt; (message log for Receiver).&lt;br/&gt;
 Receiver will always set type to &lt;code&gt;E&lt;/code&gt; for errorStorage and always set type to &lt;code&gt;A&lt;/code&gt; for messageLog. SenderPipe will set type to &lt;code&gt;L&lt;/code&gt; for messageLog (when type isn't specified).&lt;br/&gt;
 See MessageStoreSender for type &lt;code&gt;M&lt;/code&gt;. Default: &lt;code&gt;E&lt;/code&gt; for errorStorage on Receiver&lt;br/&gt;&lt;code&gt;A&lt;/code&gt; for messageLog on Receiver&lt;br/&gt;&lt;code&gt;L&lt;/code&gt; for messageLog on Pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column slotids are stored in Default: SLOTID</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="typeField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column types are stored in Default: TYPE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hostField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column that stores the hostname of the server Default: HOST</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sequenceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the sequence used to generate the primary key, for DBMSes that use sequences, like Oracle Default: seq_ibisstore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkTable" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, checks are performed if the table exists and is properly created Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createTable" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the table is created if it does not exist Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>The type of the column message themselves are stored in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>The type of the column that contains the primary key of the table</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>The type of the column the timestamps are stored in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>The type of the columns messageId and correlationId, slotId and comments are stored in. N.B. &lt;code&gt;(100)&lt;/code&gt; is appended for id's, &lt;code&gt;(1000)&lt;/code&gt; is appended for comments.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the messages are stored compressed Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retention" type="frankInt">
      <xs:annotation>
        <xs:documentation>The time (in days) to keep the record in the database before making it eligible for deletion by a cleanup process. when set to -1, the record will live on forever Default: 30</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaOwner4Check" type="xs:string">
      <xs:annotation>
        <xs:documentation>Schema owner to be used to check the database Default: &amp;lt;current_schema&amp;gt; (only for oracle)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeFullMessage" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the full message is stored with the log. Can be set to &lt;code&gt;false&lt;/code&gt; to reduce table size, by avoiding to store the full message Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="JdbcTableMessageBrowserCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JdbcTransactionalStorageType">
    <xs:attributeGroup ref="JdbcTransactionalStorageCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.JdbcTransactionalStorage" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JdbcTransactionalStorageDeclaredAttributeGroup">
    <xs:attribute name="slotId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional identifier for this storage, to be able to share the physical storage between a number of receivers and pipes.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are &lt;code&gt;E&lt;/code&gt; (error store), &lt;code&gt;M&lt;/code&gt; (message store), &lt;code&gt;L&lt;/code&gt; (message log for Pipe) or &lt;code&gt;A&lt;/code&gt; (message log for Receiver).&lt;br/&gt;
 Receiver will always set type to &lt;code&gt;E&lt;/code&gt; for errorStorage and always set type to &lt;code&gt;A&lt;/code&gt; for messageLog. SenderPipe will set type to &lt;code&gt;L&lt;/code&gt; for messageLog (when type isn't specified).&lt;br/&gt;
 See MessageStoreSender for type &lt;code&gt;M&lt;/code&gt;. Default: &lt;code&gt;E&lt;/code&gt; for errorStorage on Receiver&lt;br/&gt;&lt;code&gt;A&lt;/code&gt; for messageLog on Receiver&lt;br/&gt;&lt;code&gt;L&lt;/code&gt; for messageLog on Pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column slotids are stored in Default: SLOTID</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="typeField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column types are stored in Default: TYPE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hostField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column that stores the hostname of the server Default: HOST</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sequenceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the sequence used to generate the primary key, for DBMSes that use sequences, like Oracle Default: seq_ibisstore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkTable" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, checks are performed if the table exists and is properly created Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createTable" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the table is created if it does not exist Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>The type of the column message themselves are stored in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>The type of the column that contains the primary key of the table</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>The type of the column the timestamps are stored in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>The type of the columns messageId and correlationId, slotId and comments are stored in. N.B. &lt;code&gt;(100)&lt;/code&gt; is appended for id's, &lt;code&gt;(1000)&lt;/code&gt; is appended for comments.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the messages are stored compressed Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retention" type="frankInt">
      <xs:annotation>
        <xs:documentation>The time (in days) to keep the record in the database before making it eligible for deletion by a cleanup process. when set to -1, the record will live on forever Default: 30</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaOwner4Check" type="xs:string">
      <xs:annotation>
        <xs:documentation>Schema owner to be used to check the database Default: &amp;lt;current_schema&amp;gt; (only for oracle)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeFullMessage" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the full message is stored with the log. Can be set to &lt;code&gt;false&lt;/code&gt; to reduce table size, by avoiding to store the full message Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyStoreWhenMessageIdUnique" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the message is stored only if the MessageId is not present in the store yet. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcTransactionalStorageCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcTransactionalStorageDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcTableMessageBrowserCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JdbcTableMessageBrowserType">
    <xs:attributeGroup ref="JdbcTableMessageBrowserCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.JdbcTableMessageBrowser" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JdbcTableMessageBrowserDeclaredAttributeGroup">
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the table messages are stored in. Default: IBISSTORE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indexName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the index, to be used in hints for query optimizer too (only for Oracle). Default: IX_IBISSTORE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcTableMessageBrowserCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcTableMessageBrowserDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcMessageBrowserCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcMessageBrowserDeclaredAttributeGroup">
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column that contains the primary key of the table Default: MESSAGEKEY</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="idField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column messageIds are stored in Default: MESSAGEID</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column correlation-ids are stored in Default: CORRELATIONID</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column message themselves are stored in Default: MESSAGE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column the timestamp is stored in Default: MESSAGEDATE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commentField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column comments are stored in Default: COMMENTS</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expiryDateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column the timestamp for expiry is stored in Default: EXPIRYDATE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column labels are stored in Default: LABEL</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>prefix to be prefixed on all database objects (tables, indices, sequences), e.g. to access a different Oracle schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="order">
      <xs:simpleType>
        <xs:union memberTypes="SortOrderAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked Default: all</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="SortOrderAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NONE" />
      <xs:enumeration value="ASC" />
      <xs:enumeration value="DESC" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="JdbcMessageBrowserCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcMessageBrowserDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MongoDbSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="MongoDbSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.mongodb.MongoDbSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="MongoDbSenderDeclaredAttributeGroup">
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>The MongoDB datasource Default: ${mongodb.datasource.default}</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="database" type="xs:string">
      <xs:annotation>
        <xs:documentation>Database to connect to. Can be overridden by parameter 'database'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collection" type="xs:string">
      <xs:annotation>
        <xs:documentation>Collection to act upon. Can be overridden by parameter 'collection'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="action">
      <xs:simpleType>
        <xs:union memberTypes="MongoActionAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Action</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="filter" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter. Can contain references to parameters between '?{' and '}'. Can be overridden by parameter 'filter'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="limit" type="frankInt">
      <xs:annotation>
        <xs:documentation>Limit to number of results returned. A value of 0 means 'no limit'. Can be overridden by parameter 'limit' Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="countOnly" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Only for find operation: return only the count and not the full document(s) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat">
      <xs:simpleType>
        <xs:union memberTypes="DocumentFormatAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>OutputFormat Default: JSON</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="MongoActionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="INSERTONE" />
      <xs:enumeration value="INSERTMANY" />
      <xs:enumeration value="FINDONE" />
      <xs:enumeration value="FINDMANY" />
      <xs:enumeration value="UPDATEONE" />
      <xs:enumeration value="UPDATEMANY" />
      <xs:enumeration value="DELETEONE" />
      <xs:enumeration value="DELETEMANY" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DocumentFormatAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="XML" />
      <xs:enumeration value="JSON" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="MongoDbSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="MongoDbSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MqttSenderType">
    <xs:group ref="MqttSenderDeclaredChildGroup" />
    <xs:attributeGroup ref="MqttFacadeDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.mqtt.MqttSender" use="prohibited" />
  </xs:complexType>
  <xs:group name="MqttSenderDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:complexType name="MqttFacadeType">
    <xs:attributeGroup ref="MqttFacadeDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.mqtt.MqttFacade" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="MqttFacadeDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string" />
    <xs:attribute name="timeout" type="frankInt" />
    <xs:attribute name="keepAliveInterval" type="frankInt" />
    <xs:attribute name="clientId" type="xs:string" />
    <xs:attribute name="brokerUrl" type="xs:string" />
    <xs:attribute name="topic" type="xs:string" />
    <xs:attribute name="qos" type="frankInt" />
    <xs:attribute name="cleanSession" type="frankBoolean" />
    <xs:attribute name="persistenceDirectory" type="xs:string" />
    <xs:attribute name="automaticReconnect" type="frankBoolean" />
    <xs:attribute name="charset" type="xs:string" />
    <xs:attribute name="username" type="xs:string" />
    <xs:attribute name="password" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="MultipartHttpSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="HttpSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.http.MultipartHttpSender" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="ParallelSendersType">
    <xs:group ref="ParallelSendersCumulativeChildGroup" />
    <xs:attributeGroup ref="ParallelSendersCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.ParallelSenders" use="prohibited" />
  </xs:complexType>
  <xs:group name="ParallelSendersDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:group name="ParallelSendersCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="ParallelSendersDeclaredChildGroup" />
      <xs:group ref="SenderWrapperBaseCumulativeChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="ParallelSendersDeclaredAttributeGroup">
    <xs:attribute name="maxConcurrentThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Set the upper limit to the amount of concurrent threads that can be run simultaneously. Use 0 to disable. Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ParallelSendersCumulativeAttributeGroup">
    <xs:attributeGroup ref="ParallelSendersDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderSeriesCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ReloadSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="ReloadSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.ReloadSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ReloadSenderDeclaredAttributeGroup">
    <xs:attribute name="forceReload" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>reload the configuration regardless of the version Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ReloadSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="ReloadSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ResultSet2FileSenderType">
    <xs:group ref="JdbcSenderBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="ResultSet2FileSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.ResultSet2FileSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ResultSet2FileSenderDeclaredAttributeGroup">
    <xs:attribute name="statusFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of the optional status field which is set after the row is written to the file: timestamp</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filenameSessionKey" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Key of session variable that contains the name of the file to use.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="append" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; and the file already exists, the resultset rows are written to the end of the file. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRecordsSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (and &amp;gt;=0), this session key contains the maximum number of records which are processed. 
 If &lt;code&gt;query&lt;/code&gt; contains a group field (3), then also following records with the same group field value as the last record are processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ResultSet2FileSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="ResultSet2FileSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedQuerySenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Samba1SenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="Samba1SenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.Samba1Sender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Samba1SenderDeclaredAttributeGroup">
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>Shared folder name in the samba server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="force" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether hidden files are seen or not Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Samba1SenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="Samba1SenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Samba2SenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="Samba2SenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.Samba2Sender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Samba2SenderDeclaredAttributeGroup">
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>the destination, aka smb://xxx/yyy share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain, in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'  Default: SPNEGO</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Domain Controller, as set in java.security.krb5.kdc. If authentication type specified as SPNEGO and realm is specified then this field must be filled.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Realm, as set in java.security.krb5.realm. If authentication type specified as SPNEGO this field must be filled. If not filled then default realm is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Samba2SenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="Samba2SenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SambaSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="Samba2SenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.SambaSender" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="SchedulerSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="SchedulerSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.scheduler.SchedulerSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="SchedulerSenderDeclaredAttributeGroup">
    <xs:attribute name="cronExpressionPattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>expression that generates the cron trigger</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jobGroup" type="xs:string">
      <xs:annotation>
        <xs:documentation>job group in which the new trigger is to be created (optional)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jobNamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>pattern that leads to the name of the registered trigger(optional)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="javaListener" type="xs:string">
      <xs:annotation>
        <xs:documentation>java listener to be called when scheduler trigger fires</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SchedulerSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="SchedulerSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SendGridSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="SendGridSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.SendGridSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="SendGridSenderDeclaredAttributeGroup">
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="frankInt">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections Default: 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="frankInt">
      <xs:annotation>
        <xs:documentation>the maximum number of times it the execution is retried Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host Default:</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>proxy port Default: 80</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username Default:</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password Default:</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy realm Default:</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource url to keystore or certificate to be used for authentication. If none specified, the JVMs default keystore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType">
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Type of keystore Default: pkcs12</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to obtain keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to access keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias to obtain specific certificate or key in keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Resource url to truststore to be used for authenticating peer. If none specified, the JVMs default truststore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType">
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Type of truststore Default: jks</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to access truststore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Trust manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the hostname in the certificate will be checked against the actual hostname of the peer</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, self signed certificates are accepted Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, CertificateExpiredExceptions are ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when true, a redirect request will be honoured, e.g. to switch to https Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether connections checked to be stale, i.e. appear open, but are not. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Used when StaleChecking=true. Timeout when stale connections should be closed. Default: 5000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'SSL' and 'TLS') to use when a SSLContext object is generated. Default: SSL</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SendGridSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="SendGridSenderDeclaredAttributeGroup" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authAlias used to obtain credentials for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userId" type="xs:string">
      <xs:annotation>
        <xs:documentation>userId on the smtphost</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of userid</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultSubject" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the subject: header if not specified in message itself</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultFrom" type="xs:string">
      <xs:annotation>
        <xs:documentation>value of the from: header if not specified in message itself</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultAttachmentName" type="xs:string">
      <xs:annotation>
        <xs:documentation>when this name is used, it will be followed by a number which is equal to the node's position Default: attachment</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>when messageType is not specified defaultMessageType will be used Default: text/plain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMessageBase64" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when messageBase64 is not specified defaultMessageBase64 will be used Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bounceAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>NDR return address when mail cannot be delivered. This adds a Return-Path header Default: MAIL FROM attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SenderWrapperType">
    <xs:group ref="SenderWrapperCumulativeChildGroup" />
    <xs:attributeGroup ref="SenderWrapperBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.SenderWrapper" use="prohibited" />
  </xs:complexType>
  <xs:group name="SenderWrapperDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="SenderWrapperCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="SenderWrapperDeclaredChildGroup" />
      <xs:group ref="SenderWrapperBaseCumulativeChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:complexType name="ShadowSenderType">
    <xs:group ref="ParallelSendersCumulativeChildGroup" />
    <xs:attributeGroup ref="ShadowSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.ShadowSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ShadowSenderDeclaredAttributeGroup">
    <xs:attribute name="originalSender" type="xs:string">
      <xs:annotation>
        <xs:documentation>the default or original sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultSender" type="xs:string">
      <xs:annotation>
        <xs:documentation>the sender which will process all results</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ShadowSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="ShadowSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="ParallelSendersCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="WebServiceNtlmSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="WebServiceNtlmSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.http.WebServiceNtlmSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="WebServiceNtlmSenderDeclaredAttributeGroup">
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type of the request Default: text/html; charset=utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>url or base of url to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="frankInt">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections Default: 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used to authenticate with the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string" />
    <xs:attribute name="proxyHost" type="xs:string" />
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>Default: 80</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>the soapactionuri to be set in the requestheader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="WebServiceNtlmSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="WebServiceNtlmSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="WebServiceSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="WebServiceSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.http.WebServiceSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="WebServiceSenderDeclaredAttributeGroup">
    <xs:attribute name="soap" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope and the soap envelope is removed from received messages (soap envelope will not be visible to the pipeline) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>the soapactionuri to be set in the requestheader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapActionParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter to obtain the soapactionuri</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>the encodingstyle to be set in the messageheader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwApplicationFaults" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether soap faults generated by the application generate an exception, or are treated as 'normal' messages Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>the namespace of the message sent. identifies the service to be called. may be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter to obtain the servicenamespace</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions to be added in the soap envelope tag. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string" />
    <xs:attribute name="wssPassword" type="xs:string" />
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to web services security</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when true, the password is sent digested. otherwise it is sent in clear text Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="WebServiceSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="WebServiceSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="HttpSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XComSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="XComSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.xcom.XComSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="XComSenderDeclaredAttributeGroup">
    <xs:attribute name="fileOption">
      <xs:simpleType>
        <xs:union memberTypes="FileOptionTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>one of create, append or replace</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>remote directory is prefixed witht the remote file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="carriageflag">
      <xs:simpleType>
        <xs:union memberTypes="CarriageFlagTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="codeflag">
      <xs:simpleType>
        <xs:union memberTypes="CodeTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>characterset conversion</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="compress">
      <xs:simpleType>
        <xs:union memberTypes="CompressTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="logfile" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of logfile for xcomtcp to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of user on remote system</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>port of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queue" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>set queue off or on</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteSystem" type="xs:string">
      <xs:annotation>
        <xs:documentation>hostname or tcpip adres of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tracelevel" type="frankInt">
      <xs:annotation>
        <xs:documentation>set between 0 (no trace) and 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truncation" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>set truncation off or on</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userid" type="xs:string">
      <xs:annotation>
        <xs:documentation>loginname of user on remote system</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteFilePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>remote file to create. if empty, the name is equal to the local file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="workingDirName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>directory in which to run the xcomtcp command</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xcomtcp" type="xs:string">
      <xs:annotation>
        <xs:documentation>path to xcomtcp command</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="configFile" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="FileOptionTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="CREATE" />
      <xs:enumeration value="APPEND" />
      <xs:enumeration value="REPLACE" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CarriageFlagTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="YES" />
      <xs:enumeration value="VLR" />
      <xs:enumeration value="VLR2" />
      <xs:enumeration value="MPACK" />
      <xs:enumeration value="XPACK" />
      <xs:enumeration value="NO" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CodeTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="EBCDIC" />
      <xs:enumeration value="ASCII" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CompressTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="YES" />
      <xs:enumeration value="COMPACT" />
      <xs:enumeration value="LZLARGE" />
      <xs:enumeration value="LZMEDIUM" />
      <xs:enumeration value="LZSMALL" />
      <xs:enumeration value="RLE" />
      <xs:enumeration value="NO" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="XComSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="XComSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XfbSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="XfbSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.xfb.XfbSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="XfbSenderDeclaredAttributeGroup">
    <xs:attribute name="script" type="xs:string">
      <xs:annotation>
        <xs:documentation>Full pathname to the XFB script to be executed to transfer the file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ft" type="xs:string" />
    <xs:attribute name="flow" type="xs:string" />
    <xs:attribute name="appli" type="xs:string" />
    <xs:attribute name="noname" type="xs:string" />
    <xs:attribute name="copy" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;true&lt;/code&gt;, the file is copied before calling the XFB script. 
 Reasons to copy the file:
 - XFB will rename the file (prefix it with FXB_) and delete it.
 - On Linux the sticky bit (drwxrws--- wasadmin xfbgw) isn't honoured with a move (only with a copy) (on AIX the sticky bit works for both move and copy).</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="copyPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>Prefix for the name of the copied or original filename. When the name of the original file starts with this prefix, it is removed. Otherwise this prefix is added to the filename of the copied file.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XfbSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="XfbSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlJmsBrowserSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jms.XmlJmsBrowserSender" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="XmlQuerySenderType">
    <xs:group ref="JdbcSenderBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="JdbcQuerySenderBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.XmlQuerySender" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="XmlValidatorSenderType">
    <xs:group ref="XmlValidatorSenderDeclaredChildGroup" />
    <xs:attributeGroup ref="XmlValidatorSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.senders.XmlValidatorSender" use="prohibited" />
  </xs:complexType>
  <xs:group name="XmlValidatorSenderDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="XmlValidatorSenderDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlValidatorSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlValidatorSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractXmlValidatorDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="AbstractXmlValidatorDeclaredAttributeGroup">
    <xs:attribute name="fullSchemaChecking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Enable full schema grammar constraint checking, including checking which
 may be time-consuming or memory intensive. Currently, particle unique
 attribution constraint checking and particle derivation restriction
 checking are controlled by this option.
 &lt;p&gt;
 see property
 http://apache.org/xml/features/validation/schema-full-checking
 &lt;/p&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in Default: failureReason</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive Default: xmlFailureReason</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; Default: utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Ignore namespaces in the input message which are unknown Default: true when &lt;code&gt;schema&lt;/code&gt; or &lt;code&gt;noNamespaceSchemaLocation&lt;/code&gt; is used, false otherwise</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  Default: &lt;code&gt;1.1&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="ZipWriterSenderType">
    <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="ZipWriterSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.compression.ZipWriterSender" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ZipWriterSenderDeclaredAttributeGroup">
    <xs:attribute name="closeInputstreamOnExit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>characterset used for writing zip entry Default: utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="zipWriterHandle" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key used to refer to zip session. must be used if zipwriterpipes are nested Default: zipwriterhandle</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ZipWriterSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="ZipWriterSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="ListenerElementGroupBase">
    <xs:choice>
      <xs:element name="ApiListener">
        <xs:annotation>
          <xs:documentation>Listener that allows a nl.nn.adapterframework.receivers.Receiver to receive messages as a REST webservice.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DirectoryListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DirectoryListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbJmsListener">
        <xs:annotation>
          <xs:documentation>ESB (Enterprise Service Bus) extension of JmsListener.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbJmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ExchangeMailListener">
        <xs:annotation>
          <xs:documentation>Microsoft Exchange Implementation of a nl.nn.adapterframework.filesystem.MailListener.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ExchangeMailListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfListener">
        <xs:annotation>
          <xs:documentation>FxF extension of EsbJmsListener.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="HttpListener">
        <xs:annotation>
          <xs:documentation>Implementation of a IPushingListener that enables a nl.nn.adapterframework.receivers.Receiver
 to receive messages from HTTP requests.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="HttpListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ImapListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ImapListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JavaListener">
        <xs:annotation>
          <xs:documentation>Use this listener to receive messages from other adapters or a scheduler within the same Frank-application or from other components residing in the same JVM.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JavaListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JdbcListener">
        <xs:annotation>
          <xs:documentation>JdbcListener base class.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JdbcListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JdbcTableListener">
        <xs:annotation>
          <xs:documentation>Database Listener that operates on a table having at least a key and a status field.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JdbcTableListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JmsListener">
        <xs:annotation>
          <xs:documentation>A true multi-threaded Listener-class.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MessageStoreListener">
        <xs:annotation>
          <xs:documentation>Read messages from the ibisstore previously stored by a
 MessageStoreSender.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MessageStoreListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MqttListener">
        <xs:annotation>
          <xs:documentation>MQTT listener which will connect to a broker and subscribe to a topic.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MqttListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PullingJmsListener">
        <xs:annotation>
          <xs:documentation>A true multi-threaded Listener-class.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PullingJmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PushingJmsListener">
        <xs:annotation>
          <xs:documentation>JMSListener re-implemented as a pushing listener rather than a pulling listener.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PushingJmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RestListener">
        <xs:annotation>
          <xs:documentation>Listener that allows a nl.nn.adapterframework.receivers.Receiver to receive messages as a REST webservice.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RestListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba2Listener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba2ListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SambaListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SambaListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SimpleJdbcListener">
        <xs:annotation>
          <xs:documentation>Database Listener that returns a count of messages available, but does not perform any locking or
 other management of processing messages in parallel.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SimpleJdbcListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WebServiceListener">
        <xs:annotation>
          <xs:documentation>Listener that allows a nl.nn.adapterframework.receivers.Receiver to receive messages as a SOAP webservice.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WebServiceListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="ApiListenerType">
    <xs:attributeGroup ref="ApiListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.http.rest.ApiListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ApiListenerDeclaredAttributeGroup">
    <xs:attribute name="method">
      <xs:simpleType>
        <xs:union memberTypes="HttpMethodAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>HTTP method to listen to Default: GET</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="uriPattern" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>URI pattern to register this listener on, eq. `/my-listener/{something}/here`</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consumes">
      <xs:simpleType>
        <xs:union memberTypes="MediaTypesAttributeValuesType_2 variableRef">
          <xs:annotation>
            <xs:documentation>The required contentType on requests, if it doesn't match the request will fail Default: ANY</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="produces">
      <xs:simpleType>
        <xs:union memberTypes="MediaTypesAttributeValuesType_2 variableRef">
          <xs:annotation>
            <xs:documentation>The specified contentType on response. When &lt;code&lt;ANY&lt;/code&gt; the response will determine the content type based on the return data. Default: ANY</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="characterEncoding" type="xs:string">
      <xs:annotation>
        <xs:documentation>The specified character encoding on the response contentType header Default: UTF-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="updateEtag" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Automatically generate and validate etags Default: &lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authenticationMethod">
      <xs:simpleType>
        <xs:union memberTypes="AuthenticationMethodsAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Enables security for this listener. If you wish to use the application servers authorisation roles [AUTHROLE], you need to enable them globally for all ApiListeners with the `servlet.ApiListenerServlet.securityroles=ibistester,ibiswebservice` property Default: &lt;code&gt;NONE&lt;/code&gt;</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="authenticationRoles" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only active when AuthenticationMethod=AUTHROLE. Comma separated list of authorization roles which are granted for this service, eq. IbisTester,IbisObserver", ""})</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartBodyName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specify the form-part you wish to enter the pipeline Default: name of the first form-part</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIdHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the header which contains the message-id Default: message-id</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="operationId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Unique string used to identify the operation. The id MUST be unique among all operations described in the OpenApi schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of parameters passed as http header. Parameters will be stored in 'headers' sessionkey.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="requiredIssuer" type="xs:string">
      <xs:annotation>
        <xs:documentation>issuer to validate jwt</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jwksURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>keysource url to validate jwt</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="requiredClaims" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of required claims</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exactMatchClaims" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated key value pairs to match with jwt payload. e.g. "sub=UnitTest, aud=test"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="roleClaim" type="xs:string">
      <xs:annotation>
        <xs:documentation>claim name which specifies the role</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="HttpMethodAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="GET" />
      <xs:enumeration value="PUT" />
      <xs:enumeration value="POST" />
      <xs:enumeration value="PATCH" />
      <xs:enumeration value="DELETE" />
      <xs:enumeration value="OPTIONS" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MediaTypesAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ANY" />
      <xs:enumeration value="TEXT" />
      <xs:enumeration value="XML" />
      <xs:enumeration value="JSON" />
      <xs:enumeration value="PDF" />
      <xs:enumeration value="OCTET" />
      <xs:enumeration value="MULTIPART_RELATED" />
      <xs:enumeration value="MULTIPART_FORMDATA" />
      <xs:enumeration value="MULTIPART" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AuthenticationMethodsAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NONE" />
      <xs:enumeration value="COOKIE" />
      <xs:enumeration value="HEADER" />
      <xs:enumeration value="AUTHROLE" />
      <xs:enumeration value="JWT" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="ApiListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="ApiListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="PushingListenerAdapterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="PushingListenerAdapterDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the listener as known to the adapter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="applicationFaultsAsExceptions" type="frankBoolean" />
    <xs:attribute name="running" type="frankBoolean" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="DirectoryListenerType">
    <xs:attributeGroup ref="DirectoryListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.receivers.DirectoryListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="DirectoryListenerDeclaredAttributeGroup">
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional base folder, that serves as root for all other folders</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="DirectoryListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="DirectoryListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemListenerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="FileSystemListenerDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files. If not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inProcessFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;while&lt;/i&gt; being processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processedFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed, in case the exit-state was not equal to &lt;code&gt;success&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="holdFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where messages from the error folder can be put on Hold, temporarily</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where a copy of every file that is received is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolders" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the folders to look for files and to move files to when being processed and after being processed are created if they are specified and do not exist Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delete" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the file processed will be deleted after being processed, and not stored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="frankInt">
      <xs:annotation>
        <xs:documentation>Number of copies held of a file with the same name. Backup files have a dot and a number suffixed to their name. If set to 0, no backups will be kept. Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the destination file will be deleted if it already exists Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Determines the contents of the message that is sent to the pipeline. Can be 'name', for the filename, 'path', for the full file path, 'contents' for the contents of the file, 'info' for file information. For any other value, the attributes of the file are searched and used Default: path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileTimeSensitive" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the file modification time is used in addition to the filename to determine if a file has been seen before Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minStableTime" type="frankInt">
      <xs:annotation>
        <xs:documentation>Minimal age of file &lt;i&gt;in milliseconds&lt;/i&gt;, to avoid receiving a file while it is still being written Default: 1000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIdPropertyKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of Property to use as messageId. If not set, the filename of the file as it was received in the inputFolder is used as the messageId Default: for MailFileSystems: Message-ID</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableMessageBrowsers" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, no browsers for process folders are generated Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to look for in inputFolder e.g. '*.inp'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeWildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to be excluded when looking in inputFolder.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeMetadataInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, an XML with all message properties is provided under this key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset to be used for extracting the contents</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="EsbJmsListenerType">
    <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="EsbJmsListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.esb.EsbJmsListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="EsbJmsListenerDeclaredAttributeGroup">
    <xs:attribute name="messageProtocol" type="xs:string" />
    <xs:attribute name="copyAEProperties" type="frankBoolean" />
  </xs:attributeGroup>
  <xs:attributeGroup name="EsbJmsListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="EsbJmsListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="PushingJmsListenerCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JmsListenerBaseType">
    <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="JmsListenerBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jms.JmsListenerBase" use="prohibited" />
  </xs:complexType>
  <xs:group name="JmsListenerBaseDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="JmsListenerBaseDeclaredAttributeGroup">
    <xs:attribute name="forceMessageIdAsCorrelationId" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>By default, the JmsListener takes the Correlation-ID (if present) as the ID that has to be used as Correlation-ID of the reply. 
 When set to &lt;code&gt;true&lt;/code&gt;, the messageID is used as Correlation-ID of the reply.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOut" type="frankInt">
      <xs:annotation>
        <xs:documentation>Receive timeout &lt;i&gt;in milliseconds&lt;/i&gt; as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long- Default: 1000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useReplyTo" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyMessageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of the jmstype field of the reply message Default: not set by application</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyDeliveryMode">
      <xs:simpleType>
        <xs:union memberTypes="DeliveryModeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Controls mode that reply messages are sent with Default: NON_PERSISTENT</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="replyPriority" type="frankInt">
      <xs:annotation>
        <xs:documentation>Sets the priority that is used to deliver the reply message. Ranges from 0 to 9. Effectively the default priority is set by JMS to 4, &lt;code&gt;-1&lt;/code&gt; means not set and thus uses the JMS default Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyMessageTimeToLive" type="frankInt">
      <xs:annotation>
        <xs:documentation>Time &lt;i&gt;in milliseconds&lt;/i&gt; after which the reply-message will expire Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soap" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyEncodingStyleURI" type="xs:string" />
    <xs:attribute name="replyNamespaceURI" type="xs:string" />
    <xs:attribute name="replySoapAction" type="xs:string" />
    <xs:attribute name="soapHeaderSessionKey" type="xs:string" />
    <xs:attribute name="xPathLoggingKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of all xpath keys that need to be logged. (overrides &lt;code&gt;msg.log.keys&lt;/code&gt; property)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JmsListenerBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="JmsListenerBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JMSFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PushingJmsListenerType">
    <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="PushingJmsListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jms.PushingJmsListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="PushingJmsListenerDeclaredAttributeGroup">
    <xs:attribute name="listenerPort" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the WebSphere listener port that this JMS Listener binds to.
 Optional.

 This property is only used in EJB Deployment mode and has no effect
 otherwise.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheMode" type="xs:string" />
    <xs:attribute name="pollGuardInterval" type="frankInt">
      <xs:annotation>
        <xs:documentation>Interval &lt;i&gt;in milliseconds&lt;/i&gt; for the poll guard to check whether a successful poll was done by the receive (https://docs.oracle.com/javaee/7/api/javax/jms/messageconsumer.html#receive-long-) since last check. when polling has stopped this will be logged and the listener will be stopped and started in an attempt to workaround problems with polling. polling might stop due to bugs in the jms driver/implementation which should be fixed by the supplier. as the poll time includes reading and processing of the message no successful poll might be registered since the last check when message processing takes a long time, hence while messages are being processed the check on last successful poll will be skipped. set to -1 to disable Default: ten times the specified timeout</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destinationName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the JMS destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="PushingJmsListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="PushingJmsListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JmsListenerBaseDeclaredAttributeGroup" />
    <xs:attribute name="destinationType">
      <xs:simpleType>
        <xs:union memberTypes="DestinationTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Type of the messageing destination Default: QUEUE</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="acknowledgeMode">
      <xs:simpleType>
        <xs:union memberTypes="AcknowledgeModeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>If not transacted, the way the application informs the JMS provider that it has successfully received a message. Default: auto</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="subscriberType">
      <xs:simpleType>
        <xs:union memberTypes="SubscriberTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Only applicable for topics Default: DURABLE</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI-name of the queueConnectionFactory, used when &lt;code&gt;destinationType&lt;code&gt;=&lt;/code&gt;QUEUE&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI-name of the topicConnectionFactory, used when &lt;code&gt;destinationType&lt;code&gt;=&lt;/code&gt;TOPIC&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHex" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part). Useful when sending messages to MQ which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: MQJMS1044: String is not a valid hexadecimal number Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>Prefix to check before executing correlationIdToHex. If empty (and correlationIdToHex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationId to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationId). Default: id:</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageTimeToLive" type="frankInt">
      <xs:annotation>
        <xs:documentation>The time &lt;i&gt;in milliseconds&lt;/i&gt; it takes for the message to expire. If the message is not consumed before, it will be lost. Must be a positive value for request/reply type of messages, 0 disables the expiry timeout  Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdMaxLength" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the length of the correlationId exceeds this maximum length, the correlationId is trimmed from the left side of a string to this maximum length Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSelector" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the value of this attribute is used as a selector to filter messages. Default: 0 (unlimited)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for authentication to JMS server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lookupDestination" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;false&lt;/code&gt;, the destinationName is used directly instead of performing a JNDI lookup Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="JndiBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ExchangeMailListenerType">
    <xs:attributeGroup ref="ExchangeMailListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.receivers.ExchangeMailListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ExchangeMailListenerDeclaredAttributeGroup">
    <xs:attribute name="mailAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>The mail address of the mailbox connected to (also used for auto discovery)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>Url of the Exchange server. Set to e.g. https://outlook.office365.com/EWS/Exchange.asmx to speed up start up, leave empty to use autodiscovery</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="accessToken" type="xs:string">
      <xs:annotation>
        <xs:documentation>AccessToken for authentication to Exchange mail server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain accessToken or username and password for authentication to Exchange mail server. If the alias refers to a combination of a username and a password, the deprecated Basic Authentication method is used. If the alias refers to a password without a username, the password is treated as the accessToken.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filter" type="xs:string">
      <xs:annotation>
        <xs:documentation>If empty, all mails are retrieved. If set to &lt;code&gt;NDR&lt;/code&gt; only Non-Delivery Report mails ('bounces') are retrieved</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyAddressFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of fields to try as response address Default: replyTo,from,sender,Return-Path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>proxy port Default: 8080</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy authAlias</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ExchangeMailListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="ExchangeMailListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="MailListenerCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="MailListenerDeclaredAttributeGroup">
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Determines the contents of the message that is sent to the pipeline. Can be 'name', for the filename, 'path', for the full file path, 'contents' for the contents of the file, 'info' for file information. For any other value, the attributes of the file are searched and used Default: path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="MailListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="MailListenerDeclaredAttributeGroup" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files. If not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inProcessFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;while&lt;/i&gt; being processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processedFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed, in case the exit-state was not equal to &lt;code&gt;success&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="holdFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where messages from the error folder can be put on Hold, temporarily</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder where a copy of every file that is received is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolders" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the folders to look for files and to move files to when being processed and after being processed are created if they are specified and do not exist Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delete" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the file processed will be deleted after being processed, and not stored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="frankInt">
      <xs:annotation>
        <xs:documentation>Number of copies held of a file with the same name. Backup files have a dot and a number suffixed to their name. If set to 0, no backups will be kept. Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the destination file will be deleted if it already exists Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileTimeSensitive" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the file modification time is used in addition to the filename to determine if a file has been seen before Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minStableTime" type="frankInt">
      <xs:annotation>
        <xs:documentation>Minimal age of file &lt;i&gt;in milliseconds&lt;/i&gt;, to avoid receiving a file while it is still being written Default: 1000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIdPropertyKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of Property to use as messageId. If not set, the filename of the file as it was received in the inputFolder is used as the messageId Default: for MailFileSystems: Message-ID</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableMessageBrowsers" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, no browsers for process folders are generated Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to look for in inputFolder e.g. '*.inp'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeWildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to be excluded when looking in inputFolder.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeMetadataInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, an XML with all message properties is provided under this key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset to be used for extracting the contents</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="FxfListenerType">
    <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="FxfListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.fxf.FxfListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="FxfListenerDeclaredAttributeGroup">
    <xs:attribute name="fxfFileSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the session key to store the name of the received file in Default: fxfFile</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="moveProcessedFile" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the received file is moved after being processed Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processedSiblingDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;moveProcessedFile=true&lt;/code&gt;) &lt;b&gt;sibling&lt;/b&gt; directory (related to the parent directory of the file to process) where files are stored after being processed Default: processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createProcessedDirectory" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;moveProcessedFile=true&lt;/code&gt;) when set to &lt;code&gt;true&lt;/code&gt;, the directory to move processed files in is created if it does not exist Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FxfListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="FxfListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="EsbJmsListenerCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="HttpListenerType">
    <xs:attributeGroup ref="HttpListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.http.HttpListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="HttpListenerDeclaredAttributeGroup">
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the service that is provided by the adapter of this listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="HttpListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="HttpListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="PushingListenerAdapterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ImapListenerType">
    <xs:attributeGroup ref="ImapListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.receivers.ImapListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ImapListenerDeclaredAttributeGroup">
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>The hostname of the IMAP server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>The port of the IMAP server Default: 993</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain accessToken or username and password for authentication to Exchange mail server. If the alias refers to a combination of a username and a password, the deprecated Basic Authentication method is used. If the alias refers to a password without a username, the password is treated as the accessToken.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username for authentication to mail server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication to mail server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyAddressFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of fields to try as response address Default: replyTo,from,sender,Return-Path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ImapListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="ImapListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="MailListenerCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JavaListenerType">
    <xs:attributeGroup ref="JavaListenerDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.receivers.JavaListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JavaListenerDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Internal name of the listener, as known to the adapter. An IbisLocalSender refers to this name in its &lt;code&gt;javaListener&lt;/code&gt;-attribute.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>External Name of the listener. An IbisJavaSender refers to this name in its &lt;code&gt;serviceName&lt;/code&gt;-attribute.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Should the JavaListener throw a ListenerException when it occurs or return an error message Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="httpWsdl" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the WSDL of the service provided by this listener will available for download  Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="JdbcListenerType">
    <xs:attributeGroup ref="JdbcListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.JdbcListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JdbcListenerDeclaredAttributeGroup">
    <xs:attribute name="peekUntransacted" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true. This avoids rolling back a lot of XA transactions, that appears to be problematic on MS SQL Server Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="peekQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;peekUntransacted=true&lt;/code&gt;) peek query to determine if the select query should be executed. Peek queries are, unlike select queries, executed without a transaction and without a rowlock Default: selectQuery</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Primary key field of the table, used to identify messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Optional) field containing the message data Default: &lt;i&gt;same as keyField&lt;/i&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType">
      <xs:simpleType>
        <xs:union memberTypes="MessageFieldTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Type of the field containing the message data Default: &lt;i&gt;String&lt;/i&gt;</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether BLOB is considered stored compressed in the database Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database. N.B. When set true, then the BLOB will be converted into a string Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trace" type="frankBoolean" />
  </xs:attributeGroup>
  <xs:simpleType name="MessageFieldTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="STRING" />
      <xs:enumeration value="CLOB" />
      <xs:enumeration value="BLOB" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="JdbcListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JdbcTableListenerType">
    <xs:attributeGroup ref="JdbcTableListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.JdbcTableListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JdbcTableListenerDeclaredAttributeGroup">
    <xs:attribute name="tableName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the table to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tableAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias of the table, that can be used in selectCondition Default: t</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusField" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Field containing the status of the message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="orderField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Comma separated list of fields determining the order in which messages are processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timestampField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Field used to store the date and time of the last change of the statusField</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commentField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Field used to store the reason of the last change of the statusField</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxCommentLength" type="frankInt">
      <xs:annotation>
        <xs:documentation>(optional) Maximum length of strings to be stored in commentField, or -1 for unlimited Default: 1000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueAvailable" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Value of statusField indicating row is available to be processed. If not specified, any row not having any of the other status values is considered available.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueError" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>"Value of statusField indicating the processing of the row resulted in an error</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueProcessed" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Value of status field indicating row is processed OK</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueInProcess" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of status field indicating is being processed. Can be left emtpy if database has SKIP LOCKED functionality and the Receiver can be (and is) set to Required or RequiresNew.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueHold" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of status field indicating message is on Hold, temporarily</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectCondition" type="xs:string">
      <xs:annotation>
        <xs:documentation>Additional condition for a row to belong to this TableListener. Impacts all process states</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcTableListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcTableListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcListenerCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JmsListenerType">
    <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="PushingJmsListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jms.JmsListener" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="MessageStoreListenerType">
    <xs:attributeGroup ref="MessageStoreListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.MessageStoreListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="MessageStoreListenerDeclaredAttributeGroup">
    <xs:attribute name="slotId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Identifier for this service</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of sessionKey's to be read together with the message. Please note: corresponding MessageStoreSender must have the same value for this attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the table to be used Default: IBISSTORE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Primary key field of the table, used to identify messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Optional) field containing the message data Default: &lt;i&gt;same as keyField&lt;/i&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType">
      <xs:simpleType>
        <xs:union memberTypes="MessageFieldTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Type of the field containing the message data Default: &lt;i&gt;String&lt;/i&gt;</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database. N.B. When set true, then the BLOB will be converted into a string Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Field containing the status of the message Default: TYPE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timestampField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Field used to store the date and time of the last change of the statusField Default: MESSAGEDATE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commentField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Field used to store the reason of the last change of the statusField Default: COMMENTS</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueAvailable" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of statusField indicating row is available to be processed. If set empty, any row not having any of the other status values is considered available. Default: &lt;code&gt;M&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueInProcess" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of status field indicating is being processed. Set to &lt;code&gt;I&lt;/code&gt; if database has no SKIP LOCKED functionality, the Receiver cannot be set to &lt;code&gt;Required&lt;/code&gt; or &lt;code&gt;RequiresNew&lt;/code&gt;, or to support programmatic retry.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueError" type="xs:string">
      <xs:annotation>
        <xs:documentation>"Value of statusField indicating the processing of the row resulted in an error Default: &lt;code&gt;E&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueProcessed" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of status field indicating row is processed OK Default: &lt;code&gt;A&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueHold" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of status field indicating message is on Hold, temporarily. If required, suggested value is &lt;code&gt;H&lt;/code&gt;.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="moveToMessageLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Move to messageLog after processing, as the message is already stored in the ibisstore only some fields need to be updated. When set &lt;code&gt;false&lt;/code&gt;, messages are deleted after being processed Default: &lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="MessageStoreListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="MessageStoreListenerDeclaredAttributeGroup" />
    <xs:attribute name="tableAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias of the table, that can be used in selectCondition Default: t</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="orderField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Comma separated list of fields determining the order in which messages are processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxCommentLength" type="frankInt">
      <xs:annotation>
        <xs:documentation>(optional) Maximum length of strings to be stored in commentField, or -1 for unlimited Default: 1000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectCondition" type="xs:string">
      <xs:annotation>
        <xs:documentation>Additional condition for a row to belong to this TableListener. Impacts all process states</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="peekUntransacted" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true. This avoids rolling back a lot of XA transactions, that appears to be problematic on MS SQL Server Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="peekQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;peekUntransacted=true&lt;/code&gt;) peek query to determine if the select query should be executed. Peek queries are, unlike select queries, executed without a transaction and without a rowlock Default: selectQuery</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether BLOB is considered stored compressed in the database Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trace" type="frankBoolean" />
    <xs:attributeGroup ref="JdbcFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MqttListenerType">
    <xs:attributeGroup ref="MqttFacadeDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.mqtt.MqttListener" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="PullingJmsListenerType">
    <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
    <xs:attributeGroup ref="JmsListenerBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jms.PullingJmsListener" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="RestListenerType">
    <xs:attributeGroup ref="RestListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.http.RestListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="RestListenerDeclaredAttributeGroup">
    <xs:attribute name="uriPattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>Uri pattern to match, the {uri} part in https://mydomain.com/ibis4something/rest/{uri}, where mydomain.com and ibis4something refer to 'your ibis'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="method" type="xs:string">
      <xs:annotation>
        <xs:documentation>Method (e.g. GET or POST) to match</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="etagSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store etag</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentTypeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of Session variable that determines requested content type, overrides produces</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restPath" type="xs:string" />
    <xs:attribute name="view" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Indicates whether this listener supports a view (and a link should be put in the ibis console) Default: if &lt;code&gt;method=get&lt;/code&gt; then &lt;code&gt;true&lt;/code&gt;, else &lt;code&gt;false&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authRoles" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of authorization roles which are granted for this rest service Default: IbisAdmin,IbisDataAdmin,IbisTester,IbisObserver,IbisWebService</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="frankBoolean" />
    <xs:attribute name="writeSecLogMessage" type="frankBoolean" />
    <xs:attribute name="retrieveMultipart" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Indicates whether the parts of a multipart entity should be retrieved and put in session keys. This can only be done once! Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consumes">
      <xs:simpleType>
        <xs:union memberTypes="MediaTypesAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Mediatype (e.g. XML, JSON, TEXT) the restServiceDispatcher receives as input Default: XML</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="produces">
      <xs:simpleType>
        <xs:union memberTypes="MediaTypesAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Mediatype (e.g. XML, JSON, TEXT) the restServiceDispatcher sends as output, if set to json the ibis will automatically try to convert the xml message Default: XML</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="validateEtag" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to true the ibis will automatically validate and process etags Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generateEtag" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to true the ibis will automatically create an etag Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="MediaTypesAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="XML" />
      <xs:enumeration value="JSON" />
      <xs:enumeration value="TEXT" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="RestListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="RestListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="PushingListenerAdapterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Samba2ListenerType">
    <xs:attributeGroup ref="Samba2ListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.receivers.Samba2Listener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Samba2ListenerDeclaredAttributeGroup">
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>Shared folder name in the samba server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain, in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'  Default: SPNEGO</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Domain Controller, as set in java.security.krb5.kdc. If authentication type specified as SPNEGO and realm is specified then this field must be filled.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Realm, as set in java.security.krb5.realm. If authentication type specified as SPNEGO this field must be filled. If not filled then default realm is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Samba2ListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="Samba2ListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemListenerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SambaListenerType">
    <xs:attributeGroup ref="Samba2ListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.receivers.SambaListener" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="SimpleJdbcListenerType">
    <xs:attributeGroup ref="SimpleJdbcListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.SimpleJdbcListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="SimpleJdbcListenerDeclaredAttributeGroup">
    <xs:attribute name="selectQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>count query that returns the number of available records. when there are available records the pipeline is activated</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trace" type="frankBoolean" />
  </xs:attributeGroup>
  <xs:attributeGroup name="SimpleJdbcListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="SimpleJdbcListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="WebServiceListenerType">
    <xs:attributeGroup ref="WebServiceListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.http.WebServiceListener" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="WebServiceListenerDeclaredAttributeGroup">
    <xs:attribute name="soap" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt; the soap envelope is removed from received messages and a soap envelope is added to returned messages (soap envelope will not be visible to the pipeline) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace of the service that is provided by the adapter of this listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="applicationFaultsAsSoapFaults" type="frankBoolean" />
    <xs:attribute name="address" type="xs:string">
      <xs:annotation>
        <xs:documentation>The address to listen to, e.g the part &lt;address&gt; in https://mydomain.com/ibis4something/services/&lt;/address&gt;, where mydomain.com and ibis4something refer to 'your ibis'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mtomEnabled" type="frankBoolean" />
    <xs:attribute name="attachmentSessionKeys" type="xs:string" />
    <xs:attribute name="multipartXmlSessionKey" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="WebServiceListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="WebServiceListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="PushingListenerAdapterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="ErrorSenderElementGroup">
    <xs:choice>
      <xs:element name="ErrorSender">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="CacheElementGroup" />
              <xs:element ref="Param" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ErrorSenderElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ErrorSenderElementGroupBase">
    <xs:choice>
      <xs:element name="Afm2EdiFactErrorSender">
        <xs:annotation>
          <xs:documentation>Domparser om AFM-XML berichten om te zetten in edifactberichten (voor de backoffice).</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Afm2EdiFactSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="AmazonS3ErrorSender">
        <xs:annotation>
          <xs:documentation>Sender to work with Amazon S3.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="AmazonS3SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CommandErrorSender">
        <xs:annotation>
          <xs:documentation>Sender that executes either its input or a fixed line, with all parametervalues appended, as a command.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CommandSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DelayErrorSender">
        <xs:annotation>
          <xs:documentation>Sender that sleeps for a specified time, which defaults to 5000 msecs.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DelaySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DirectQueryErrorSender">
        <xs:annotation>
          <xs:documentation>QuerySender that interprets the input message as a query, possibly with attributes.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DirectQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EchoErrorSender">
        <xs:annotation>
          <xs:documentation>Echos input to output.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EchoSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbJmsErrorSender">
        <xs:annotation>
          <xs:documentation>ESB (Enterprise Service Bus) extension of JmsSender.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbJmsSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ExchangeFolderErrorSender">
        <xs:annotation>
          <xs:documentation>Implementation of a FileSystemSender that enables to manipulate messages in a Exchange folder.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ExchangeFolderSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FileSystemSenderWithAttachmentsErrorSender">
        <xs:annotation>
          <xs:documentation>FileSystem Sender extension to handle Attachments.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FileSystemSenderWithAttachmentsType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedQueryErrorSender">
        <xs:annotation>
          <xs:documentation>QuerySender that assumes a fixed query, possibly with attributes.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedResultErrorSender">
        <xs:annotation>
          <xs:documentation>FixedResultSender, same behaviour as FixedResultPipe, but now as a ISender.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedResultSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FtpFileSystemErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FtpFileSystemSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="HttpErrorSender">
        <xs:annotation>
          <xs:documentation>Sender for the HTTP protocol using GET, POST, PUT or DELETE.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="HttpSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IbisJavaErrorSender">
        <xs:annotation>
          <xs:documentation>Posts a message to another IBIS-adapter or application in the same JVM using IbisServiceDispatcher.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IbisJavaSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IbisLocalErrorSender">
        <xs:annotation>
          <xs:documentation>Posts a message to another IBIS-adapter in the same IBIS instance.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IbisLocalSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IbisWebServiceErrorSender">
        <xs:annotation>
          <xs:documentation>Posts a message to another IBIS-adapter as a WebService.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IbisWebServiceSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ImapErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ImapSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JavascriptErrorSender">
        <xs:annotation>
          <xs:documentation>Sender used to run javascript code using J2V8 or Rhino
 
 This sender can execute a function of a given javascript file, the result of the function will be the output of the sender.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JavascriptSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JmsErrorSender">
        <xs:annotation>
          <xs:documentation>This class sends messages with JMS.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JmsSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonXsltErrorSender">
        <xs:annotation>
          <xs:documentation>Perform an XSLT transformation with a specified stylesheet on a JSON input, yielding JSON, yielding JSON, XML or text.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonXsltSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LdapErrorSender">
        <xs:annotation>
          <xs:documentation>Sender to obtain information from and write to an LDAP Directory.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LdapSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LocalFileSystemErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LocalFileSystemSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LogErrorSender">
        <xs:annotation>
          <xs:documentation>Sender that just logs its message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LogSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MailErrorSender">
        <xs:annotation>
          <xs:documentation>sender that sends a mail specified by an XML message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MailSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MessageStoreErrorSender">
        <xs:annotation>
          <xs:documentation>Send messages to the ibisstore to have them processed exactly-once by another
 adapter which will read the messages using a MessageStoreListener.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MessageStoreSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MongoDbErrorSender">
        <xs:annotation>
          <xs:documentation>Sender to perform action on a MongoDB database.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MongoDbSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MqttErrorSender">
        <xs:annotation>
          <xs:documentation>MQTT listener which will connect to a broker and subscribe to a topic.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MqttSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MultipartHttpErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MultipartHttpSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ParallelSendersErrorSender">
        <xs:annotation>
          <xs:documentation>Collection of Senders, that are executed all at the same time.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ParallelSendersType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ReloadErrorSender">
        <xs:annotation>
          <xs:documentation>Performs a reload on database configuration.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ReloadSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ResultSet2FileErrorSender">
        <xs:annotation>
          <xs:documentation>QuerySender that writes each row in a ResultSet to a file.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ResultSet2FileSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba1ErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba1SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba2ErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba2SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SambaErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SambaSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SchedulerErrorSender">
        <xs:annotation>
          <xs:documentation>Registers a trigger in the scheduler so that the message is send to a javalistener
 at a scheduled time.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SchedulerSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SendGridErrorSender">
        <xs:annotation>
          <xs:documentation>Sender that sends a mail via SendGrid v3 (cloud-based SMTP provider).</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SendGridSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SenderSeriesErrorSender">
        <xs:annotation>
          <xs:documentation>Series of Senders, that are executed one after another.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SenderSeriesType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SenderWrapperErrorSender">
        <xs:annotation>
          <xs:documentation>Wrapper for senders, that allows to get input from a session variable, and to store output in a session variable.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SenderWrapperType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ShadowErrorSender">
        <xs:annotation>
          <xs:documentation>Collection of Senders, that are executed all at the same time.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ShadowSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WebServiceNtlmErrorSender">
        <xs:annotation>
          <xs:documentation>Sender that sends a message via a WebService based on NTLM authentication.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WebServiceNtlmSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WebServiceErrorSender">
        <xs:annotation>
          <xs:documentation>Sender that sends a message via a WebService.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WebServiceSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XComErrorSender">
        <xs:annotation>
          <xs:documentation>XCom client voor het versturen van files via XCom.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XComSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XfbErrorSender">
        <xs:annotation>
          <xs:documentation>Sender for transferring files using the XFB protocol.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XfbSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlJmsBrowserErrorSender">
        <xs:annotation>
          <xs:documentation>Sender for browsing and removing queue messages (with input and output in a XML message).</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlJmsBrowserSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlQueryErrorSender">
        <xs:annotation>
          <xs:documentation>QuerySender that transforms the input message to a query.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlValidatorErrorSender">
        <xs:annotation>
          <xs:documentation>&lt;code&gt;Sender&lt;/code&gt; that validates the input message against a XML-Schema.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlValidatorSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XsltErrorSender">
        <xs:annotation>
          <xs:documentation>Perform an XSLT transformation with a specified stylesheet or XPath-expression.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XsltSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ZipWriterErrorSender">
        <xs:annotation>
          <xs:documentation>Sender that writes an entry to a ZipStream, similar to ZipWriterPipe with action='write'.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ZipWriterSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="ErrorStorageElementGroup">
    <xs:choice>
      <xs:element name="ErrorStorage">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="Param" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="errorStorage" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ErrorStorageElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ErrorStorageElementGroupBase">
    <xs:choice>
      <xs:element name="EsbJmsErrorStorage">
        <xs:annotation>
          <xs:documentation>ESB (Enterprise Service Bus) extension of JmsTransactionalStorage.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbJmsTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorStorage" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JdbcErrorStorage">
        <xs:annotation>
          <xs:documentation>JDBC implementation of ITransactionalStorage.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JdbcTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorStorage" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JmsErrorStorage">
        <xs:annotation>
          <xs:documentation>JMS implementation of &lt;code&gt;ITransactionalStorage&lt;/code&gt;.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JmsTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorStorage" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MessageStoreSenderErrorStorage">
        <xs:annotation>
          <xs:documentation>Send messages to the ibisstore to have them processed exactly-once by another
 adapter which will read the messages using a MessageStoreListener.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MessageStoreSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorStorage" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="EsbJmsTransactionalStorageType">
    <xs:attributeGroup ref="JmsTransactionalStorageCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.esb.EsbJmsTransactionalStorage" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="JmsTransactionalStorageType">
    <xs:attributeGroup ref="JmsTransactionalStorageCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jms.JmsTransactionalStorage" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JmsTransactionalStorageDeclaredAttributeGroup">
    <xs:attribute name="slotId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional identifier for this storage, to be able to share the physical storage between a number of receivers and pipes.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are &lt;code&gt;E&lt;/code&gt; (error store), &lt;code&gt;M&lt;/code&gt; (message store), &lt;code&gt;L&lt;/code&gt; (message log for Pipe) or &lt;code&gt;A&lt;/code&gt; (message log for Receiver).&lt;br/&gt;
 Receiver will always set type to &lt;code&gt;E&lt;/code&gt; for errorStorage and always set type to &lt;code&gt;A&lt;/code&gt; for messageLog. SenderPipe will set type to &lt;code&gt;L&lt;/code&gt; for messageLog (when type isn't specified).&lt;br/&gt;
 See MessageStoreSender for type &lt;code&gt;M&lt;/code&gt;. Default: &lt;code&gt;E&lt;/code&gt; for errorStorage on Receiver&lt;br/&gt;&lt;code&gt;A&lt;/code&gt; for messageLog on Receiver&lt;br/&gt;&lt;code&gt;L&lt;/code&gt; for messageLog on Pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JmsTransactionalStorageCumulativeAttributeGroup">
    <xs:attributeGroup ref="JmsTransactionalStorageDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JmsMessageBrowserCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JmsMessageBrowserDeclaredAttributeGroup">
    <xs:attribute name="timeOut" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout &lt;i&gt;in milliseconds&lt;/i&gt; for receiving a message from the queue Default: 3000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys&lt;party&gt; and &lt;/party&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firstHalf&lt;/code&gt;. When &lt;code&gt;firstHalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked Default: all</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JmsMessageBrowserCumulativeAttributeGroup">
    <xs:attributeGroup ref="JmsMessageBrowserDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JMSFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="MessageLogElementGroup">
    <xs:choice>
      <xs:element name="MessageLog">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="Param" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="messageLog" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="MessageLogElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="MessageLogElementGroupBase">
    <xs:choice>
      <xs:element name="EsbJmsMessageLog">
        <xs:annotation>
          <xs:documentation>ESB (Enterprise Service Bus) extension of JmsTransactionalStorage.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbJmsTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="messageLog" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JdbcMessageLog">
        <xs:annotation>
          <xs:documentation>JDBC implementation of ITransactionalStorage.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JdbcTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="messageLog" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JmsMessageLog">
        <xs:annotation>
          <xs:documentation>JMS implementation of &lt;code&gt;ITransactionalStorage&lt;/code&gt;.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JmsTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="messageLog" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MessageStoreSenderMessageLog">
        <xs:annotation>
          <xs:documentation>Send messages to the ibisstore to have them processed exactly-once by another
 adapter which will read the messages using a MessageStoreListener.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MessageStoreSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="messageLog" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:simpleType name="OnErrorAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="CONTINUE">
        <xs:annotation>
          <xs:documentation>Don't stop the receiver when an error occurs.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="RECOVER">
        <xs:annotation>
          <xs:documentation>If an error occurs (eg. connection is lost) the receiver will be stopped and marked as ERROR
 Once every &lt;code&gt;recover.adapters.interval&lt;/code&gt; it will be attempted to (re-) start the receiver.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CLOSE">
        <xs:annotation>
          <xs:documentation>Stop the receiver when an error occurs.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CheckForDuplicatesMethodAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="MESSAGEID" />
      <xs:enumeration value="CORRELATIONID" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TransactionAttributeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Required">
        <xs:annotation>
          <xs:documentation>Support a current transaction; create a new one if none exists.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Supports">
        <xs:annotation>
          <xs:documentation>Support a current transaction; execute non-transactionally if none exists.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Mandatory">
        <xs:annotation>
          <xs:documentation>Support a current transaction; throw an exception if no current transaction exists.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="RequiresNew">
        <xs:annotation>
          <xs:documentation>Create a new transaction, suspending the current transaction if one exists.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="NotSupported">
        <xs:annotation>
          <xs:documentation>Do not support a current transaction; rather always execute non-transactionally.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Never">
        <xs:annotation>
          <xs:documentation>Do not support a current transaction; throw an exception if a current transaction exists.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:group name="ErrorMessageFormatterElementGroup">
    <xs:choice>
      <xs:element name="ErrorMessageFormatter">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="Param" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="errorMessageFormatter" use="prohibited" />
          <xs:attribute name="className" type="xs:string" default="nl.nn.adapterframework.errormessageformatters.ErrorMessageFormatter" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ErrorMessageFormatterElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ErrorMessageFormatterElementGroupBase">
    <xs:choice>
      <xs:element name="FixedErrorMessageFormatter">
        <xs:annotation>
          <xs:documentation>ErrorMessageFormatter that returns a fixed message with replacements.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedErrorMessageFormatterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorMessageFormatter" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapErrorMessageFormatter">
        <xs:annotation>
          <xs:documentation>ErrorMessageFormatter that returns a soap fault message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapErrorMessageFormatterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorMessageFormatter" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XslErrorMessageFormatter">
        <xs:annotation>
          <xs:documentation>Applies a XSLT-stylesheet to the standard error generated by an ErrorMessageFormatter.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XslErrorMessageFormatterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorMessageFormatter" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="FixedErrorMessageFormatterType">
    <xs:attributeGroup ref="FixedErrorMessageFormatterDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.errormessageformatters.FixedErrorMessageFormatter" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="FixedErrorMessageFormatterDeclaredAttributeGroup">
    <xs:attribute name="returnString" type="xs:string">
      <xs:annotation>
        <xs:documentation>returned message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file containing the resultmessage</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceFrom" type="xs:string" />
    <xs:attribute name="replaceTo" type="xs:string" />
    <xs:attribute name="styleSheetName" type="xs:string" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="SoapErrorMessageFormatterType">
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.errormessageformatters.SoapErrorMessageFormatter" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="XslErrorMessageFormatterType">
    <xs:group ref="XslErrorMessageFormatterDeclaredChildGroup" />
    <xs:attributeGroup ref="XslErrorMessageFormatterDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.errormessageformatters.XslErrorMessageFormatter" use="prohibited" />
  </xs:complexType>
  <xs:group name="XslErrorMessageFormatterDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="XslErrorMessageFormatterDeclaredAttributeGroup">
    <xs:attribute name="styleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to use for transformation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpathexpression to use for transformation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:group name="InputValidatorElementGroup">
    <xs:choice>
      <xs:element name="InputValidator">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="Forward" />
              <xs:element ref="Locker" />
              <xs:element ref="Param" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="InputValidatorElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:simpleType name="LockTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="T">
        <xs:annotation>
          <xs:documentation>Temporary</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="P">
        <xs:annotation>
          <xs:documentation>Permanent</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:group name="InputValidatorElementGroupBase">
    <xs:choice>
      <xs:element name="ApiWsdlXmlInputValidator">
        <xs:annotation>
          <xs:documentation>Extension to WsdlXmlValidator for API Management.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiWsdlXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbSoapInputValidator">
        <xs:annotation>
          <xs:documentation>XmlValidator that will automatically add the SOAP envelope XSD and the ESB XSD (e.g.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbSoapValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfXmlInputValidator">
        <xs:annotation>
          <xs:documentation>FxF XML validator to be used with FxF3.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Json2XmlInputValidator">
        <xs:annotation>
          <xs:documentation>&lt;code&gt;Pipe&lt;/code&gt; that validates the XML or JSON input message against a XML-Schema and returns either XML or JSON.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Json2XmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapInputValidator">
        <xs:annotation>
          <xs:documentation>XmlValidator that will automatically add the SOAP envelope XSD to the set of XSD's used for validation.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WsdlXmlInputValidator">
        <xs:annotation>
          <xs:documentation>XmlValidator that will read the XSD's to use from a WSDL.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WsdlXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlInputValidator">
        <xs:annotation>
          <xs:documentation>&lt;code&gt;Pipe&lt;/code&gt; that validates the input message against a XML-Schema.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlWellFormedCheckerInputValidator">
        <xs:annotation>
          <xs:documentation>&lt;code&gt;Pipe&lt;/code&gt; that checks the well-formedness of the input message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlWellFormedCheckerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="ApiWsdlXmlValidatorType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="ApiWsdlXmlValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.api.ApiWsdlXmlValidator" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ApiWsdlXmlValidatorDeclaredAttributeGroup">
    <xs:attribute name="multipart" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>indicates whether the message is multipart/form-data. If so, the wsdl only represents the first part, other parts are attachments. This attribute is only used for generating the 'real' wsdl which is available in the ibis console (../rest/webservices) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ApiWsdlXmlValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="ApiWsdlXmlValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="WsdlXmlValidatorCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="AbstractPipeDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
      <xs:element ref="Locker" minOccurs="0" maxOccurs="1" />
      <xs:element ref="Forward" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="AbstractPipeDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum number of threads that may call session) simultaneously, use 0 to disable limit Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored Default: ref_ + the name of the element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="frankInt">
      <xs:annotation>
        <xs:documentation>If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory to be analyzed Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="frankBoolean" />
    <xs:attribute name="restoreMovedElements" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  #setElementToMove(java.lang.String))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes Default: application default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sizeStatistics" type="frankBoolean" />
    <xs:attribute name="writeToSecLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt; a record is written to the security log when the pipe has finished successfully</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;writeToSecLog=true&lt;/code&gt;) comma separated list of keys of session variables that is appended to the security log record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value in AppConstants is overwritten (for this pipe only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt;
 will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level,
 so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="AbstractPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="AbstractPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="TransactionAttributesType">
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.core.TransactionAttributes" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="TransactionAttributesDeclaredAttributeGroup">
    <xs:attribute name="transactionTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout (in seconds) of transaction started to process a message. Default: &lt;code&gt;0&lt;/code&gt; (use system default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute">
      <xs:simpleType>
        <xs:union memberTypes="TransactionAttributeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>The &lt;code&gt;transactionAttribute&lt;/code&gt; declares transactional behavior of execution. It applies both to database transactions and XA transactions.The pipeline uses this to start a new transaction or suspend the current one when required. For developers: it is equalto &lt;a href="https://docs.oracle.com/javaee/7/tutorial/transactions003.htm"&gt;EJB transaction attribute&lt;/a&gt;. Possible values for transactionAttribute:  &lt;table border="1"&gt;    &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt; 										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="1" rowspan="2"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt; Default: Supports</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="WsdlXmlValidatorType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="WsdlXmlValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.WsdlXmlValidator" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="WsdlXmlValidatorDeclaredAttributeGroup">
    <xs:attribute name="wsdl" type="xs:string">
      <xs:annotation>
        <xs:documentation>the wsdl to read the xsd's from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocationToAdd" type="xs:string">
      <xs:annotation>
        <xs:documentation>pairs of uri references which will be added to the wsdl</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>creates &lt;code&gt;schemalocation&lt;/code&gt; attribute based on the wsdl and replaces the namespace of the soap body element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="WsdlXmlValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="WsdlXmlValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SoapValidatorCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SoapValidatorType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="SoapValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.soap.SoapValidator" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="SoapValidatorDeclaredAttributeGroup">
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the child element of the SOAP body, or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSoapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>Identical to the &lt;code&gt;soapBody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. For more information see &lt;a href="#note1"&gt;note 1&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the child element of the SOAP header, or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be used when the SOAP header element exists multiple times</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapVersion">
      <xs:simpleType>
        <xs:union memberTypes="SoapVersionAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>SOAP envelope XSD version to use Default: 1.1</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Allow plain XML, without a SOAP Envelope, too. Be aware that setting this true inhibits the capability to test for exit specific response roots in SOAP messages Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="SoapVersionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="1.1" />
      <xs:enumeration value="1.2" />
      <xs:enumeration value="none">
        <xs:annotation>
          <xs:documentation>No wrapping or unwrapping will be done</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="auto">
        <xs:annotation>
          <xs:documentation>Try to auto-detect the value</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="SoapValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="SoapValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="Json2XmlValidatorDeclaredAttributeGroup" />
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;p&gt;Pairs of URI references (one for the namespace name, and one for a
 hint as to the location of a schema document defining names for that
 namespace name).&lt;/p&gt;
 &lt;p&gt; The syntax is the same as for schemaLocation attributes
 in instance documents: e.g, "http://www.example.com file%20name.xsd".&lt;/p&gt;
 &lt;p&gt;The user can specify more than one XML Schema in the list.&lt;/p&gt;
 &lt;p&gt;&lt;b&gt;Note&lt;/b&gt; that spaces are considered separators for this attributed.
 This means that, for example, spaces in filenames should be escaped to %20.
 &lt;/p&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of element names. The validation fails if the root element is not present in the list. N.B. for WSDL generation only the first element is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Enable full schema grammar constraint checking, including checking which
 may be time-consuming or memory intensive. Currently, particle unique
 attribution constraint checking and particle derivation restriction
 checking are controlled by this option.
 &lt;p&gt;
 see property
 http://apache.org/xml/features/validation/schema-full-checking
 &lt;/p&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in Default: failureReason</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive Default: xmlFailureReason</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; Default: utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Ignore namespaces in the input message which are unknown Default: true when &lt;code&gt;schema&lt;/code&gt; or &lt;code&gt;noNamespaceSchemaLocation&lt;/code&gt; is used, false otherwise</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  Default: &lt;code&gt;1.1&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum number of threads that may call session) simultaneously, use 0 to disable limit Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored Default: ref_ + the name of the element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="frankInt">
      <xs:annotation>
        <xs:documentation>If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory to be analyzed Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="frankBoolean" />
    <xs:attribute name="restoreMovedElements" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  #setElementToMove(java.lang.String))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes Default: application default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sizeStatistics" type="frankBoolean" />
    <xs:attribute name="writeToSecLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt; a record is written to the security log when the pipe has finished successfully</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;writeToSecLog=true&lt;/code&gt;) comma separated list of keys of session variables that is appended to the security log record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value in AppConstants is overwritten (for this pipe only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt;
 will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level,
 so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Json2XmlValidatorType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="Json2XmlValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.Json2XmlValidator" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Json2XmlValidatorDeclaredAttributeGroup">
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for json input: namespace of the resulting xml. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat">
      <xs:simpleType>
        <xs:union memberTypes="DocumentFormatAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Default format of the result. Default: XML</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputformat from. Default: outputformat</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputformat in, to be able to set the outputformat when autoFormat=true. Can also be used to pass the value of an HTTP Accept header, to obtain a properly formatted response Default: Json2XmlValidator.inputformat +&lt;name of the pipe&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true assume arrays in json do not have the element containers like in xml Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true check that incoming json adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from json to xml Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, assume that json contains/must contain a root element Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currenlty this option might cause problems. Please try using more qualified parameters names (using '/') first Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUndeclaredElements" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, and converting from json to xml, elements in json that are not found in the XML-Schema are ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the xml schema when parsing an object. This often indicates that an element is not properly typed in the xml schema, and could lead to ambuigities. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="acceptNamespaceLessXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, all xml is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the xml string, the root namespace is added to the xml Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, all xml that is generated is without a namespace set Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateJsonToRootElementOnly" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from json, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowJson" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Allow JSON input Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Json2XmlValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="Json2XmlValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="XmlValidatorCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlValidatorType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="XmlValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.XmlValidator" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="XmlValidatorDeclaredAttributeGroup">
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>the filename of the schema on the classpath. see doc on the method. (effectively the same as noNamespaceSchemaLocation)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;p&gt;Pairs of URI references (one for the namespace name, and one for a
 hint as to the location of a schema document defining names for that
 namespace name).&lt;/p&gt;
 &lt;p&gt; The syntax is the same as for schemaLocation attributes
 in instance documents: e.g, "http://www.example.com file%20name.xsd".&lt;/p&gt;
 &lt;p&gt;The user can specify more than one XML Schema in the list.&lt;/p&gt;
 &lt;p&gt;&lt;b&gt;Note&lt;/b&gt; that spaces are considered separators for this attributed.
 This means that, for example, spaces in filenames should be escaped to %20.
 &lt;/p&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key for retrieving a schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the root element, or a comma separated list of element names. The validation fails if the root element is not present in the list. N.B. for WSDL generation only the first element is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element, or a comma separated list of element names. The validation fails if the root element is not present in the list. N.B. for WSDL generation only the first element is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullSchemaChecking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Enable full schema grammar constraint checking, including checking which
 may be time-consuming or memory intensive. Currently, particle unique
 attribution constraint checking and particle derivation restriction
 checking are controlled by this option.
 &lt;p&gt;
 see property
 http://apache.org/xml/features/validation/schema-full-checking
 &lt;/p&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in Default: failureReason</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive Default: xmlFailureReason</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; Default: utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNamespaceToSchema" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Ignore namespaces in the input message which are unknown Default: true when &lt;code&gt;schema&lt;/code&gt; or &lt;code&gt;noNamespaceSchemaLocation&lt;/code&gt; is used, false otherwise</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property.  Default: &lt;code&gt;1.1&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootElementSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable to store the namespace of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum number of threads that may call session) simultaneously, use 0 to disable limit Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored Default: ref_ + the name of the element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="frankInt">
      <xs:annotation>
        <xs:documentation>If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory to be analyzed Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="frankBoolean" />
    <xs:attribute name="restoreMovedElements" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  #setElementToMove(java.lang.String))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes Default: application default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sizeStatistics" type="frankBoolean" />
    <xs:attribute name="writeToSecLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt; a record is written to the security log when the pipe has finished successfully</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;writeToSecLog=true&lt;/code&gt;) comma separated list of keys of session variables that is appended to the security log record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value in AppConstants is overwritten (for this pipe only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt;
 will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level,
 so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="FixedForwardPipeDeclaredAttributeGroup">
    <xs:attribute name="skipOnEmptyInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set, the processing continues directly at the forward of this pipe, without executing the pipe itself, if the input is empty Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifparam&lt;/code&gt; equals &lt;code&gt;ifvalue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>See &lt;code&gt;ifparam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FixedForwardPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="EsbSoapValidatorType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="EsbSoapValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.esb.EsbSoapValidator" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="EsbSoapValidatorDeclaredAttributeGroup">
    <xs:attribute name="direction" type="xs:string" />
    <xs:attribute name="mode" type="xs:string" />
    <xs:attribute name="cmhVersion" type="frankInt" />
  </xs:attributeGroup>
  <xs:attributeGroup name="EsbSoapValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="EsbSoapValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SoapValidatorCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FxfXmlValidatorType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="FxfXmlValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.fxf.FxfXmlValidator" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="FxfXmlValidatorDeclaredAttributeGroup">
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;send&lt;/code&gt; or &lt;code&gt;receive&lt;/code&gt; Default: send</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fxfVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>either 3.1 or 3.2 Default: 3.1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FxfXmlValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="FxfXmlValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="WsdlXmlValidatorCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlWellFormedCheckerType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="XmlWellFormedCheckerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.XmlWellFormedChecker" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="XmlWellFormedCheckerDeclaredAttributeGroup">
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlWellFormedCheckerCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlWellFormedCheckerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum number of threads that may call session) simultaneously, use 0 to disable limit Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored Default: ref_ + the name of the element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="frankInt">
      <xs:annotation>
        <xs:documentation>If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory to be analyzed Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="frankBoolean" />
    <xs:attribute name="restoreMovedElements" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  #setElementToMove(java.lang.String))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes Default: application default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sizeStatistics" type="frankBoolean" />
    <xs:attribute name="writeToSecLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt; a record is written to the security log when the pipe has finished successfully</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;writeToSecLog=true&lt;/code&gt;) comma separated list of keys of session variables that is appended to the security log record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value in AppConstants is overwritten (for this pipe only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt;
 will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level,
 so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="OutputValidatorElementGroup">
    <xs:choice>
      <xs:element name="OutputValidator">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="Forward" />
              <xs:element ref="Locker" />
              <xs:element ref="Param" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="OutputValidatorElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="OutputValidatorElementGroupBase">
    <xs:choice>
      <xs:element name="ApiWsdlXmlOutputValidator">
        <xs:annotation>
          <xs:documentation>Extension to WsdlXmlValidator for API Management.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiWsdlXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbSoapOutputValidator">
        <xs:annotation>
          <xs:documentation>XmlValidator that will automatically add the SOAP envelope XSD and the ESB XSD (e.g.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbSoapValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfXmlOutputValidator">
        <xs:annotation>
          <xs:documentation>FxF XML validator to be used with FxF3.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Json2XmlOutputValidator">
        <xs:annotation>
          <xs:documentation>&lt;code&gt;Pipe&lt;/code&gt; that validates the XML or JSON input message against a XML-Schema and returns either XML or JSON.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Json2XmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapOutputValidator">
        <xs:annotation>
          <xs:documentation>XmlValidator that will automatically add the SOAP envelope XSD to the set of XSD's used for validation.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WsdlXmlOutputValidator">
        <xs:annotation>
          <xs:documentation>XmlValidator that will read the XSD's to use from a WSDL.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WsdlXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlOutputValidator">
        <xs:annotation>
          <xs:documentation>&lt;code&gt;Pipe&lt;/code&gt; that validates the input message against a XML-Schema.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlWellFormedCheckerOutputValidator">
        <xs:annotation>
          <xs:documentation>&lt;code&gt;Pipe&lt;/code&gt; that checks the well-formedness of the input message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlWellFormedCheckerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="InputWrapperElementGroup">
    <xs:choice>
      <xs:element name="InputWrapper">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="Forward" />
              <xs:element ref="Locker" />
              <xs:element ref="Param" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="inputWrapper" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="InputWrapperElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="InputWrapperElementGroupBase">
    <xs:choice>
      <xs:element name="ApiSoapInputWrapper">
        <xs:annotation>
          <xs:documentation>Extension to SoapWrapperPipe for API Management.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiSoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputWrapper" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbSoapInputWrapper">
        <xs:annotation>
          <xs:documentation>Extension to SoapWrapperPipe for separate modes.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbSoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputWrapper" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfInputWrapper">
        <xs:annotation>
          <xs:documentation>FxF wrapper to be used with FxF3.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputWrapper" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapInputWrapper">
        <xs:annotation>
          <xs:documentation>Pipe to wrap or unwrap a message from/into a SOAP Envelope.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputWrapper" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="ApiSoapWrapperPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="SoapWrapperPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.api.ApiSoapWrapperPipe" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="SoapWrapperPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="SoapWrapperPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.soap.SoapWrapperPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="SoapWrapperPipeDeclaredAttributeGroup">
    <xs:attribute name="direction">
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType_2 variableRef">
          <xs:annotation>
            <xs:documentation>Default: wrap</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="soapVersion">
      <xs:simpleType>
        <xs:union memberTypes="SoapVersionAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Soap version to use Default: auto</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto detected soapNamespace Default: soapVersion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Namespace of the soap envelope Default: auto determined from soapVersion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header Default: soapHeader, when direction is 'unwrap'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingstyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputtype=&lt;code&gt;xml&lt;/code&gt; and xslt2=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeOutputNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is only executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The wrap or unwrap action is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The wrap or unwrap action is not executed if the session variable exists</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The wrap or unwrap action is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="DirectionAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:enumeration value="WRAP" />
      <xs:enumeration value="UNWRAP" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="SoapWrapperPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="SoapWrapperPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum number of threads that may call session) simultaneously, use 0 to disable limit Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored Default: ref_ + the name of the element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="frankInt">
      <xs:annotation>
        <xs:documentation>If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory to be analyzed Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="frankBoolean" />
    <xs:attribute name="restoreMovedElements" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  #setElementToMove(java.lang.String))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes Default: application default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sizeStatistics" type="frankBoolean" />
    <xs:attribute name="writeToSecLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt; a record is written to the security log when the pipe has finished successfully</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;writeToSecLog=true&lt;/code&gt;) comma separated list of keys of session variables that is appended to the security log record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value in AppConstants is overwritten (for this pipe only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt;
 will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level,
 so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="EsbSoapWrapperPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="EsbSoapWrapperPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.esb.EsbSoapWrapperPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="EsbSoapWrapperPipeDeclaredAttributeGroup">
    <xs:attribute name="mode" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;i2t&lt;/code&gt; (ifsa2tibco), &lt;code&gt;reg&lt;/code&gt; (regular) or &lt;code&gt;bis&lt;/code&gt; (Business Integration Services) Default: reg</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cmhVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>&lt;b&gt;Only used when &lt;code&gt;mode=reg&lt;/code&gt;!&lt;/b&gt; Sets the Common Message Header version. 1 or 2 Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addOutputNamespace" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;outputNamespace&lt;/code&gt; is automatically set using the parameters (if $messagingLayer='P2P' then 'http://nn.nl/XSD/$businessDomain/$applicationName/$applicationFunction' else is serviceContext is not empty 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceContext/$serviceContextVersion/$operationName/$operationVersion' else 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceVersion/$operationName/$operationVersion') Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retrievePhysicalDestination" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, the physical destination is retrieved from the queue instead of using the parameter &lt;code&gt;destination&lt;/code&gt; Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useFixedValues" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the fields CorrelationId, MessageId and Timestamp will have a fixed value (for testing purposes only) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fixResultNamespace" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt; and the Result tag already exists, the namespace is changed Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="p2pAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as P2P</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="esbAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as ESB</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="EsbSoapWrapperPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="EsbSoapWrapperPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SoapWrapperPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FxfWrapperPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="FxfWrapperPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.fxf.FxfWrapperPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="FxfWrapperPipeDeclaredAttributeGroup">
    <xs:attribute name="flowId" type="xs:string">
      <xs:annotation>
        <xs:documentation>The flowId of the file transfer when direction=wrap. When direction=unwrap the flowId will be extracted from the incoming message and added as a sessionKey to the pipeline.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="flowOutFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies the output folder if transformFilename=&lt;code&gt;false&lt;/code&gt; and direction=wrap</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transformFilename" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt; and direction=wrap, the input which is expected to be a local filename will be transformed to the filename as known on the IUF State machine. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodySessionKey" type="xs:string" />
    <xs:attribute name="transferFlowIdSessionKey" type="xs:string" />
    <xs:attribute name="clientFilenameSessionKey" type="xs:string" />
    <xs:attribute name="flowIdSessionKey" type="xs:string" />
    <xs:attribute name="fxfDirSessionKey" type="xs:string" />
    <xs:attribute name="fxfFileSessionKey" type="xs:string" />
    <xs:attribute name="fxfVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>either 3.1 or 3.2 Default: 3.1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder corresponding fxf.dir property will be created in case it does not exist Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useServerFilename" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, ServerFileName from the input will be used as the filename Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FxfWrapperPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="FxfWrapperPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="EsbSoapWrapperPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="OutputWrapperElementGroup">
    <xs:choice>
      <xs:element name="OutputWrapper">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="Forward" />
              <xs:element ref="Locker" />
              <xs:element ref="Param" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="outputWrapper" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="OutputWrapperElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="OutputWrapperElementGroupBase">
    <xs:choice>
      <xs:element name="ApiSoapOutputWrapper">
        <xs:annotation>
          <xs:documentation>Extension to SoapWrapperPipe for API Management.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiSoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputWrapper" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbSoapOutputWrapper">
        <xs:annotation>
          <xs:documentation>Extension to SoapWrapperPipe for separate modes.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbSoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputWrapper" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfOutputWrapper">
        <xs:annotation>
          <xs:documentation>FxF wrapper to be used with FxF3.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputWrapper" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapOutputWrapper">
        <xs:annotation>
          <xs:documentation>Pipe to wrap or unwrap a message from/into a SOAP Envelope.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputWrapper" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:simpleType name="ExitStateAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="SUCCESS" />
      <xs:enumeration value="ERROR" />
      <xs:enumeration value="REJECTED" />
    </xs:restriction>
  </xs:simpleType>
  <xs:group name="PipeElementGroup">
    <xs:choice>
      <xs:element name="Pipe">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="CacheElementGroup" />
              <xs:element ref="Forward" />
              <xs:group ref="InputValidatorElementGroup" />
              <xs:group ref="InputWrapperElementGroup" />
              <xs:group ref="ListenerElementGroup_2" />
              <xs:element ref="Locker" />
              <xs:group ref="ManagerElementGroup" />
              <xs:group ref="MessageLogElementGroup" />
              <xs:group ref="OutputValidatorElementGroup" />
              <xs:group ref="OutputWrapperElementGroup" />
              <xs:element ref="Param" />
              <xs:group ref="ReaderFactoryElementGroup" />
              <xs:group ref="RecordHandlerElementGroup" />
              <xs:group ref="ResultHandlerElementGroup" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
          <xs:attribute name="className" type="xs:string" default="nl.nn.adapterframework.pipes.SenderPipe" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="PipeElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ListenerElementGroup_2">
    <xs:choice>
      <xs:element name="Listener">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="Param" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ListenerElementGroupBase_2" />
    </xs:choice>
  </xs:group>
  <xs:group name="ListenerElementGroupBase_2">
    <xs:choice>
      <xs:element name="PullingJmsListener">
        <xs:annotation>
          <xs:documentation>A true multi-threaded Listener-class.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PullingJmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="ManagerElementGroup">
    <xs:choice>
      <xs:element name="Manager">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="Flow" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="manager" use="prohibited" />
          <xs:attribute name="className" type="xs:string" default="nl.nn.adapterframework.batch.RecordHandlerManager" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ManagerElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ManagerElementGroupBase">
    <xs:choice>
      <xs:element name="FieldPositionManager">
        <xs:annotation>
          <xs:documentation>Manager that decides the handlers based on the content of a field in the specified 
 position in a record.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FieldPositionRecordHandlerManagerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="manager" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedPositionManager">
        <xs:annotation>
          <xs:documentation>Manager that decides the handlers based on the content of a field in the specified 
 position in a record.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedPositionRecordHandlerManagerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="manager" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="FieldPositionRecordHandlerManagerType">
    <xs:group ref="RecordHandlerManagerDeclaredChildGroup" />
    <xs:attributeGroup ref="FieldPositionRecordHandlerManagerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.FieldPositionRecordHandlerManager" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="FieldPositionRecordHandlerManagerDeclaredAttributeGroup">
    <xs:attribute name="fieldNr" type="frankInt">
      <xs:annotation>
        <xs:documentation>position of field that identifies the recordtype (position of first field is 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="separator" type="xs:string">
      <xs:annotation>
        <xs:documentation>separator that separates the fields in the record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FieldPositionRecordHandlerManagerCumulativeAttributeGroup">
    <xs:attributeGroup ref="FieldPositionRecordHandlerManagerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="RecordHandlerManagerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="RecordHandlerManagerType">
    <xs:group ref="RecordHandlerManagerDeclaredChildGroup" />
    <xs:attributeGroup ref="RecordHandlerManagerDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.RecordHandlerManager" use="prohibited" />
  </xs:complexType>
  <xs:group name="RecordHandlerManagerDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Flow" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="RecordHandlerManagerDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the manager</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initial" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>This manager is the initial manager, i.e. to be used for the first record Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="FixedPositionRecordHandlerManagerType">
    <xs:group ref="RecordHandlerManagerDeclaredChildGroup" />
    <xs:attributeGroup ref="FixedPositionRecordHandlerManagerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.FixedPositionRecordHandlerManager" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="FixedPositionRecordHandlerManagerDeclaredAttributeGroup">
    <xs:attribute name="startPosition" type="frankInt">
      <xs:annotation>
        <xs:documentation>Start position of the field in the record that identifies the recordtype (first character is 0) Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endPosition" type="frankInt">
      <xs:annotation>
        <xs:documentation>If endposition &gt;= 0 then this field contains the endPosition of the recordtype field in the record; All characters beyond this position are ignored. Else, if endPosition &lt; 0 then it depends on the length of the recordkey in the flow Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FixedPositionRecordHandlerManagerCumulativeAttributeGroup">
    <xs:attributeGroup ref="FixedPositionRecordHandlerManagerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="RecordHandlerManagerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="ReaderFactoryElementGroup">
    <xs:choice>
      <xs:element name="ReaderFactory">
        <xs:complexType>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="readerFactory" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ReaderFactoryElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ReaderFactoryElementGroupBase">
    <xs:choice>
      <xs:element name="DelphiStringRecordReaderFactory">
        <xs:annotation>
          <xs:documentation>IReaderFactory that provides a reader that reads Delphi records containing Strings.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DelphiStringRecordReaderFactoryType">
              <xs:attribute name="elementRole" type="xs:string" fixed="readerFactory" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="InputStreamReaderFactory">
        <xs:annotation>
          <xs:documentation>Basic InputStreamReaderFactory.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="InputStreamReaderFactoryType">
              <xs:attribute name="elementRole" type="xs:string" fixed="readerFactory" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="DelphiStringRecordReaderFactoryType">
    <xs:attributeGroup ref="DelphiStringRecordReaderFactoryDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.DelphiStringRecordReaderFactory" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="DelphiStringRecordReaderFactoryDeclaredAttributeGroup">
    <xs:attribute name="separator" type="xs:string">
      <xs:annotation>
        <xs:documentation>separator placed between each string read Default: |</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stringLength" type="frankInt">
      <xs:annotation>
        <xs:documentation>the maximum length of each string. each string is preceded by a one byte length indication. Default: 50</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stringsPerRecord" type="frankInt">
      <xs:annotation>
        <xs:documentation>the number of strings read for each record. 0 means file consists of one logical record Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="separatorReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>replacement character, used when separator is found in string read Default: _</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="InputStreamReaderFactoryType">
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.InputStreamReaderFactory" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:group name="RecordHandlerElementGroup">
    <xs:choice>
      <xs:element name="RecordHandler">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="InputFields" />
              <xs:element ref="OutputFields" />
              <xs:element ref="Param" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="recordHandler" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="RecordHandlerElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="RecordHandlerElementGroupBase">
    <xs:choice>
      <xs:element name="RecordTransformerRecordHandler">
        <xs:annotation>
          <xs:documentation>Translate a record using an outputFields description.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RecordTransformerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="recordHandler" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RecordXml2SenderRecordHandler">
        <xs:annotation>
          <xs:documentation>Translate a record into XML, then send it using a sender.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RecordXml2SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="recordHandler" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RecordXmlTransformerRecordHandler">
        <xs:annotation>
          <xs:documentation>Encapsulates a record in XML, optionally translates it using XSLT or XPath.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RecordXmlTransformerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="recordHandler" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="RecordTransformerType">
    <xs:group ref="RecordTransformerCumulativeChildGroup" />
    <xs:attributeGroup ref="RecordTransformerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.RecordTransformer" use="prohibited" />
  </xs:complexType>
  <xs:group name="RecordTransformerDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="OutputFields" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:group name="RecordTransformerCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="RecordTransformerDeclaredChildGroup" />
      <xs:group ref="AbstractRecordHandlerDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="RecordTransformerDeclaredAttributeGroup">
    <xs:attribute name="outputFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>semicolon separated list of output record field specifications (see table below)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>optional separator to add between the fields</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="RecordTransformerCumulativeAttributeGroup">
    <xs:attributeGroup ref="RecordTransformerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractRecordHandlerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="AbstractRecordHandlerDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="InputFields" minOccurs="0" maxOccurs="unbounded" />
      <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="AbstractRecordHandlerDeclaredAttributeGroup">
    <xs:attribute name="recordIdentifyingFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of numbers of those fields that are compared with the previous record to determine if a prefix must be written. if any of these fields is not equal in both records, the record types are assumed to be different</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the recordhandler</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated specification of field lengths. if neither this attribute nor &lt;code&gt;inputSeparator&lt;/code&gt; is specified then the entire record is parsed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>Separator that separates the fields in the input record. If neither this attribute nor &lt;code&gt;inputFields&lt;/code&gt; is specified then the entire record is parsed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trim" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, trailing spaces are removed from each field Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="RecordXml2SenderType">
    <xs:group ref="RecordXml2SenderCumulativeChildGroup" />
    <xs:attributeGroup ref="RecordXmlTransformerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.RecordXml2Sender" use="prohibited" />
  </xs:complexType>
  <xs:group name="RecordXml2SenderDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="RecordXml2SenderCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="RecordXml2SenderDeclaredChildGroup" />
      <xs:group ref="AbstractRecordHandlerDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:complexType name="RecordXmlTransformerType">
    <xs:group ref="AbstractRecordHandlerDeclaredChildGroup" />
    <xs:attributeGroup ref="RecordXmlTransformerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.RecordXmlTransformer" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="RecordXmlTransformerDeclaredAttributeGroup">
    <xs:attribute name="outputFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated string with tagnames for the individual input fields (related using there positions). if you leave a tagname empty, the field is not xml-ized</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>Root tag for the generated xml document that will be send to the Sender Default: record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of stylesheet to transform an individual record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. One entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Only valid for &lt;code&gt;xpathExpression&lt;/code&gt; Default: text</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endOfRecord" type="xs:string">
      <xs:annotation>
        <xs:documentation>String which ends the record and must be ignored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="RecordXmlTransformerCumulativeAttributeGroup">
    <xs:attributeGroup ref="RecordXmlTransformerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractRecordHandlerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="ResultHandlerElementGroup">
    <xs:choice>
      <xs:element name="ResultHandler">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="Param" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="resultHandler" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ResultHandlerElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ResultHandlerElementGroupBase">
    <xs:choice>
      <xs:element name="Result2BlobWriterResultHandler">
        <xs:annotation>
          <xs:documentation>ResultHandler that writes the transformed record to a BLOB.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Result2BlobWriterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="resultHandler" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Result2ClobWriterResultHandler">
        <xs:annotation>
          <xs:documentation>ResultHandler that writes the transformed record to a CLOB.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Result2ClobWriterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="resultHandler" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Result2FilewriterResultHandler">
        <xs:annotation>
          <xs:documentation>Resulthandler that writes the transformed record to a file.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Result2FilewriterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="resultHandler" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Result2StringWriterResultHandler">
        <xs:annotation>
          <xs:documentation>Resulthandler that writes the transformed record to a String, that is passed to the next Pipe literally.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Result2StringWriterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="resultHandler" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ResultBlock2SenderResultHandler">
        <xs:annotation>
          <xs:documentation>ResultHandler that collects a number of records and sends them together to a sender.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ResultBlock2SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="resultHandler" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="Result2BlobWriterType">
    <xs:group ref="AbstractResultHandlerDeclaredChildGroup" />
    <xs:attributeGroup ref="Result2BlobWriterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.Result2BlobWriter" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Result2BlobWriterDeclaredAttributeGroup">
    <xs:attribute name="blobColumn" type="frankInt">
      <xs:annotation>
        <xs:documentation>Column that contains the BLOB to be updated Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data. If blobCharset and blobSmartGet are not set, BLOBs are returned as bytes. Before version 7.6, blobs were base64 encoded after being read to accommodate for the fact that senders need to return a String. This is no longer the case</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Result2BlobWriterCumulativeAttributeGroup">
    <xs:attributeGroup ref="Result2BlobWriterDeclaredAttributeGroup" />
    <xs:attributeGroup ref="Result2LobWriterBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="AbstractResultHandlerDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Param" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="AbstractResultHandlerDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the resulthandler</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="default" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if set &lt;code&gt;true&lt;/code&gt;, this resulthandler is the default for all flows that do not have a handler specified Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockByRecordType" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;(default), every group of records, as indicated by RecordHandler.newRecordType is handled as a block. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:attributeGroup name="Result2LobWriterBaseDeclaredAttributeGroup">
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too Default: ${jdbc.datasource.default}</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>loads JNDI (and other) properties from a JmsRealm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Result2LobWriterBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="Result2LobWriterBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="ResultWriterCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="ResultWriterDeclaredAttributeGroup">
    <xs:attribute name="onOpenDocument" type="xs:string">
      <xs:annotation>
        <xs:documentation>string that is written before any data of results is written Default: &amp;lt;document name=&amp;quot;#name#&amp;quot;&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onCloseDocument" type="xs:string">
      <xs:annotation>
        <xs:documentation>string that is written after all data of results is written Default: &amp;lt;/document&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onOpenBlock" type="xs:string">
      <xs:annotation>
        <xs:documentation>string that is written before the start of each logical block, as defined in the flow Default: &amp;lt;#name#&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onCloseBlock" type="xs:string">
      <xs:annotation>
        <xs:documentation>string that is written after the end of each logical block, as defined in the flow Default: &amp;lt;/#name#&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockNamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>string that is replaced by name of block or name of stream in above strings Default: #name#</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ResultWriterCumulativeAttributeGroup">
    <xs:attributeGroup ref="ResultWriterDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractResultHandlerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Result2ClobWriterType">
    <xs:group ref="AbstractResultHandlerDeclaredChildGroup" />
    <xs:attributeGroup ref="Result2ClobWriterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.Result2ClobWriter" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Result2ClobWriterDeclaredAttributeGroup">
    <xs:attribute name="clobColumn" type="frankInt">
      <xs:annotation>
        <xs:documentation>Column that contains the CLOB to be updated Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Result2ClobWriterCumulativeAttributeGroup">
    <xs:attributeGroup ref="Result2ClobWriterDeclaredAttributeGroup" />
    <xs:attributeGroup ref="Result2LobWriterBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Result2FilewriterType">
    <xs:group ref="AbstractResultHandlerDeclaredChildGroup" />
    <xs:attributeGroup ref="Result2FilewriterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.Result2Filewriter" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Result2FilewriterDeclaredAttributeGroup">
    <xs:attribute name="outputDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory in which the resultfile must be stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="move2dirAfterFinalize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory to which the created file must be moved after finalization (is optional)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filenamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the file is created using the messageformat. Params: 1=inputfilename, 2=extension of file, 3=current date</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Result2FilewriterCumulativeAttributeGroup">
    <xs:attributeGroup ref="Result2FilewriterDeclaredAttributeGroup" />
    <xs:attributeGroup ref="ResultWriterCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Result2StringWriterType">
    <xs:group ref="AbstractResultHandlerDeclaredChildGroup" />
    <xs:attributeGroup ref="ResultWriterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.Result2StringWriter" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="ResultBlock2SenderType">
    <xs:group ref="ResultBlock2SenderCumulativeChildGroup" />
    <xs:attributeGroup ref="ResultWriterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.ResultBlock2Sender" use="prohibited" />
  </xs:complexType>
  <xs:group name="ResultBlock2SenderDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="ResultBlock2SenderCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="ResultBlock2SenderDeclaredChildGroup" />
      <xs:group ref="AbstractResultHandlerDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:group name="PipeElementGroupBase">
    <xs:choice>
      <xs:element name="Adios2XmlPipe">
        <xs:annotation>
          <xs:documentation>Transforms between ascii-ADIOS and an XML representation of ADIOS.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Adios2XmlPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ApiPrincipalPipe">
        <xs:annotation>
          <xs:documentation>Pipe to manage the ApiPrincipal handling</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiPrincipalPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ApiSoapWrapperPipe">
        <xs:annotation>
          <xs:documentation>Extension to SoapWrapperPipe for API Management.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiSoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ApiStreamPipe">
        <xs:annotation>
          <xs:documentation>Extension to StreamPipe for API Management.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiStreamPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ApiWsdlXmlValidatorPipe">
        <xs:annotation>
          <xs:documentation>Extension to WsdlXmlValidator for API Management.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiWsdlXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Base64Pipe">
        <xs:annotation>
          <xs:documentation>Pipe that performs base64 encoding and decoding.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Base64PipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BatchBlobTransformerPipe">
        <xs:annotation>
          <xs:documentation>Pipe that batch-transforms the lines in a BLOB.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BatchBlobTransformerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BatchClobTransformerPipe">
        <xs:annotation>
          <xs:documentation>Pipe that batch-transforms the lines in a CLOB.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BatchClobTransformerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BatchFileTransformerPipe">
        <xs:annotation>
          <xs:documentation>Pipe for transforming a (batch)file with records.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BatchFileTransformerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BlobLineIteratingPipe">
        <xs:annotation>
          <xs:documentation>Pipe that iterates over the lines in a BLOB.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BlobLineIteratingPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BytesOutputPipe">
        <xs:annotation>
          <xs:documentation>Output bytes as specified by the input XML.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BytesOutputPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ChecksumPipe">
        <xs:annotation>
          <xs:documentation>Pipe to calculate checksum on input.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ChecksumPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CleanupOldFilesPipe">
        <xs:annotation>
          <xs:documentation>Pipe for deleting files.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CleanupOldFilesPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ClobLineIteratingPipe">
        <xs:annotation>
          <xs:documentation>Pipe that iterates over the lines in a CLOB.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ClobLineIteratingPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CompareIntegerPipe">
        <xs:annotation>
          <xs:documentation>Pipe that compares the two integer values.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CompareIntegerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CompareStringPipe">
        <xs:annotation>
          <xs:documentation>Pipe that compares lexicographically two strings.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CompareStringPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CompressPipe">
        <xs:annotation>
          <xs:documentation>Pipe to zip or unzip a message or file.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CompressPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CounterSwitchPipe">
        <xs:annotation>
          <xs:documentation>Selects an exitState, based on the number of received messages by this pipe.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CounterSwitchPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CredentialCheckingPipe">
        <xs:annotation>
          <xs:documentation>Pipe to check the the CredentialFactory (for testing only).</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CredentialCheckingPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CrlPipe">
        <xs:annotation>
          <xs:documentation>Pipe that reads a CRL from an input stream and transforms it to an XML.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CrlPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CsvParserPipe">
        <xs:annotation>
          <xs:documentation>Reads a message in CSV format, and turns it into XML.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CsvParserPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DelayPipe">
        <xs:annotation>
          <xs:documentation>Pipe that sleeps for a specified time, which defaults to 5000 msecs.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DelayPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DirectWrapperPipe">
        <xs:annotation>
          <xs:documentation>Kind of extension to EsbSoapWrapperPipe for real time destinations.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DirectWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DomainTransformerPipe">
        <xs:annotation>
          <xs:documentation>Pipe that performs domain transforming on the basis of a database table.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DomainTransformerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EchoPipe">
        <xs:annotation>
          <xs:documentation>Returns simply the input message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EchoPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbSoapValidatorPipe">
        <xs:annotation>
          <xs:documentation>XmlValidator that will automatically add the SOAP envelope XSD and the ESB XSD (e.g.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbSoapValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbSoapWrapperPipe">
        <xs:annotation>
          <xs:documentation>Extension to SoapWrapperPipe for separate modes.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbSoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EscapePipe">
        <xs:annotation>
          <xs:documentation>Pipe that performs translations between special characters and their xml equivalents.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EscapePipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ExceptionPipe">
        <xs:annotation>
          <xs:documentation>Pipe that throws an exception, based on the input message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ExceptionPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedResultPipe">
        <xs:annotation>
          <xs:documentation>Provides an example of a pipe.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedResultPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ForEachAttachmentPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ForEachAttachmentPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ForEachChildElementPipe">
        <xs:annotation>
          <xs:documentation>Sends a message to a Sender for each child element of the input XML.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ForEachChildElementPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfWrapperPipe">
        <xs:annotation>
          <xs:documentation>FxF wrapper to be used with FxF3.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfXmlValidatorPipe">
        <xs:annotation>
          <xs:documentation>FxF XML validator to be used with FxF3.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetFromSessionPipe">
        <xs:annotation>
          <xs:documentation>Gets the contents of the pipeLineSession by a key specified by
 &lt;code&gt;sessionKey&lt;/code&gt;.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="GetFromSessionType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetPrincipalPipe">
        <xs:annotation>
          <xs:documentation>Returns the name of the user executing the request.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="GetPrincipalPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="HashPipe">
        <xs:annotation>
          <xs:documentation>Pipe that hashes the input message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="HashPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IfMultipartPipe">
        <xs:annotation>
          <xs:documentation>Selects an exitState, based on the content-type of a httpServletRequest
 object as input.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IfMultipartType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IncreaseIntegerPipe">
        <xs:annotation>
          <xs:documentation>Pipe that increases the integer value of a session variable.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IncreaseIntegerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IsUserInRolePipe">
        <xs:annotation>
          <xs:documentation>Pipe that checks if the calling user has a specified role.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IsUserInRolePipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IsXmlIfPipe">
        <xs:annotation>
          <xs:documentation>Selects an exitState, based on if the input is a XML string.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IsXmlIfPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Json2XmlValidatorPipe">
        <xs:annotation>
          <xs:documentation>&lt;code&gt;Pipe&lt;/code&gt; that validates the XML or JSON input message against a XML-Schema and returns either XML or JSON.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Json2XmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonPipe">
        <xs:annotation>
          <xs:documentation>JSON is not aware of the element order.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonWellFormedCheckerPipe">
        <xs:annotation>
          <xs:documentation>&lt;code&gt;Pipe&lt;/code&gt; that checks the well-formedness of the input message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonWellFormedCheckerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonXsltPipe">
        <xs:annotation>
          <xs:documentation>Perform an XSLT transformation with a specified stylesheet on a JSON input, yielding JSON, XML or text.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonXsltPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LabelFormatPipe">
        <xs:annotation>
          <xs:documentation>Transforms between ascii and an XML representation.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LabelFormatType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LadybugPipe">
        <xs:annotation>
          <xs:documentation>Call Ladybug Test Tool to rerun the reports present in test storage (see Test tab in Ladybug)</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LadybugPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LdapFindGroupMembershipsPipe">
        <xs:annotation>
          <xs:documentation>Pipe that returns the memberships of a userDN.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LdapFindGroupMembershipsPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LdapFindMemberPipe">
        <xs:annotation>
          <xs:documentation>Pipe that checks if a specified dn exists as 'member' in another specified dn
 in LDAP.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LdapFindMemberPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LocalFileSystemPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LocalFileSystemPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MailSenderPipe">
        <xs:annotation>
          <xs:documentation>Pipe that sends a mail-message using a MailSender as its sender.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MailSenderPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PGPPipe">
        <xs:annotation>
          <xs:documentation>&lt;p&gt;Performs various PGP (Pretty Good Privacy) actions such as Encrypt, Sign, Decrypt, Verify.&lt;/p&gt;
 &lt;p&gt;To use this pipe action parameter has to be set to one of the actions above.&lt;/p&gt;
 &lt;p&gt;
 &lt;br/&gt;&lt;strong&gt;Encrypt:&lt;/strong&gt;
 &lt;p&gt;
 Requires the publicKey to be set to recipients public key,
 and recipients to be set to recipients email addresses.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PGPPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PasswordGeneratorPipe">
        <xs:annotation>
          <xs:documentation>Returns random password.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PasswordGeneratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PasswordHashPipe">
        <xs:annotation>
          <xs:documentation>Hash a password or validate a password against a hash using PasswordHash.java
 from &lt;a href="https://crackstation.net/hashing-security.htm"&gt;https://crackstation.net/hashing-security.htm&lt;/a&gt;.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PasswordHashPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PutInSessionPipe">
        <xs:annotation>
          <xs:documentation>Puts the input or the &lt;code&gt;value&lt;/code&gt; in the PipeLineSession, under the key specified by
 &lt;code&gt;sessionKey&lt;/code&gt;.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PutInSessionType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PutSystemDateInSessionPipe">
        <xs:annotation>
          <xs:documentation>Puts the system date/time under a key in the pipeLineSession.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PutSystemDateInSessionType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RekenBoxCallerPipe">
        <xs:annotation>
          <xs:documentation>Perform a call to a RekenBox.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RekenBoxCallerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RemoveCacheKeyPipe">
        <xs:annotation>
          <xs:documentation>Remove specified cache key from cache with specified name.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RemoveCacheKeyPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RemoveFromSessionPipe">
        <xs:annotation>
          <xs:documentation>Removes a key specified by &lt;code&gt;sessionKey&lt;/code&gt;
 from the pipeLineSession.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RemoveFromSessionType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ReplacerPipe">
        <xs:annotation>
          <xs:documentation>Replaces all occurrences of one string with another.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ReplacerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ResultSetIteratingPipe">
        <xs:annotation>
          <xs:documentation>Pipe that iterates over rows in in ResultSet.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ResultSetIteratingPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba1Pipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba1PipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba2Pipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba2PipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SambaPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SambaPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ScanTibcoSolutionPipe">
        <xs:annotation>
          <xs:documentation>Pipe which scans TIBCO sources in Subversion and creates a report in xml.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ScanTibcoSolutionPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SenderPipe">
        <xs:annotation>
          <xs:documentation>Plain extension to MessageSendingPipe that can be used directly in configurations.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SenderPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SignaturePipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SignaturePipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SizePipe">
        <xs:annotation>
          <xs:documentation>Returns the number of bytes or characters in the input.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SizePipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SkipPipe">
        <xs:annotation>
          <xs:documentation>Skip a number of bytes or characters from the input.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SkipPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapValidatorPipe">
        <xs:annotation>
          <xs:documentation>XmlValidator that will automatically add the SOAP envelope XSD to the set of XSD's used for validation.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapWrapperPipe">
        <xs:annotation>
          <xs:documentation>Pipe to wrap or unwrap a message from/into a SOAP Envelope.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="StreamLineIteratorPipe">
        <xs:annotation>
          <xs:documentation>Sends a message to a Sender for each line of its input, that must be an InputStream.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="StreamLineIteratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="StreamPipe">
        <xs:annotation>
          <xs:documentation>Stream an input stream to an output stream.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="StreamPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="StreamTransformerPipe">
        <xs:annotation>
          <xs:documentation>Pipe for transforming a stream with records.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="StreamTransformerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="StringIteratorPipe">
        <xs:annotation>
          <xs:documentation>IteratingPipe that has Strings as items.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="StringIteratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Text2XmlPipe">
        <xs:annotation>
          <xs:documentation>Pipe for converting text to or from xml.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Text2XmlPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="TextSplitterPipe">
        <xs:annotation>
          <xs:documentation>Breaks up the text input in blocks of a maximum length.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="TextSplitterPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="UUIDGeneratorPipe">
        <xs:annotation>
          <xs:documentation>Pipe that generates an UUID (Universally Unique Identifier).</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="UUIDGeneratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="UnzipPipe">
        <xs:annotation>
          <xs:documentation>Assumes input to be the file name of a ZIP archive, and unzips it to a
 directory and/or an XML message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="UnzipPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WsdlGeneratorPipe">
        <xs:annotation>
          <xs:documentation>Generate WSDL of parent or specified adapter.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WsdlGeneratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WsdlXmlValidatorPipe">
        <xs:annotation>
          <xs:documentation>XmlValidator that will read the XSD's to use from a WSDL.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WsdlXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XQueryPipe">
        <xs:annotation>
          <xs:documentation>Perform an XQuery.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XQueryPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlBuilderPipe">
        <xs:annotation>
          <xs:documentation>Pipe for converting special characters to their xml equivalents.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlBuilderPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlIfPipe">
        <xs:annotation>
          <xs:documentation>Selects an exitState, based on xpath evaluation</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlIfType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlSwitchPipe">
        <xs:annotation>
          <xs:documentation>Selects an exitState, based on either the content of the input message, by means
 of a XSLT-stylesheet, the content of a session variable or, by default, by returning the name of the root-element.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlSwitchType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlValidatorPipe">
        <xs:annotation>
          <xs:documentation>&lt;code&gt;Pipe&lt;/code&gt; that validates the input message against a XML-Schema.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlWellFormedCheckerPipe">
        <xs:annotation>
          <xs:documentation>&lt;code&gt;Pipe&lt;/code&gt; that checks the well-formedness of the input message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlWellFormedCheckerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XsltPipe">
        <xs:annotation>
          <xs:documentation>Perform an XSLT transformation with a specified stylesheet.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XsltPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ZipIteratorPipe">
        <xs:annotation>
          <xs:documentation>Sends a message to a Sender for each entry of its input, that must be an ZipInputStream.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ZipIteratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ZipWriterPipe">
        <xs:annotation>
          <xs:documentation>Pipe that creates a ZipStream.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ZipWriterPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="Adios2XmlPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="Adios2XmlPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.rekenbox.Adios2XmlPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Adios2XmlPipeDeclaredAttributeGroup">
    <xs:attribute name="adiosDefinities" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets URL to the pascal file with label-constants generated by the ADIOS-utility. Default: nnrscons.pas</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction">
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType_3 variableRef">
          <xs:annotation>
            <xs:documentation>Transformation direction. Default: Adios2Xml</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="rekenbox" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets name of the rekenbox to be called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rekenboxSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the SessionKey to retrieve the rekenbox name from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noConversionForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the forward used when no conversion to XML was performed, because the input was already XML. Default: noconversion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="DirectionAttributeValuesType_3">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Xml2Adios">
        <xs:annotation>
          <xs:documentation>Transform an Adios-XML file to ASCII-Adios</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Adios2Xml">
        <xs:annotation>
          <xs:documentation>Transform an ASCII-Adios file to Adios-XML</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="Adios2XmlPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="Adios2XmlPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ApiPrincipalPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="ApiPrincipalPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.http.rest.ApiPrincipalPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ApiPrincipalPipeDeclaredAttributeGroup">
    <xs:attribute name="action" type="xs:string" />
    <xs:attribute name="authenticationMethod" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="ApiPrincipalPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ApiPrincipalPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ApiStreamPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="ApiStreamPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.api.ApiStreamPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ApiStreamPipeDeclaredAttributeGroup">
    <xs:attribute name="jmsRealm" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="ApiStreamPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ApiStreamPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="StreamPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="StreamPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.StreamPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="StreamPipeDeclaredAttributeGroup">
    <xs:attribute name="extractFirstStringPart" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt;) when true the first part is not put in a session key but returned to the pipeline (as the result of this pipe) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;extractfirststringpart=true&lt;/code&gt;) the session key to put the xml in with info about the stored parts Default: &lt;code&gt;multipartxml&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkAntiVirus" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt;) when true parts are checked for antivirus scan returncode. these antivirus scan parts have been added by another application (so the antivirus scan is not performed in this pipe). for each file part an antivirus scan part have been added by this other application (directly after this file part) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusPartName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) name of antivirus scan status parts Default: &lt;code&gt;antivirus_rc&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusMessagePartName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) name of antivirus scan message parts Default: &lt;code&gt;antivirus_msg&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusPassedMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) message of antivirus scan parts which indicates the antivirus scan passed Default: &lt;code&gt;pass&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusFailureAsSoapFault" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) when true and the antivirusfailed forward is specified and the antivirus scan did not pass, a soap fault is returned instead of only a plain error message Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusFailureReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) if not empty and the antivirusfailed forward is specified and the antivirus scan did not pass, the error message (or soap fault) is stored in this session key and the first string part is returned to the pipeline</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="StreamPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="StreamPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Base64PipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="Base64PipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.Base64Pipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Base64PipeDeclaredAttributeGroup">
    <xs:attribute name="direction">
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Default: ENCODE</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Character encoding to be used to when reading input from strings for direction=encode or writing data for direction=decode.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when direction=encode) Defines separator between lines. Special values: &lt;code&gt;auto&lt;/code&gt;: platform default, &lt;code&gt;dos&lt;/code&gt;: crlf, &lt;code&gt;unix&lt;/code&gt;: lf Default: auto</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineLength" type="frankInt">
      <xs:annotation>
        <xs:documentation>(Only used when direction=encode) Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). If linelength &amp;lt;= 0, then the output will not be divided into lines Default: 76</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Base64PipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="Base64PipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="StreamingPipeDeclaredAttributeGroup">
    <xs:attribute name="streamingActive" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, then this pipe can provide an OutputStream to the previous pipe, to write its output to. Can be used to switch this streaming off for debugging purposes Default: set by appconstant streaming.auto</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="StreamingPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="StreamingPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="BatchBlobTransformerPipeType">
    <xs:group ref="StreamTransformerPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="BatchBlobTransformerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.BatchBlobTransformerPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="BatchBlobTransformerPipeDeclaredAttributeGroup">
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="BatchBlobTransformerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="BatchBlobTransformerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="BatchTransformerPipeBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="StreamTransformerPipeType">
    <xs:group ref="StreamTransformerPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="StreamTransformerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.StreamTransformerPipe" use="prohibited" />
  </xs:complexType>
  <xs:group name="StreamTransformerPipeDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ManagerElementGroup" minOccurs="1" maxOccurs="unbounded" />
      <xs:group ref="RecordHandlerElementGroup" minOccurs="0" maxOccurs="unbounded" />
      <xs:group ref="ResultHandlerElementGroup" minOccurs="0" maxOccurs="unbounded" />
      <xs:group ref="ReaderFactoryElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="StreamTransformerPipeCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="StreamTransformerPipeDeclaredChildGroup" />
      <xs:group ref="AbstractPipeDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="StreamTransformerPipeDeclaredAttributeGroup">
    <xs:attribute name="storeOriginalBlock" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; the original block is stored under the session key &lt;code&gt;originalBlock&lt;/code&gt;. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file or inputstream" Default: UTF-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="StreamTransformerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="StreamTransformerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="BatchTransformerPipeBaseDeclaredAttributeGroup">
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text to be excecuted each time sendMessage() is called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too Default: ${jdbc.datasource.default}</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>loads JNDI (and other) properties from a JmsRealm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="BatchTransformerPipeBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="BatchTransformerPipeBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamTransformerPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="BatchClobTransformerPipeType">
    <xs:group ref="StreamTransformerPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="BatchTransformerPipeBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.BatchClobTransformerPipe" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="BatchFileTransformerPipeType">
    <xs:group ref="StreamTransformerPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="BatchFileTransformerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.batch.BatchFileTransformerPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="BatchFileTransformerPipeDeclaredAttributeGroup">
    <xs:attribute name="move2dirAfterTransform" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory in which the transformed file(s) is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="move2dirAfterError" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory to which the inputfile is moved in case an error occurs</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="frankInt">
      <xs:annotation>
        <xs:documentation>Number of copies held of a file with the same name. Backup files have a dot and a number suffixed to their name. If set to 0, no backups will be kept. Default: 5</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the destination file will be deleted if it already exists Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delete" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the file processed will deleted after being processed, and not stored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="BatchFileTransformerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="BatchFileTransformerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamTransformerPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="BlobLineIteratingPipeType">
    <xs:group ref="IteratingPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="BlobLineIteratingPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.BlobLineIteratingPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="BlobLineIteratingPipeDeclaredAttributeGroup">
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset used to read and write blobs Default: utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="BlobLineIteratingPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="BlobLineIteratingPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcIteratingPipeBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="IteratingPipeDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="1" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="IteratingPipeCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="IteratingPipeDeclaredChildGroup" />
      <xs:group ref="MessageSendingPipeCumulativeChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="IteratingPipeDeclaredAttributeGroup">
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>only valid for xpathexpression Default: text</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemNoSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxItems" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned. Special forward maxItemsReached can be configured to follow Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopConditionXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Expression evaluated on each result and forwards to [stopConditionMet] forward if configured. Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used. This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreExceptions" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned. Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeXmlDeclarationInResults" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addInputToResult" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeDuplicates" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parallel" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxChildThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe). Use &lt;code&gt;0&lt;/code&gt; for unlimited threads Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. When set to a value greater than 0, it specifies the number of rows send, in a one block, to the sender. Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IteratingPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="IteratingPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="MessageSendingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MessageSendingPipeType">
    <xs:group ref="MessageSendingPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="MessageSendingPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.MessageSendingPipe" use="prohibited" />
  </xs:complexType>
  <xs:group name="MessageSendingPipeDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="MessageLogElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="InputValidatorElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="OutputValidatorElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="InputWrapperElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="OutputWrapperElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="MessageSendingPipeCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="MessageSendingPipeDeclaredChildGroup" />
      <xs:group ref="AbstractPipeDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="MessageSendingPipeDeclaredAttributeGroup">
    <xs:attribute name="linkMethod">
      <xs:simpleType>
        <xs:union memberTypes="LinkMethodAttributeValuesType_2 variableRef">
          <xs:annotation>
            <xs:documentation>For asynchronous communication, the server side may either use the messageID or the correlationID in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. Default: CORRELATIONID</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for correlationidxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. is specified, the value of the pipelinesession variable is used as input for the xpathexpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for labelxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for audittrailxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of a pipelinesession-variable. if specified, the value of the pipelinesession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>next to common usage in AbstractPipe, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when hideregex is not empty and only applies to error/logstore) either &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;firsthalf&lt;/code&gt;. when &lt;code&gt;firsthalf&lt;/code&gt; only the first half of the string is masked, otherwise (&lt;code&gt;all&lt;/code&gt;) the entire string is masked Default: all</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the xml well-formedness of the result is checked Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, besides the xml well-formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>result returned when no return-message was received within the timeout limit (e.g. 'receiver timed out').</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="frankInt">
      <xs:annotation>
        <xs:documentation>the number of times a processing attempt is retried after a timeout or an exception is caught or after a incorrect reply is received (see also &lt;code&gt;retryxpath&lt;/code&gt;) Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="frankInt">
      <xs:annotation>
        <xs:documentation>the starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. each next retry this interval is doubled with a upper limit of &lt;code&gt;retrymaxinterval&lt;/code&gt; Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="frankInt">
      <xs:annotation>
        <xs:documentation>the maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made Default: 600</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression evaluated on each technical successful reply. retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for retryxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="frankInt">
      <xs:annotation>
        <xs:documentation>when the previous call was a timeout, the maximum time &lt;i&gt;in seconds&lt;/i&gt; after this timeout to presume the current call is also a timeout. a value of -1 indicates to never presume timeouts Default: 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFilename" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a timeoutexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>when not empty, a piperunexception is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="LinkMethodAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:enumeration value="MESSAGEID" />
      <xs:enumeration value="CORRELATIONID" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="MessageSendingPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="MessageSendingPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamingPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum number of threads that may call session) simultaneously, use 0 to disable limit Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored Default: ref_ + the name of the element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="frankInt">
      <xs:annotation>
        <xs:documentation>If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory to be analyzed Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="frankBoolean" />
    <xs:attribute name="restoreMovedElements" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  #setElementToMove(java.lang.String))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of possible xml parsing in descender-classes Default: application default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sizeStatistics" type="frankBoolean" />
    <xs:attribute name="writeToSecLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt; a record is written to the security log when the pipe has finished successfully</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;writeToSecLog=true&lt;/code&gt;) comma separated list of keys of session variables that is appended to the security log record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value in AppConstants is overwritten (for this pipe only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcIteratingPipeBaseDeclaredAttributeGroup">
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text to be excecuted each time sendMessage() is called. When not set, the input message is taken as the query</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too Default: ${jdbc.datasource.default}</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Named parameters will be auto detected by default. Every string in the query which equals &lt;code&gt;?{paramname}&lt;/code&gt; will be replaced by the value of the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped. Default: null</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trimSpaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockRows" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="frankInt">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcIteratingPipeBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcIteratingPipeBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StringIteratorPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="StringIteratorPipeType">
    <xs:group ref="IteratingPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="StringIteratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.StringIteratorPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="StringIteratorPipeDeclaredAttributeGroup">
    <xs:attribute name="blockSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. If set to a value greater than 0, it specifies the number of rows send in a block to the sender. Default: 0 (one line at a time, no prefix of suffix)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startPosition" type="frankInt">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;startPosition &amp;gt;= 0&lt;/code&gt;, this field contains the start position of the key in the current record (first character is 0); A sequence of lines with the same key is put in one block and send to the sender. Cannot be used in combination with blockSize. Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endPosition" type="frankInt">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;endPosition &amp;gt;= startPosition&lt;/code&gt;, this field contains the end position of the key in the current record Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="combineBlocks" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, all items in a block are sent at once. If set false, items are sent individually, potentially leveraging block enabled sending capabilities of the sender Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;combineBlocks = true&lt;/code&gt;, this string is inserted at the start of each block. Requires &lt;code&gt;blockSize&lt;/code&gt; or &lt;code&gt;startPosition&lt;/code&gt; and &lt;code&gt;endPosition&lt;/code&gt; to be set too. Default: &amp;lt;block&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;combineBlocks = true&lt;/code&gt;, this string is inserted at the end of the set of lines. Requires &lt;code&gt;blockSize&lt;/code&gt; or &lt;code&gt;startPosition&lt;/code&gt; and &lt;code&gt;endPosition&lt;/code&gt; to be set too. Default: &amp;lt;/block&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linePrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>This string is inserted at the start of each item</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>This string is appended at the end of each item</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="escapeXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Escape XML characters in each item Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="StringIteratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="StringIteratorPipeDeclaredAttributeGroup" />
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>only valid for xpathexpression Default: text</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemNoSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxItems" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned. Special forward maxItemsReached can be configured to follow Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopConditionXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Expression evaluated on each result and forwards to [stopConditionMet] forward if configured. Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used. This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreExceptions" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned. Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeXmlDeclarationInResults" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addInputToResult" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeDuplicates" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parallel" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxChildThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe). Use &lt;code&gt;0&lt;/code&gt; for unlimited threads Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="MessageSendingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="BytesOutputPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.BytesOutputPipe" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="ChecksumPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="ChecksumPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.ChecksumPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ChecksumPipeDeclaredAttributeGroup">
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Character encoding to be used to encode message before calculating checksum.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type">
      <xs:simpleType>
        <xs:union memberTypes="ChecksumTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Type of checksum to be calculated Default: MD5</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="ChecksumTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="MD5" />
      <xs:enumeration value="SHA" />
      <xs:enumeration value="CRC32" />
      <xs:enumeration value="ADLER32" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="ChecksumPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ChecksumPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CleanupOldFilesPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="CleanupOldFilesPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.CleanupOldFilesPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="CleanupOldFilesPipeDeclaredAttributeGroup">
    <xs:attribute name="filePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>files that match this pattern will be deleted. parameters of the pipe are applied to this pattern. if this attribute is not set, the input of the pipe is interpreted as the file to be removed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filePatternSessionKey" type="xs:string" />
    <xs:attribute name="lastModifiedDelta" type="frankInt">
      <xs:annotation>
        <xs:documentation>time in milliseconds after last modification that must have passed at least before a file will be deleted (set to negative value to disable) Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subdirectories" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, files  in subdirectories will be deleted, too Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteEmptySubdirectories" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, empty subdirectories will be deleted, too Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>filter of files to delete. if not set and a directory is specified, all files in the directory are interpreted to be deleted</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeWildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>filter of files to be excluded for deletion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minStableTime" type="frankInt">
      <xs:annotation>
        <xs:documentation>Minimal age of file &lt;i&gt;in milliseconds&lt;/i&gt;, to avoid deleting a file while it is still being written (only used when wildcard is set) (set to 0 to disable) Default: 1000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CleanupOldFilesPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CleanupOldFilesPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ClobLineIteratingPipeType">
    <xs:group ref="IteratingPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="JdbcIteratingPipeBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.ClobLineIteratingPipe" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="CompareIntegerPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="CompareIntegerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.CompareIntegerPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="CompareIntegerPipeDeclaredAttributeGroup" />
  <xs:attributeGroup name="CompareIntegerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CompareStringPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="CompareStringPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.CompareStringPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="CompareStringPipeDeclaredAttributeGroup">
    <xs:attribute name="xml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; the string values to compare are considered to be xml strings and before the actual compare both xml strings are transformed to a canonical form Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CompareStringPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CompareStringPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CompressPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="CompressPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.CompressPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="CompressPipeDeclaredAttributeGroup">
    <xs:attribute name="compress" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if &lt;code&gt;true&lt;/code&gt; the pipe compresses, otherwise it decompress Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filenamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>required if result is a file, the pattern for the result filename</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIsContent" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>flag indicates whether the message is the content or the path to a file with the contents. for multiple files use ';' as delimiter Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>required if result is a file, the directory in which to store the result file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultIsContent" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>flag indicates whether the result must be written to the message or to a file (filename = message) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="zipEntryPattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>the pattern for the zipentry name in case a zipfile is read or written</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileFormat">
      <xs:simpleType>
        <xs:union memberTypes="FileFormatAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="FileFormatAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="GZ">
        <xs:annotation>
          <xs:documentation>Gzip format; also used when direction is compress and resultIsContent=&lt;code&gt;true&lt;/code&gt; 
 or when direction is decompress and messageIsContent=&lt;code&gt;true&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ZIP">
        <xs:annotation>
          <xs:documentation>Zip format; also used when direction is compress and resultIsContent=&lt;code&gt;false&lt;/code&gt; 
 or when direction is decompress and messageIsContent=&lt;code&gt;false&lt;/code&gt;</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="CompressPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CompressPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CounterSwitchPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="CounterSwitchPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.CounterSwitchPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="CounterSwitchPipeDeclaredAttributeGroup">
    <xs:attribute name="divisor" type="frankInt">
      <xs:annotation>
        <xs:documentation>Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CounterSwitchPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CounterSwitchPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CredentialCheckingPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="CredentialCheckingPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.CredentialCheckingPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="CredentialCheckingPipeDeclaredAttributeGroup">
    <xs:attribute name="authAlias" type="xs:string" />
    <xs:attribute name="targetPassword" type="xs:string" />
    <xs:attribute name="targetUserid" type="xs:string" />
    <xs:attribute name="defaultPassword" type="xs:string" />
    <xs:attribute name="defaultUserid" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="CredentialCheckingPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CredentialCheckingPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CrlPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="CrlPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.CrlPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="CrlPipeDeclaredAttributeGroup">
    <xs:attribute name="issuerSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the sessionkey that holds a stream to the certificate of the issuer who signed the crl. the steam is closed after reading</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CrlPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CrlPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CsvParserPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="CsvParserPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.CsvParserPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="CsvParserPipeDeclaredAttributeGroup">
    <xs:attribute name="fileContainsHeader" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Specifies if the first line should be treated as header or as data Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fieldNames" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of header names. If set, then &lt;code&gt;fileContainsHeader&lt;/code&gt; defaults to false. If not set, headers are taken from the first line</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fieldSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>Character that separates fields Default: ,</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerCase">
      <xs:simpleType>
        <xs:union memberTypes="HeaderCaseAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>When set, character casing will be changed for the header</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="HeaderCaseAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="LOWERCASE" />
      <xs:enumeration value="UPPERCASE" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="CsvParserPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CsvParserPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="DelayPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="DelayPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.DelayPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="DelayPipeDeclaredAttributeGroup">
    <xs:attribute name="delayTime" type="frankInt">
      <xs:annotation>
        <xs:documentation>The time &lt;i&gt;in milliseconds&lt;/i&gt; the thread will be put to sleep Default: 5000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="DelayPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="DelayPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="DirectWrapperPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="TimeoutGuardPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.esb.DirectWrapperPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="TimeoutGuardPipeDeclaredAttributeGroup">
    <xs:attribute name="throwException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, a piperunexception is thrown. otherwise the output is only logged as an error (and returned in a xml string with 'error' tags) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>timeout in seconds of obtaining a result Default: 30</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="TimeoutGuardPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="TimeoutGuardPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="DomainTransformerPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="DomainTransformerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.DomainTransformerPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="DomainTransformerPipeDeclaredAttributeGroup">
    <xs:attribute name="jmsRealm" type="xs:string" />
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the table that contains the mapping Default: mapping</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column labels are stored in Default: label</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueInField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column source values are stored in Default: valuein</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueOutField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column destination values are stored in Default: valueout</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="DomainTransformerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="DomainTransformerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="EchoPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="StreamingPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.EchoPipe" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="EscapePipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="EscapePipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.EscapePipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="EscapePipeDeclaredAttributeGroup">
    <xs:attribute name="substringStart" type="xs:string">
      <xs:annotation>
        <xs:documentation>substring to start translation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="substringEnd" type="xs:string">
      <xs:annotation>
        <xs:documentation>substring to end translation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;encode&lt;/code&gt;, &lt;code&gt;decode&lt;/code&gt; or &lt;code&gt;cdata2text&lt;/code&gt; Default: encode</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodeSubstring" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; special characters in &lt;code&gt;substringstart&lt;/code&gt; and &lt;code&gt;substringend&lt;/code&gt; are first translated to their xml equivalents Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="EscapePipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="EscapePipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ExceptionPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="ExceptionPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.ExceptionPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ExceptionPipeDeclaredAttributeGroup">
    <xs:attribute name="throwException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, a piperunexception is thrown. otherwise the output is only logged as an error (and no rollback is performed). Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ExceptionPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ExceptionPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FixedResultPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="FixedResultPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.FixedResultPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="FixedResultPipeDeclaredAttributeGroup">
    <xs:attribute name="substituteVars" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>should values between ${ and } be resolved from the pipelinesession (search order: 1) system properties 2) pipelinesession variables 3) application properties) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file containing the resultmessage</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filenameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the session key containing the file name of the file containing the result message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnString" type="xs:string">
      <xs:annotation>
        <xs:documentation>returned message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceFrom" type="xs:string" />
    <xs:attribute name="replaceTo" type="xs:string" />
    <xs:attribute name="styleSheetName" type="xs:string" />
    <xs:attribute name="lookupAtRuntime" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, the lookup of the file will be done at runtime instead of at configuration time Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceFixedParams" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, any parameter is used for replacements but with &lt;code&gt;name-of-parameter&lt;/code&gt; and not &lt;code&gt;${name-of-parameter}&lt;/code&gt; Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FixedResultPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="FixedResultPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ForEachAttachmentPipeType">
    <xs:group ref="IteratingPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="ForEachAttachmentPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.filesystem.ForEachAttachmentPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ForEachAttachmentPipeDeclaredAttributeGroup">
    <xs:attribute name="onlyProperties" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of attachment properties to list</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeProperties" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of attachment properties not to list. When specified, 'onlyProperties' is ignored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ForEachAttachmentPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ForEachAttachmentPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="IteratingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ForEachChildElementPipeType">
    <xs:group ref="IteratingPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="ForEachChildElementPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.ForEachChildElementPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ForEachChildElementPipeDeclaredAttributeGroup">
    <xs:attribute name="containerElement" type="xs:string">
      <xs:annotation>
        <xs:documentation>Element name (not an XPath-expression), qualified via attribute &lt;code&gt;namespaceDefs&lt;/code&gt;, used to determine the 'root' of elements to be iterated over, i.e. the root of the set of child elements. When empty, the pipe will iterate over each direct child element of the root</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetElement" type="xs:string">
      <xs:annotation>
        <xs:documentation>Element name (not an XPath-expression), qualified via attribute &lt;code&gt;namespaceDefs&lt;/code&gt;, used to determine the type of elements to be iterated over, i.e. the element name of each of the child elements. When empty, the pipe will iterate over any direct child element of the root or specified containerElement</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath-expression used to determine the set of elements to be iterated over, i.e. the set of child elements. When empty, the effective value is /*/*, i.e. the pipe will iterate over each direct child element of the root. Be aware that memory consumption appears to increase with file size when this attribute is used. When possible, use containerElement and/or targetElement instead.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;2&lt;/code&gt; a XSLT processor 2.0 (net.sf.saxon) will be used, supporting XPath 2.0, otherwise a XSLT processor 1.0 (org.apache.xalan), supporting XPath 1.0. N.B. Be aware that setting this other than 1 might cause the input file being read as a whole in to memory, as XSLT Streaming is currently only supported by the XSLT Processor that is used for xsltVersion=1 Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) are removed from the items just before forwarding them to the sender. N.B. This takes place &lt;strong&gt;after&lt;/strong&gt; the transformation for &lt;code&gt;elementXPathExpression&lt;/code&gt; if that is specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ForEachChildElementPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ForEachChildElementPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StringIteratorPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="GetFromSessionType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="GetFromSessionCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.GetFromSession" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="GetFromSessionDeclaredAttributeGroup">
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of the session variable to retrieve the output message from. When left unspecified, the input message is used as the key of the session variable</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type">
      <xs:simpleType>
        <xs:union memberTypes="ParameterTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>&lt;ul&gt;&lt;li&gt;&lt;code&gt;string&lt;/code&gt;: renders the contents&lt;/li&gt;&lt;li&gt;&lt;code&gt;map&lt;/code&gt;: converts a Map&amp;lt;String, String&amp;gt; object to a xml-string (&amp;lt;items&amp;gt;&amp;lt;item name='...'&amp;gt;...&amp;lt;/item&amp;gt;&amp;lt;item name='...'&amp;gt;...&amp;lt;/item&amp;gt;&amp;lt;/items&amp;gt;)&lt;/li&gt;&lt;/ul&gt; Default: string</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="GetFromSessionCumulativeAttributeGroup">
    <xs:attributeGroup ref="GetFromSessionDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="GetPrincipalPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.GetPrincipalPipe" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="HashPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="HashPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.HashPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="HashPipeDeclaredAttributeGroup">
    <xs:attribute name="algorithm">
      <xs:simpleType>
        <xs:union memberTypes="HashAlgorithmAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Hash Algorithm to use Default: HmacSHA256</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Character set to use for converting the secret from String to bytes Default: UTF-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hashEncoding">
      <xs:simpleType>
        <xs:union memberTypes="HashEncodingAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Method to use for converting the hash from bytes to String Default: Base64</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="secret" type="xs:string">
      <xs:annotation>
        <xs:documentation>The secret to hash with. Only used if no parameter secret is configured. The secret is only used when there is no authAlias specified, by attribute or parameter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authAlias to retrieve the secret from (password field). Only used if no parameter authAlias is configured</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="HashAlgorithmAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="HmacMD5" />
      <xs:enumeration value="HmacSHA1" />
      <xs:enumeration value="HmacSHA256" />
      <xs:enumeration value="HmacSHA384" />
      <xs:enumeration value="HmacSHA512" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="HashEncodingAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Base64" />
      <xs:enumeration value="Hex" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="HashPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="HashPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IfMultipartType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="IfMultipartCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.IfMultipart" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="IfMultipartDeclaredAttributeGroup">
    <xs:attribute name="thenForwardName" type="xs:string" />
    <xs:attribute name="elseForwardName" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="IfMultipartCumulativeAttributeGroup">
    <xs:attributeGroup ref="IfMultipartDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IncreaseIntegerPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="IncreaseIntegerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.IncreaseIntegerPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="IncreaseIntegerPipeDeclaredAttributeGroup">
    <xs:attribute name="sessionKey" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Reference to the session variable whose value is to be increased</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="increment" type="frankInt">
      <xs:annotation>
        <xs:documentation>amount to increment the value. Can be set from the attribute or the parameter 'increment' Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IncreaseIntegerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="IncreaseIntegerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IsUserInRolePipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="IsUserInRolePipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.IsUserInRolePipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="IsUserInRolePipeDeclaredAttributeGroup">
    <xs:attribute name="role" type="xs:string">
      <xs:annotation>
        <xs:documentation>the j2ee role to check.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IsUserInRolePipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="IsUserInRolePipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IsXmlIfPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="IsXmlIfPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.IsXmlIfPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="IsXmlIfPipeDeclaredAttributeGroup">
    <xs:attribute name="thenForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when &lt;code&gt;'true'&lt;/code&gt; Default: then</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elseForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when 'false' Default: else</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elseForwardOnEmptyInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>return elseforward when input is empty (or thenforward) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IsXmlIfPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="IsXmlIfPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JsonPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="JsonPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.JsonPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JsonPipeDeclaredAttributeGroup">
    <xs:attribute name="direction">
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType_4 variableRef">
          <xs:annotation>
            <xs:documentation>Direction of the transformation. Default: JSON2XML</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="version" type="xs:string">
      <xs:annotation>
        <xs:documentation>Version of the JsonPipe. Either 1 or 2. Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addXmlRootElement" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When true, and direction is json2xml, it wraps a root element around the converted message Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="DirectionAttributeValuesType_4">
    <xs:restriction base="xs:string">
      <xs:enumeration value="JSON2XML" />
      <xs:enumeration value="XML2JSON" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="JsonPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="JsonPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JsonWellFormedCheckerType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.JsonWellFormedChecker" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="JsonXsltPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="JsonXsltPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.JsonXsltPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JsonXsltPipeDeclaredAttributeGroup">
    <xs:attribute name="jsonResult" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the xml result of the transformation is converted back to json Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions Default: j=http://www.w3.org/2013/XSL/json</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JsonXsltPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="JsonXsltPipeDeclaredAttributeGroup" />
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey Default: 100</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>omit the xml declaration on top of the output. When not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableOutputEscaping" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, any output is reparsed before being handled as XML again. When not set, the stylesheet is searched for &lt;code&gt;@disable-output-escaping='yes'&lt;/code&gt; and the value is set accordingly Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>For xpathExpression only Default: text</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="indentXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. When not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipEmptyTags" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="StreamingPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum number of threads that may call session) simultaneously, use 0 to disable limit Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored Default: ref_ + the name of the element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="frankInt">
      <xs:annotation>
        <xs:documentation>If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory to be analyzed Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="frankBoolean" />
    <xs:attribute name="restoreMovedElements" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  #setElementToMove(java.lang.String))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sizeStatistics" type="frankBoolean" />
    <xs:attribute name="writeToSecLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt; a record is written to the security log when the pipe has finished successfully</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;writeToSecLog=true&lt;/code&gt;) comma separated list of keys of session variables that is appended to the security log record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value in AppConstants is overwritten (for this pipe only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt;
 will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level,
 so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XsltPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="XsltPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.XsltPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="XsltPipeDeclaredAttributeGroup">
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey Default: 100</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>omit the xml declaration on top of the output. When not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableOutputEscaping" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, any output is reparsed before being handled as XML again. When not set, the stylesheet is searched for &lt;code&gt;@disable-output-escaping='yes'&lt;/code&gt; and the value is set accordingly Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>For xpathExpression only Default: text</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="indentXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. When not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipEmptyTags" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XsltPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="XsltPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamingPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyInputReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result (before replacing when &lt;code&gt;true&lt;/code&gt;) is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum number of threads that may call session) simultaneously, use 0 to disable limit Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionkey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored Default: ref_ + the name of the element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durationThreshold" type="frankInt">
      <xs:annotation>
        <xs:documentation>If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory to be analyzed Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="frankBoolean" />
    <xs:attribute name="restoreMovedElements" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  #setElementToMove(java.lang.String))</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sizeStatistics" type="frankBoolean" />
    <xs:attribute name="writeToSecLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt; a record is written to the security log when the pipe has finished successfully</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secLogSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;writeToSecLog=true&lt;/code&gt;) comma separated list of keys of session variables that is appended to the security log record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logIntermediaryResults" type="xs:string">
      <xs:annotation>
        <xs:documentation>when set, the value in AppConstants is overwritten (for this pipe only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt;
 will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level,
 so one pipe affects all pipes in the pipeline (and multiple values in different pipes are merged)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LabelFormatType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="LabelFormatCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.rekenbox.LabelFormat" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="LabelFormatDeclaredAttributeGroup">
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets transformation direction. Possible values 
 &lt;ul&gt;
   &lt;li&gt;"Xml2Label": transform an XML file to ascii&lt;/li&gt;
   &lt;li&gt;"Label2Xml": transform an ascii file to XML&lt;/li&gt;
 &lt;/ul&gt;
 default: None</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LabelFormatCumulativeAttributeGroup">
    <xs:attributeGroup ref="LabelFormatDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LadybugPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="LadybugPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.ibistesttool.LadybugPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="LadybugPipeDeclaredAttributeGroup">
    <xs:attribute name="writeToLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>whether or not to write results to the logfile (testtool4&amp;lt;instance.name&amp;gt;) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSystemOut" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>whether or not to write results to system out Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRoles" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Set to &lt;code&gt;true&lt;/code&gt; when the pipeline is triggered by a user (e.g. using an http based listener that will add a securityHandler session key) and you don't want the listener to check whether the user is autorised and/or you want the enforce the roles as configured for the Ladybug Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableReportGenerator" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Set to &lt;code&gt;true&lt;/code&gt; to enable Ladybug's report generator for the duration of the scheduled report runs, then revert it to its original setting Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exclude" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set, reports with a full path (path + name) that matches with the specified regular expression are skipped. For example, "/Unscheduled/.*" or ".*SKIP".</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LadybugPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="LadybugPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LdapFindGroupMembershipsPipeType">
    <xs:group ref="LdapFindGroupMembershipsPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="LdapFindGroupMembershipsPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.ldap.LdapFindGroupMembershipsPipe" use="prohibited" />
  </xs:complexType>
  <xs:group name="LdapFindGroupMembershipsPipeDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="CacheElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="LdapFindGroupMembershipsPipeCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="LdapFindGroupMembershipsPipeDeclaredChildGroup" />
      <xs:group ref="AbstractPipeDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="LdapFindGroupMembershipsPipeDeclaredAttributeGroup">
    <xs:attribute name="recursiveSearch" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the memberOf attribute is also searched in all the found members Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LdapFindGroupMembershipsPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="LdapFindGroupMembershipsPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="LdapQueryPipeBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="LdapQueryPipeBaseDeclaredAttributeGroup">
    <xs:attribute name="ldapProviderURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>Url to context to search in, e.g. 'ldaps://DOMAIN.EXT'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>Host part of ldapProviderUrl. Only used when ldapProviderUrl not specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>Port of ldapProviderUrl. Only used when ldapProviderUrl not specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useSsl" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Indication to use ldap or ldaps in ldapProviderUrl. Only used when ldapProviderUrl not specified Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseDN" type="xs:string">
      <xs:annotation>
        <xs:documentation>BaseDN, e.g. CN=USERS,DC=DOMAIN,DC=EXT Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials to connect to ldap server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username used to obtain credentials to connect to ldap server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password used to obtain credentials to connect to ldap server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notFoundForwardName" type="xs:string" />
    <xs:attribute name="exceptionForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>PipeForward used when an exception is caught</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LdapQueryPipeBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="LdapQueryPipeBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LdapFindMemberPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="LdapFindMemberPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.ldap.LdapFindMemberPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="LdapFindMemberPipeDeclaredAttributeGroup">
    <xs:attribute name="dnSearchIn" type="xs:string">
      <xs:annotation>
        <xs:documentation>The dn of the group to search in when the parameter dnSearchIn is not set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dnFind" type="xs:string">
      <xs:annotation>
        <xs:documentation>The dn of the member to search for when the parameter dnFind is not set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="recursiveSearch" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the member attribute is also searched in all the found members Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LdapFindMemberPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="LdapFindMemberPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="LdapQueryPipeBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LocalFileSystemPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="LocalFileSystemPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.LocalFileSystemPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="LocalFileSystemPipeDeclaredAttributeGroup">
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>the folder that serves as the root of this virtual filesystem</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LocalFileSystemPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="LocalFileSystemPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="FileSystemPipeDeclaredAttributeGroup">
    <xs:attribute name="action">
      <xs:simpleType>
        <xs:union memberTypes="FileSystemActionAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>If parameter [action] is set, then the attribute action value will be overridden with the value of the parameter.</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>filename to operate on. When not set, the parameter filename is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>destination for move, copy or rename. If not set, the parameter destination is used. When that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder to move or copy to is created if it does not exist Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, for actions move, copy or rename, the destination file is overwritten if it already exists Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="frankInt">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated each day, and this number of files is kept. The inputFolder must point to the directory where the file resides Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>for action=append: when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept. Size is specified in plain bytes, suffixes like 'K', 'M' or 'G' are not recognized. The inputFolder must point to the directory where the file resides Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="frankInt">
      <xs:annotation>
        <xs:documentation>for the actions write and append, with rotateSize&gt;0: the number of backup files that is kept. The inputFolder must point to the directory where the file resides Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to look for in inputFolder e.g. '*.inp'. Works with actions move, copy, delete and list</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeWildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to be excluded when looking in inputFolder. Works with actions move, copy, delete and list</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNonEmptyFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to true then the folder and the content of the non empty folder will be deleted.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeLineSeparator" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to true then the system specific line separator will be appended to the file after executing the action. Works with actions write and append Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset to be used for read and write action</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FileSystemPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="FileSystemPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MailSenderPipeType">
    <xs:group ref="MessageSendingPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="MessageSendingPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.MailSenderPipe" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="PGPPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="PGPPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.PGPPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="PGPPipeDeclaredAttributeGroup">
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>Action to be taken when pipe is executed. It can be one of the followed: Encrypt (encrypts the input), Sign (Encrypts and Signs the input), Decrypt (Decrypts the input), Verify (Decrypts and verifies the input)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="recipients" type="xs:string">
      <xs:annotation>
        <xs:documentation>Recipients to be used during encryption stage. If multiple, separate with ';' (semicolon)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verificationAddresses" type="xs:string">
      <xs:annotation>
        <xs:documentation>Emails of the senders. This will be used to verify that all the senders have signed the given message. If not set, and the action is verify; this pipe will validate that at least one person has signed. For signing action, it needs to be set to the email that was used to generate the private key that is being used for this process.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secretKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path to the private key. It will be used when signing or decrypting.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secretPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for the private key.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="publicKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path to the recipient's public key. It will be used for encryption and verification.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="PGPPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="PGPPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PasswordGeneratorPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="PasswordGeneratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.PasswordGeneratorPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="PasswordGeneratorPipeDeclaredAttributeGroup">
    <xs:attribute name="useSecureRandom" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>whether the securerandom algorithm is to be used (slower) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lCharacters" type="xs:string">
      <xs:annotation>
        <xs:documentation>the lowercase characters to use Default: ('a'..'z')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uCharacters" type="xs:string">
      <xs:annotation>
        <xs:documentation>the uppercase characters to use Default: ('a'..'z')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numbers" type="xs:string">
      <xs:annotation>
        <xs:documentation>the numbers to use Default: ('0'..'9')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="signs" type="xs:string">
      <xs:annotation>
        <xs:documentation>the signs to use Default: (;:_%$#@!&amp;gt;&amp;lt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numOfLCharacters" type="frankInt">
      <xs:annotation>
        <xs:documentation>the number of lowercase characters in the generated password Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numOfDigits" type="frankInt">
      <xs:annotation>
        <xs:documentation>the number of digits in the generated password Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numOfSigns" type="frankInt">
      <xs:annotation>
        <xs:documentation>the number of sign characters in the generated password Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numOfUCharacters" type="frankInt">
      <xs:annotation>
        <xs:documentation>the number of uppercase characters in the generated password Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="PasswordGeneratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="PasswordGeneratorPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PasswordHashPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="PasswordHashPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.PasswordHashPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="PasswordHashPipeDeclaredAttributeGroup">
    <xs:attribute name="hashSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of sessionkey that holds the hash which will be used to validate the password (input of the pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rounds" type="frankInt" />
    <xs:attribute name="roundsSessionKey" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="PasswordHashPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="PasswordHashPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PutInSessionType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="PutInSessionCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.PutInSession" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="PutInSessionDeclaredAttributeGroup">
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of the session variable to store the input in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value to store in the &lt;code&gt;pipeLineSession&lt;/code&gt;. If not set, the input of the pipe is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="PutInSessionCumulativeAttributeGroup">
    <xs:attributeGroup ref="PutInSessionDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PutSystemDateInSessionType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="PutSystemDateInSessionCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.PutSystemDateInSession" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="PutSystemDateInSessionDeclaredAttributeGroup">
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store systemdate in Default: systemdate</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Format to store date in Default: full ISO format: yyyy-MM-dd'T'HH:mm:sszzz</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeZone" type="xs:string">
      <xs:annotation>
        <xs:documentation>Time zone to use for the formatter Default: the default time zone for the JVM</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sleepWhenEqualToPrevious" type="frankInt">
      <xs:annotation>
        <xs:documentation>Set to a time &lt;i&gt;in milliseconds&lt;/i&gt; to create a value that is different to the previous returned value by a PutSystemDateInSession pipe in this virtual machine or &lt;code&gt;-1 to disable&lt;/code&gt;. The thread will sleep for the specified time before recalculating a new value. Set the timezone to a value without Daylight Saving Time (like GMT+1) to prevent this pipe to generate two equal value's when the clock is set back. &lt;b&gt;note:&lt;/b&gt; When you're looking for a GUID parameter for your XSLT it might be better to use &amp;lt;param name=&amp;quot;guid&amp;quot; pattern=&amp;quot;{hostname}_{uid}&amp;quot;/&amp;gt;, see nl.nn.adapterframework.parameters.Parameter Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnFixedDate" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the date/time returned will always be 2001-12-17 09:30:47 (for testing purposes only). It is overridden by the value of the pipelinesession key &lt;code&gt;stub4testtool.fixeddate&lt;/code&gt; when it exists Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getCurrentTimeStampInMillis" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to 'true' then current time stamp in millisecond will be stored in the sessionKey Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="PutSystemDateInSessionCumulativeAttributeGroup">
    <xs:attributeGroup ref="PutSystemDateInSessionDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="RekenBoxCallerType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="RekenBoxCallerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.rekenbox.RekenBoxCaller" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="RekenBoxCallerDeclaredAttributeGroup">
    <xs:attribute name="rekenBoxName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Fixed name of the rekenbox (or wrapper) to be called. If empty, the name is determined from the request</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="runPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory on server where rekenbox-executable can be found</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="templateDir" type="xs:string">
      <xs:annotation>
        <xs:documentation>Rekenbox template directory on server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputOutputDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory on server where input and output files are (temporarily) stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commandLineType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Format of commandline of rekenbox. Possible values
 "straight": rekenbox is called like: rekenbox.exe inputFileName outputFileName templateDir
 "switches": rekenbox is called like: rekenbox.exe /IinputFileName /UoutputFileName /PtemplateDir
 "redirected": rekenbox is called like: rekenbox.exe inputFileName templateDir &gt; outputFileName; (This method has not been fully tested)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="executableExtension" type="xs:string">
      <xs:annotation>
        <xs:documentation>Extension of rekenbox-executable</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cleanup" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, input and output files are removed after the call to the rekenbox is finished</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rekenboxSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key in pipeLineSession to store rekenbox name in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dataFilenamePrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>First part of filenames that communicate requests and replies to rekenbox</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRequestNumber" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximal number that will be concatenated to dataFilenamePrefix</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="RekenBoxCallerCumulativeAttributeGroup">
    <xs:attributeGroup ref="RekenBoxCallerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="RemoveCacheKeyPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="RemoveCacheKeyPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.cache.RemoveCacheKeyPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="RemoveCacheKeyPipeDeclaredAttributeGroup">
    <xs:attribute name="cacheName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the cache from which items are to be removed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath expression to extract cache key from request message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyXPathOutputType">
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Output type of xpath expression to extract cache key from request message, must be 'xml' or 'text' Default: text</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keyNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for keyXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to extract cache key from request message. Use in combination with cacheEmptyKeys to inhibit caching for certain groups of request messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyInputSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to use as input for transformation of request message to key by keyXPath or keyStyleSheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="RemoveCacheKeyPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="RemoveCacheKeyPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="RemoveFromSessionType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="RemoveFromSessionCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.RemoveFromSession" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="RemoveFromSessionDeclaredAttributeGroup">
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the key of the entry in the &lt;code&gt;pipelinesession&lt;/code&gt; to remove. if this key is empty the input message is interpretted as key. for multiple keys use ',' as delimiter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="RemoveFromSessionCumulativeAttributeGroup">
    <xs:attributeGroup ref="RemoveFromSessionDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ReplacerPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="ReplacerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.ReplacerPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ReplacerPipeDeclaredAttributeGroup">
    <xs:attribute name="find" type="xs:string">
      <xs:annotation>
        <xs:documentation>string to search for</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replace" type="xs:string">
      <xs:annotation>
        <xs:documentation>string that will replace each of the strings found</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineSeparatorSymbol" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the string the representation in find and replace of the line separator</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceNonXmlChars" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Replace all non XML chars (not in the &lt;a href="http://www.w3.org/TR/2006/REC-xml-20060816/#NT-Char"&gt;character range as specified by the XML specification&lt;/a&gt;) with replaceNonValidXmlCharacters Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceNonXmlChar" type="xs:string">
      <xs:annotation>
        <xs:documentation>character that will replace each non valid xml character (empty string is also possible) (use &amp;amp;#x00bf; for inverted question mark) Default: empty string</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowUnicodeSupplementaryCharacters" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Whether to allow Unicode supplementary characters (like a smiley) during replaceNonValidXmlCharacters Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ReplacerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ReplacerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ResultSetIteratingPipeType">
    <xs:group ref="IteratingPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="JdbcIteratingPipeBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.jdbc.ResultSetIteratingPipe" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="Samba1PipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="Samba1PipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.Samba1Pipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Samba1PipeDeclaredAttributeGroup">
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>Shared folder name in the samba server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="force" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether hidden files are seen or not Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Samba1PipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="Samba1PipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Samba2PipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="Samba2PipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.Samba2Pipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Samba2PipeDeclaredAttributeGroup">
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>the destination, aka smb://xxx/yyy share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domain" type="xs:string">
      <xs:annotation>
        <xs:documentation>domain, in case the user account is bound to a domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'  Default: SPNEGO</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Domain Controller, as set in java.security.krb5.kdc. If authentication type specified as SPNEGO and realm is specified then this field must be filled.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Kerberos Realm, as set in java.security.krb5.realm. If authentication type specified as SPNEGO this field must be filled. If not filled then default realm is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Samba2PipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="Samba2PipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SambaPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="Samba2PipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.SambaPipe" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="ScanTibcoSolutionPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="ScanTibcoSolutionPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.extensions.svn.ScanTibcoSolutionPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ScanTibcoSolutionPipeDeclaredAttributeGroup">
    <xs:attribute name="url" type="xs:string" />
    <xs:attribute name="level" type="frankInt" />
  </xs:attributeGroup>
  <xs:attributeGroup name="ScanTibcoSolutionPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ScanTibcoSolutionPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SenderPipeType">
    <xs:group ref="SenderPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="MessageSendingPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.SenderPipe" use="prohibited" />
  </xs:complexType>
  <xs:group name="SenderPipeDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ListenerElementGroup_2" minOccurs="0" maxOccurs="1" />
      <xs:group ref="SenderElementGroup" minOccurs="1" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="SenderPipeCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="SenderPipeDeclaredChildGroup" />
      <xs:group ref="MessageSendingPipeCumulativeChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:complexType name="SignaturePipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="SignaturePipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.SignaturePipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="SignaturePipeDeclaredAttributeGroup">
    <xs:attribute name="action">
      <xs:simpleType>
        <xs:union memberTypes="ActionAttributeValuesType_2 variableRef">
          <xs:annotation>
            <xs:documentation>Action to be taken when pipe is executed. Default: SIGN</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="algorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>The signing algorithm Default: ALGORITHM_DEFAULT</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="provider" type="xs:string">
      <xs:annotation>
        <xs:documentation>Cryptography provider</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="signatureBase64" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if true, the signature is (expected to be) base64 encoded Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystore" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Keystore to obtain signing key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType">
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Type of keystore, can be pkcs12 or pem Default: pkcs12</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias in keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain keystoreAlias password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>KeystoreAlias password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="ActionAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:enumeration value="SIGN">
        <xs:annotation>
          <xs:documentation>signs the input</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="VERIFY">
        <xs:annotation>
          <xs:documentation>verifies a signature</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="SignaturePipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="SignaturePipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SizePipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.SizePipe" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="SkipPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="SkipPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.SkipPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="SkipPipeDeclaredAttributeGroup">
    <xs:attribute name="skip" type="frankInt">
      <xs:annotation>
        <xs:documentation>number of bytes (for byte array input) or characters (for string input) to skip. an empty byte array or string is returned when skip is larger then the length of the input Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="length" type="frankInt">
      <xs:annotation>
        <xs:documentation>if length&gt;=0 only these number of bytes (for byte array input) or characters (for string input) is returned. Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SkipPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="SkipPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="StreamLineIteratorPipeType">
    <xs:group ref="IteratingPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="StreamLineIteratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.StreamLineIteratorPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="StreamLineIteratorPipeDeclaredAttributeGroup">
    <xs:attribute name="endOfLineString" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, each record has to end with this string. If a line read doesn't end with this string more lines are added (including line separators) until the total record ends with the given string</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startOfLineString" type="xs:string">
      <xs:annotation>
        <xs:documentation>Marks the start of a new record. If set, a new record is started when this line is read.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="StreamLineIteratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="StreamLineIteratorPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StringIteratorPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Text2XmlPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="Text2XmlPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.Text2XmlPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="Text2XmlPipeDeclaredAttributeGroup">
    <xs:attribute name="xmlTag" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The xml tag to encapsulate the text in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="splitLines" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether the lines of the input are places in separated &amp;lt;line&amp;gt; tags Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceNonXmlChars" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Replace all non xml chars (not in the &lt;a href=\"http://www.w3.org/tr/2006/rec-xml-20060816/#nt-char\"&gt;character range as specified by the xml specification&lt;/a&gt;) 
 with the inverted question mark (0x00bf) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useCdataSection" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether the text to encapsulate should be put in a cdata section Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Text2XmlPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="Text2XmlPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="TextSplitterPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="TextSplitterPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.TextSplitterPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="TextSplitterPipeDeclaredAttributeGroup">
    <xs:attribute name="maxBlockLength" type="frankInt">
      <xs:annotation>
        <xs:documentation>Set the maximum number of characters of a block Default: 160</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="softSplit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, try to break up the message at spaces, instead of in the middle of words Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="TextSplitterPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="TextSplitterPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="UUIDGeneratorPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="UUIDGeneratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.UUIDGeneratorPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="UUIDGeneratorPipeDeclaredAttributeGroup">
    <xs:attribute name="type">
      <xs:simpleType>
        <xs:union memberTypes="TypeAttributeValuesType variableRef">
          <xs:annotation>
            <xs:documentation>Format of generated string. Default: alphanumeric</xs:documentation>
          </xs:annotation>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="TypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ALPHANUMERIC">
        <xs:annotation>
          <xs:documentation>the UUID will not have a fixed length which will be about 42</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="NUMERIC">
        <xs:annotation>
          <xs:documentation>a UUID with fixed length 31 will be generated</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="UUIDGeneratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="UUIDGeneratorPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="UnzipPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="UnzipPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.UnzipPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="UnzipPipeDeclaredAttributeGroup">
    <xs:attribute name="directory" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory to extract the archive to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="directorySessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sessionkey with a directory value to extract the archive to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteOnExit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, file is automatically deleted upon normal JVM termination Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;false&lt;/code&gt;, only a small summary (count of items in zip) is returned Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectFileContents" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the contents of the files in the zip are returned in the result xml message of this pipe. Please note this can consume a lot of memory for large files or a large number of files Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectFileContentsBase64Encoded" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of file extensions. Files with an extension which is part of this list will be base64 encoded. All other files are assumed to have UTF-8 when reading it from the zip and are added as escaped xml with non-unicode-characters being replaced by inverted question mark appended with #, the character number and ; Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keepOriginalFileName" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;false&lt;/code&gt;, a suffix is added to the original filename to be sure it is unique Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keepOriginalFilePath" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the path of the zip entry will be preserved. Otherwise, the zip entries will be extracted to the root folder Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="assumeDirectoryExists" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if set &lt;code&gt;true&lt;/code&gt;, validation of directory is ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="UnzipPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="UnzipPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="WsdlGeneratorPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="WsdlGeneratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.WsdlGeneratorPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="WsdlGeneratorPipeDeclaredAttributeGroup">
    <xs:attribute name="from" type="xs:string">
      <xs:annotation>
        <xs:documentation>either parent (adapter of pipeline which contains this pipe) or input (name of adapter specified by input of pipe) Default: parent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="WsdlGeneratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="WsdlGeneratorPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XQueryPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="XQueryPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.XQueryPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="XQueryPipeDeclaredAttributeGroup">
    <xs:attribute name="xqueryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file (resource) on the classpath to read the xquery from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xqueryFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file on the file system to read the xquery from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XQueryPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="XQueryPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlBuilderPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="XmlBuilderPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.XmlBuilderPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="XmlBuilderPipeDeclaredAttributeGroup">
    <xs:attribute name="substringStart" type="xs:string">
      <xs:annotation>
        <xs:documentation>substring to start translation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="substringEnd" type="xs:string">
      <xs:annotation>
        <xs:documentation>substring to end translation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlBuilderPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlBuilderPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlIfType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="XmlIfCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.XmlIf" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="XmlIfDeclaredAttributeGroup">
    <xs:attribute name="expressionValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>a string to compare the result of the xpathexpression (or the input-message itself) to. if not specified, a non-empty result leads to the 'then'-forward, an empty result to 'else'-forward</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="thenForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when &lt;code&gt;'true'&lt;/code&gt; Default: then</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elseForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when 'false' Default: else</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to be applied to the input-message. if not set, no transformation is done</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="regex" type="xs:string">
      <xs:annotation>
        <xs:documentation>regular expression to be applied to the input-message (ignored if xpathexpression is specified). the input-message matching the given regular expression leads to the 'then'-forward</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>specifies the version of xslt to use Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlIfCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlIfDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlSwitchType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="XmlSwitchCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.pipes.XmlSwitch" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="XmlSwitchDeclaredAttributeGroup">
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet may return a string representing the forward to look up Default: &lt;i&gt;a stylesheet that returns the name of the root-element&lt;/i&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath-expression that returns a string representing the forward to look up. It's possible to refer to a parameter (which e.g. contains a value from a sessionkey) by using the parameter name prefixed with $</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notFoundForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Forward returned when the pipename derived from the stylesheet could not be found.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Forward returned when the content, on which the switch is performed, is empty. if &lt;code&gt;emptyforwardname&lt;/code&gt; is not specified, &lt;code&gt;notfoundforwardname&lt;/code&gt; is used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;2&lt;/code&gt; xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto detect Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeForwardInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Selected forward name will be stored in the specified session key.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key that will be used to get the forward name from.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlSwitchCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlSwitchDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ZipIteratorPipeType">
    <xs:group ref="IteratingPipeCumulativeChildGroup" />
    <xs:attributeGroup ref="ZipIteratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.compression.ZipIteratorPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ZipIteratorPipeDeclaredAttributeGroup">
    <xs:attribute name="contentsSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key used to store contents of each zip entry Default: zipdata</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingContents" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;false&lt;/code&gt;, a string containing the contents of the entry is placed under the session key, instead of the inputstream to the contents Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset used when reading the contents of the entry (only used if streamingContents=false) Default: utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipBOM" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, a possible bytes order mark (BOM) at the start of the file is skipped (only used for encoding uft-8) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ZipIteratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ZipIteratorPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="IteratingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ZipWriterPipeType">
    <xs:group ref="AbstractPipeDeclaredChildGroup" />
    <xs:attributeGroup ref="ZipWriterPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.compression.ZipWriterPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ZipWriterPipeDeclaredAttributeGroup">
    <xs:attribute name="closeInputstreamOnExit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Only for action='write': If set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after the zip entry is written Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOutputstreamOnExit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Only for action='open': If set to &lt;code&gt;false&lt;/code&gt;, the outputstream is not closed after the zip creation is finished Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for action='write': Charset used to write strings to zip entries Default: utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="zipWriterHandle" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key used to refer to zip session. Must be specified with another value if ZipWriterPipes are nested Default: zipwriterhandle</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of &lt;ul&gt;&lt;li&gt;open: To open a new zip file or stream&lt;/li&gt; &lt;li&gt;close: To close the zip file or stream&lt;/li&gt; &lt;li&gt;write: Write the input to the zip as a new entry&lt;/li&gt; &lt;li&gt;stream: Create a new zip entry, and provide an outputstream that another pipe can use to write the contents&lt;/li&gt; &lt;/ul&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="completeFileHeader" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Only for action='write': If set to &lt;code&gt;true&lt;/code&gt;, the fields 'crc-32', 'compressed size' and 'uncompressed size' in the zip entry file header are set explicitly (note: compression ratio is zero) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ZipWriterPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ZipWriterPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="JobElementGroup">
    <xs:choice>
      <xs:element name="Job">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="DirectoryCleaner" />
              <xs:element ref="Locker" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="job" use="prohibited" />
          <xs:attribute name="className" type="xs:string" default="nl.nn.adapterframework.scheduler.job.Job" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="JobElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="JobElementGroupBase">
    <xs:choice>
      <xs:element name="CheckReloadJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CheckReloadJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CleanupDatabaseJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CleanupDatabaseJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CleanupFileSystemJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CleanupFileSystemJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DatabaseJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DatabaseJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DumpFullStatisticsJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DumpFullStatisticsJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DumpStatisticsJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DumpStatisticsJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ExecuteQueryJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ExecuteQueryJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IbisActionJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IbisActionJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LoadDatabaseSchedulesJob">
        <xs:annotation>
          <xs:documentation>1.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LoadDatabaseSchedulesJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RecoverAdaptersJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RecoverAdaptersJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SendMessageJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SendMessageJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="CheckReloadJobType">
    <xs:group ref="JobDefDeclaredChildGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.scheduler.job.CheckReloadJob" use="prohibited" />
  </xs:complexType>
  <xs:group name="JobDefDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Locker" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="JobDefDeclaredAttributeGroup">
    <xs:attribute name="jobGroup" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the job"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Optional) Description of the job</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cronExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>CRON expression that determines the frequency of execution.
 Can &lt;code&gt;not&lt;/code&gt; be used in combination with Interval.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="interval" type="frankInt">
      <xs:annotation>
        <xs:documentation>Triggers the Job at the specified number of milliseconds. Keep cronExpression empty in order to use interval.
 Value &lt;code&gt;0&lt;/code&gt; may be used to run once at startup of the application.
 A value of 0 in combination with function 'sendMessage' will set dependencyTimeout on the IbisLocalSender to -1 to keep waiting indefinitely instead of 60 seconds for the adapter to start.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Number of threads that may execute concurrently Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageKeeperSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Number of message displayed in ibisconsole Default: 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JobDefCumulativeAttributeGroup">
    <xs:attributeGroup ref="JobDefDeclaredAttributeGroup" />
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CleanupDatabaseJobType">
    <xs:group ref="JobDefDeclaredChildGroup" />
    <xs:attributeGroup ref="CleanupDatabaseJobCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.scheduler.job.CleanupDatabaseJob" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="CleanupDatabaseJobDeclaredAttributeGroup">
    <xs:attribute name="queryTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of seconds the database driver will wait for a statement to execute. If the limit is exceeded, a TimeoutException is thrown. 0 means no timeout Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CleanupDatabaseJobCumulativeAttributeGroup">
    <xs:attributeGroup ref="CleanupDatabaseJobDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CleanupFileSystemJobType">
    <xs:group ref="CleanupFileSystemJobCumulativeChildGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.scheduler.job.CleanupFileSystemJob" use="prohibited" />
  </xs:complexType>
  <xs:group name="CleanupFileSystemJobDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="DirectoryCleaner" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:group name="CleanupFileSystemJobCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="CleanupFileSystemJobDeclaredChildGroup" />
      <xs:group ref="JobDefDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:complexType name="DatabaseJobType">
    <xs:group ref="JobDefDeclaredChildGroup" />
    <xs:attributeGroup ref="DatabaseJobCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.scheduler.job.DatabaseJob" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="DatabaseJobDeclaredAttributeGroup">
    <xs:attribute name="adapterName" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="DatabaseJobCumulativeAttributeGroup">
    <xs:attributeGroup ref="DatabaseJobDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SendMessageJobCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SendMessageJobType">
    <xs:group ref="JobDefDeclaredChildGroup" />
    <xs:attributeGroup ref="SendMessageJobCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.scheduler.job.SendMessageJob" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="SendMessageJobDeclaredAttributeGroup">
    <xs:attribute name="javaListener" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>JavaListener to send the message to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="message" type="xs:string">
      <xs:annotation>
        <xs:documentation>message to be send into the pipeline</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SendMessageJobCumulativeAttributeGroup">
    <xs:attributeGroup ref="SendMessageJobDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="DumpFullStatisticsJobType">
    <xs:group ref="JobDefDeclaredChildGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.scheduler.job.DumpFullStatisticsJob" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="DumpStatisticsJobType">
    <xs:group ref="JobDefDeclaredChildGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.scheduler.job.DumpStatisticsJob" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="ExecuteQueryJobType">
    <xs:group ref="JobDefDeclaredChildGroup" />
    <xs:attributeGroup ref="ExecuteQueryJobCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.scheduler.job.ExecuteQueryJob" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ExecuteQueryJobDeclaredAttributeGroup">
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text to be executed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used Default: ${jdbc.datasource.default}</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of seconds the database driver will wait for a statement to execute. If the limit is exceeded, a TimeoutException is thrown. 0 means no timeout Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ExecuteQueryJobCumulativeAttributeGroup">
    <xs:attributeGroup ref="ExecuteQueryJobDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IbisActionJobType">
    <xs:group ref="JobDefDeclaredChildGroup" />
    <xs:attributeGroup ref="IbisActionJobCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.scheduler.job.IbisActionJob" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="IbisActionJobDeclaredAttributeGroup">
    <xs:attribute name="action">
      <xs:simpleType>
        <xs:union memberTypes="ActionAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="configurationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Configuration on which job operates</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="adapterName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Adapter on which job operates</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="receiverName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Receiver on which job operates</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="ActionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="STOPADAPTER" />
      <xs:enumeration value="STARTADAPTER" />
      <xs:enumeration value="STOPRECEIVER" />
      <xs:enumeration value="STARTRECEIVER" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="IbisActionJobCumulativeAttributeGroup">
    <xs:attributeGroup ref="IbisActionJobDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LoadDatabaseSchedulesJobType">
    <xs:group ref="JobDefDeclaredChildGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.scheduler.job.LoadDatabaseSchedulesJob" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="RecoverAdaptersJobType">
    <xs:group ref="JobDefDeclaredChildGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.scheduler.job.RecoverAdaptersJob" use="prohibited" />
  </xs:complexType>
  <xs:group name="SapSystemElementGroup">
    <xs:choice>
      <xs:element name="SapSystem">
        <xs:complexType>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="sapSystem" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="SapSystemElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="SapSystemElementGroupBase">
    <xs:choice />
  </xs:group>
  <xs:group name="DestinationElementGroup">
    <xs:choice>
      <xs:element name="Destination">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="destination" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="DestinationElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="DestinationElementGroupBase">
    <xs:choice>
      <xs:element name="GalmDestination">
        <xs:annotation>
          <xs:documentation>MonitorAdapter that creates log lines for the GALM log adapter.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="GalmMonitorAdapterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="destination" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SenderDestination">
        <xs:annotation>
          <xs:documentation>IMonitorAdapter that uses a sender to send its message.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SenderMonitorAdapterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="destination" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="GalmMonitorAdapterType">
    <xs:attributeGroup ref="MonitorAdapterBaseDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.monitoring.GalmMonitorAdapter" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="MonitorAdapterBaseDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="SenderMonitorAdapterType">
    <xs:group ref="SenderMonitorAdapterDeclaredChildGroup" />
    <xs:attributeGroup ref="MonitorAdapterBaseDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.monitoring.SenderMonitorAdapter" use="prohibited" />
  </xs:complexType>
  <xs:group name="SenderMonitorAdapterDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="TriggerElementGroup">
    <xs:choice>
      <xs:element name="Trigger">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="Adapterfilter" />
              <xs:element name="Event" minOccurs="0" maxOccurs="unbounded" type="xs:string" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="trigger" use="prohibited" />
          <xs:attribute name="className" type="xs:string" default="nl.nn.adapterframework.monitoring.Trigger" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="TriggerElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="TriggerElementGroupBase">
    <xs:choice>
      <xs:element name="AlarmTrigger">
        <xs:annotation>
          <xs:documentation>A Trigger that starts its life with type = ALARM.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="AlarmType">
              <xs:attribute name="elementRole" type="xs:string" fixed="trigger" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ClearingTrigger">
        <xs:annotation>
          <xs:documentation>A Trigger that starts its life with type = CLEARING.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ClearingType">
              <xs:attribute name="elementRole" type="xs:string" fixed="trigger" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="AlarmType">
    <xs:group ref="TriggerDeclaredChildGroup" />
    <xs:attributeGroup ref="TriggerDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.monitoring.Alarm" use="prohibited" />
  </xs:complexType>
  <xs:complexType name="TriggerType">
    <xs:group ref="TriggerDeclaredChildGroup" />
    <xs:attributeGroup ref="TriggerDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.monitoring.Trigger" use="prohibited" />
  </xs:complexType>
  <xs:group name="TriggerDeclaredChildGroup">
    <xs:sequence>
      <xs:element name="Event" minOccurs="0" maxOccurs="unbounded" type="xs:string" />
      <xs:element ref="Adapterfilter" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="TriggerDeclaredAttributeGroup">
    <xs:attribute name="eventCode" type="xs:string" />
    <xs:attribute name="eventCodes" type="xs:string" />
    <xs:attribute name="severity">
      <xs:simpleType>
        <xs:union memberTypes="SeverityEnumAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="severityEnum">
      <xs:simpleType>
        <xs:union memberTypes="SeverityEnumAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="threshold" type="frankInt" />
    <xs:attribute name="period" type="frankInt" />
    <xs:attribute name="sourceFilteringEnum">
      <xs:simpleType>
        <xs:union memberTypes="SourceFilteringAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="triggerType">
      <xs:simpleType>
        <xs:union memberTypes="TriggerTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:simpleType name="SeverityEnumAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="HARMLESS" />
      <xs:enumeration value="WARNING" />
      <xs:enumeration value="CRITICAL" />
      <xs:enumeration value="FATAL" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SourceFilteringAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NONE" />
      <xs:enumeration value="ADAPTER" />
      <xs:enumeration value="SOURCE" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TriggerTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ALARM" />
      <xs:enumeration value="CLEARING" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="ClearingType">
    <xs:group ref="TriggerDeclaredChildGroup" />
    <xs:attributeGroup ref="TriggerDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="nl.nn.adapterframework.monitoring.Clearing" use="prohibited" />
  </xs:complexType>
  <xs:simpleType name="EventTypeEnumAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="TECHNICAL" />
      <xs:enumeration value="FUNCTIONAL" />
      <xs:enumeration value="HEARTBEAT" />
      <xs:enumeration value="CLEARING" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="ConfigurationDeclaredAttributeGroup">
    <xs:attribute name="autoStart" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If the Configuration should automatically start all Adapters and Jobs.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the Configuration</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="version" type="xs:string">
      <xs:annotation>
        <xs:documentation>The version of the Configuration, typically provided by the BuildInfo.properties file.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:simpleType name="frankBoolean">
    <xs:restriction base="xs:string">
      <xs:pattern value="(true|false)|($\{[^\}]+\})" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="frankInt">
    <xs:restriction base="xs:string">
      <xs:pattern value="((\+|-)?[0-9]+)|($\{[^\}]+\})" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attribute name="active">
    <xs:annotation>
      <xs:documentation>If defined and empty or false, then this element and all its children are ignored</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:string">
        <xs:pattern value="!?(($\{[^\}]+\})|([tT][rR][uU][eE])|([fF][aA][lL][sS][eE]))" />
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:simpleType name="variableRef">
    <xs:restriction base="xs:string">
      <xs:pattern value="$\{[^\}]+\}" />
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
