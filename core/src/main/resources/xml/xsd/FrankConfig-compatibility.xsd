<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="8.3.0-SNAPSHOT">
  <xs:element name="Configuration" type="ConfigurationType" />
  <xs:complexType name="ConfigurationType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Include" minOccurs="0" maxOccurs="unbounded" type="IncludeType" />
        <xs:element name="Adapter" minOccurs="0" maxOccurs="unbounded" type="AdapterType" />
        <xs:element name="Scheduler" minOccurs="0" maxOccurs="1" type="SchedulerType" />
        <xs:group ref="JobElementGroup" minOccurs="0" maxOccurs="unbounded" />
        <xs:element name="SapSystems" minOccurs="0" maxOccurs="1" type="SapSystemsType" />
        <xs:element name="JmsRealms" minOccurs="0" maxOccurs="1" type="JmsRealmsType" />
        <xs:element name="JmsRealm" minOccurs="0" maxOccurs="unbounded" type="JmsRealmType" />
        <xs:element name="Monitoring" minOccurs="0" maxOccurs="1" type="MonitoringType" />
        <xs:element name="SharedResources" minOccurs="0" maxOccurs="1" type="SharedResourcesType" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="autoStart" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If the Configuration should automatically start all Adapters and Jobs.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Configurations should be wired through Spring, which in turn should call #setBeanName(String).
 Once the ConfigurationContext has a name it should not be changed anymore, hence
 super.setBeanName(String) only sets the name once.
 If not created by Spring, the setIdCalled flag in AbstractRefreshableConfigApplicationContext wont be set, allowing the name to be updated.

 The DisplayName will always be updated, which is purely used for logging purposes.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.configuration.Configuration" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="IncludeType">
    <xs:attribute name="ref" type="xs:string">
      <xs:annotation>
        <xs:documentation>reference to a configuration to be included in the current.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.configuration.Include" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="include" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="AdapterType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Receiver" minOccurs="1" maxOccurs="unbounded" type="ReceiverType" />
        <xs:group ref="ErrorMessageFormatterElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:element name="Pipeline" minOccurs="1" maxOccurs="1" type="PipelineType" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>name of the adapter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>some functional description of the &lt;code&gt;Adapter&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoStart" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>AutoStart indicates that the adapter should be started when the configuration
 is started. Default: &lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceNullMessage" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt; a null message is replaced by an empty message Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageKeeperSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>number of message displayed in ibisconsole Default: 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="msgLogLevel">
      <xs:annotation>
        <xs:documentation>Defines behaviour for logging messages. Configuration is done in the MSG appender in log4j4ibis.properties. Default: &lt;code&gt;INFO&lt;/code&gt;, unless overridden by property &lt;code&gt;msg.log.level.default&lt;/code&gt;</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="MessageLogLevelAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="requestReplyLogging" type="frankBoolean" />
    <xs:attribute name="msgLogHidden" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the length of the message is shown in the msg log instead of the content of the message Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetDesignDocument" type="xs:string" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.core.Adapter" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="adapter" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="ReceiverType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="ListenerElementGroup" minOccurs="1" maxOccurs="1" />
        <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="ErrorSenderElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="ErrorStorageElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="MessageLogElementGroup" minOccurs="0" maxOccurs="1" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the Receiver, as known to the Adapter.
 If the listener implements the name interface and &lt;code&gt;getName()&lt;/code&gt;
 of the listener is empty, the name of this object is given to the listener.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onError">
      <xs:annotation>
        <xs:documentation>One of 'continue', 'recover' or 'close'. Controls the behaviour of the Receiver, when it encounters an error during processing of a message. Default: CONTINUE</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="OnErrorAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="numThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of threads that may execute a Pipeline concurrently (only for pulling listeners) Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numThreadsPolling" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of threads that are actively polling for messages concurrently. '0' means 'limited only by &lt;code&gt;numthreads&lt;/code&gt;' (only for pulling listeners) Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pollInterval" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of seconds waited after an unsuccessful poll attempt, before another poll attempt is made. Only for polling listeners, not for e.g. jms, webservice or javaListeners Default: 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) to start receiver. If this timeout is exceeded, the Receiver startup is
  aborted and all resources closed and the receiver will be in state {@code EXCEPTION_STARTING}
  and a new start command may be issued again.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stopTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>timeout (in seconds) to stop receiver. If this timeout is exceeded, stopping will be aborted
  and the receiver will be in state {@code EXCEPTION_STOPPING}.
  The receiver will no longer be running but some resources might not have been cleaned up properly.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkForDuplicates" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, each message is checked for presence in the messageLog. If already present, it is not processed again. Only required for non XA compatible messaging. Requires messageLog! Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkForDuplicatesMethod">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;checkForDuplicates=true&lt;/code&gt;) Indicates whether the messageid or the correlationid is used for checking presence in the message log Default: MESSAGEID</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="CheckForDuplicatesMethodAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="maxDeliveries" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum delivery count after which to stop processing the message (only for listeners that know the delivery count of received messages). If -1 the delivery count is ignored Default: 5</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of times a processing attempt is automatically retried after an exception is caught or rollback is experienced. If &lt;code&gt;maxRetries &amp;lt; 0&lt;/code&gt; the number of attempts is infinite Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processResultCacheSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Size of the cache to keep process results, used by maxRetries Default: 100</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnedSessionKeys" type="xs:string" />
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for correlationIDXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to extract correlationID from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for labelXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chompCharSize" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMove" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the character data in this XML element is stored inside a session key and in the message it is replaced by a reference to this session key: &lt;code&gt;{sessionKey: elementToMoveSessionKey}&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; or &lt;code&gt;elementToMoveChain&lt;/code&gt; is set) Name of the session key wherein the character data is stored Default: ref_ + the name of the element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementToMoveChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. adapter;pipeline;pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeCompactMsgNamespaces" type="frankBoolean" />
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore and logfiles. Every character between to the strings in this expression will be replaced by a '*'. For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every character between keys &amp;lt;party&amp;gt; and &amp;lt;/party&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod">
      <xs:annotation>
        <xs:documentation>Only used when hideRegex is not empty Default: all</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="HideMethodAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="hiddenInputSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of keys of session variables which are available when the &lt;code&gt;PipelineSession&lt;/code&gt; is created and of which the value will not be shown in the log (replaced by asterisks)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceRetryFlag" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, every message read will be processed as if it is being retried, by setting a session variable to retry. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfExceptionsCaughtWithoutMessageBeingReceivedThreshold" type="frankInt">
      <xs:annotation>
        <xs:documentation>Number of connection attempts to put the adapter in warning status Default: 5</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="frankBoolean" />
    <xs:attribute ref="transactionTimeout" />
    <xs:attribute ref="transactionAttribute" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.receivers.Receiver" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="receiver" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="ParamType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="type">
      <xs:annotation>
        <xs:documentation>The target data type of the parameter, related to the database or XSLT stylesheet to which the parameter is applied. Default: STRING</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ParameterTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the parameter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="value" />
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of a PipelineSession-variable. &lt;br/&gt;If specified, the value of the PipelineSession variable is used as input for
 the xpathExpression or stylesheet, instead of the current input message. &lt;br/&gt;If no xpathExpression or stylesheet are
 specified, the value itself is returned. &lt;br/&gt;If the value '*' is specified, all existing sessionkeys are added as
 parameter of which the name starts with the name of this parameter. &lt;br/&gt;If also the name of the parameter has the
 value '*' then all existing sessionkeys are added as parameter (except tsReceived)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="contextKey" />
    <xs:attribute ref="sessionKeyXPath" />
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL to a stylesheet that wil be applied to the contents of the message or the value of the session-variable.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>the XPath expression to extract the parameter value from the (xml formatted) input or session-variable.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt; a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto-detect Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace definitions for xpathExpression. Must be in the form of a comma or space separated list of
 &lt;code&gt;prefix=namespaceuri&lt;/code&gt; definitions. One entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before the stylesheet/xpathExpression is executed Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="defaultValue" />
    <xs:attribute ref="defaultValueMethods" />
    <xs:attribute ref="pattern" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain username and password, used when a &lt;code&gt;pattern&lt;/code&gt; containing {username} or {password} is specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username that is used when a &lt;code&gt;pattern&lt;/code&gt; containing {username} is specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password that is used when a &lt;code&gt;pattern&lt;/code&gt; containing {password} is specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="ignoreUnresolvablePatternElements" />
    <xs:attribute ref="minLength" />
    <xs:attribute ref="maxLength" />
    <xs:attribute ref="hidden" />
    <xs:attribute ref="mode" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.parameters.Parameter" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="param" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="PipelineType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="InputValidatorElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="OutputValidatorElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="InputWrapperElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="OutputWrapperElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:element name="Exits" minOccurs="0" maxOccurs="1" type="ExitsType" />
        <xs:element name="Exit" minOccurs="0" maxOccurs="unbounded" type="ExitType" />
        <xs:element name="GlobalForwards" minOccurs="0" maxOccurs="1" type="GlobalForwardsType" />
        <xs:element name="Forward" minOccurs="0" maxOccurs="unbounded" type="ForwardType" />
        <xs:element name="Locker" minOccurs="0" maxOccurs="1" type="LockerType" />
        <xs:group ref="CacheElementGroup" minOccurs="0" maxOccurs="1" />
        <xs:group ref="PipeElementGroup" minOccurs="1" maxOccurs="unbounded" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="firstPipe" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the first pipe to execute when a message is to be processed Default: first pipe of the pipeline</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum number of threads that may execute this Pipeline simultaneously, use 0 to disable limit Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeOriginalMessageWithoutNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; the original message without namespaces (and prefixes) is stored under the session key originalMessageWithoutNamespaces Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageSizeWarn" type="xs:string">
      <xs:annotation>
        <xs:documentation>If messageSizeWarn&gt;=0 and the size of the input or result pipe message exceeds the value specified a warning message is logged. You can specify the value with the suffixes &lt;code&gt;KB&lt;/code&gt;, &lt;code&gt;MB&lt;/code&gt; or &lt;code&gt;GB&lt;/code&gt; Default: application default (30MB)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transformNullMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>when specified and &lt;code&gt;null&lt;/code&gt; is received as a message the message is changed to the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="adapterToRunBeforeOnEmptyInput" type="xs:string">
      <xs:annotation>
        <xs:documentation>when specified and an empty message is received the specified adapter is run before passing the message (response from specified adapter) to the pipeline</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="frankBoolean" />
    <xs:attribute ref="transactionTimeout" />
    <xs:attribute ref="transactionAttribute" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.core.PipeLine" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="pipeline" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="ForwardType">
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>the &lt;code&gt;name&lt;/code&gt; is a symbolic reference to a &lt;code&gt;path&lt;/code&gt;.&lt;br/&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="path" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The name of the next Pipe or Exit. When the Pipeline doesn't have an Exits element configured it will be
 initialized with one Exit having name READY and state SUCCESS</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.core.PipeForward" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="forward" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="LockerType">
    <xs:attribute name="objectId" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Identifier for this lock</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type">
      <xs:annotation>
        <xs:documentation>Type for this lock: P(ermanent) or T(emporary). A temporary lock is released after the job has completed Default: T</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="LockTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="dateFormatSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>Format for date which is added after &lt;code&gt;objectid&lt;/code&gt; (e.g. yyyyMMdd to be sure the job is executed only once a day)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retention" type="frankInt">
      <xs:annotation>
        <xs:documentation>The time (for type=P in days and for type=T in hours) to keep the record in the database before making it eligible for deletion by a cleanup process Default: 30 days (type=P), 4 hours (type=T)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numRetries" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of times an attempt should be made to acquire a lock, after this many times an exception is thrown when no lock could be acquired, when -1 the number of retries is unlimited Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="firstDelay" type="frankInt">
      <xs:annotation>
        <xs:documentation>The time in ms to wait before the first attempt to acquire a lock is made Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryDelay" type="frankInt">
      <xs:annotation>
        <xs:documentation>The time in ms to wait before another attempt to acquire a lock is made Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWaitTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>If &gt; 0: The time in s to wait before the INSERT statement to obtain the lock is canceled. N.B. On Oracle hitting this lockWaitTimeout may cause the error: (SQLRecoverableException) SQLState [08003], errorCode [17008] connection closed Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreTableNotExist" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; and the IBISLOCK table does not exist in the database, the process continues as if the lock was obtained</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transactionAttribute">
      <xs:annotation>
        <xs:documentation>The &lt;code&gt;transactionAttribute&lt;/code&gt; declares transactional behavior of execution. It applies both to database transactions and XA transactions.
 The pipeline uses this to start a new transaction or suspend the current one when required.
 For developers: it is equal to &lt;a href=\"https://docs.oracle.com/javaee/7/tutorial/transactions003.htm\"&gt;EJB transaction attribute&lt;/a&gt;.
 Possible values for transactionAttribute:
   &lt;table border=\"1\"&gt;
     &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td colspan=\"1\" rowspan=\"2\"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;
 											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td colspan=\"1\" rowspan=\"2\"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;
 											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td colspan=\"1\" rowspan=\"2\"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;
 											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td colspan=\"1\" rowspan=\"2\"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;
 											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td colspan=\"1\" rowspan=\"2\"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;
  										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td colspan=\"1\" rowspan=\"2\"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;
 											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;
   &lt;/table&gt; Default: Supports</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="TransactionAttributeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="transactionTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout (in seconds) of transaction started to process a message. Default: &lt;code&gt;0&lt;/code&gt; (use system default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="datasourceName" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls the use of transactions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="connectionsArePooled" />
    <xs:attribute ref="authentication" />
    <xs:attribute ref="credentials" />
    <xs:attribute ref="initialContextFactoryName" />
    <xs:attribute ref="providerURL" />
    <xs:attribute ref="securityProtocol" />
    <xs:attribute ref="urlPkgPrefixes" />
    <xs:attribute ref="jmsRealm" />
    <xs:attribute ref="principal" />
    <xs:attribute ref="jndiAuthAlias" />
    <xs:attribute ref="jndiContextPrefix" />
    <xs:attribute ref="jndiProperties" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the sender or the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.util.Locker" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="locker" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="ExitsType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Exit" minOccurs="1" maxOccurs="unbounded" type="ExitType" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.core.PipeLineExits" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="exits" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="ExitType">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the Exit that can be referenced by a PipeForward's &lt;code&gt;path&lt;/code&gt; attribute. When a Pipeline doesn't have an Exits
 element configured it will be initialized with one Exit having name READY (and state SUCCESS)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="path" type="xs:string" />
    <xs:attribute name="state" use="required">
      <xs:annotation>
        <xs:documentation>The state of the Pipeline that is returned to the Receiver for this Exit. When a Pipeline doesn't have an Exits
 element configured it will be initialized with one Exit having state SUCCESS (and name READY)</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ExitStateAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="code" type="frankInt">
      <xs:annotation>
        <xs:documentation>HTTP statusCode e.g. &lt;code&gt;500&lt;/code&gt; Default: 200</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Configures the responseRoot in the OpenAPI schema for this exit. If not set, the responseRoot value of the validator will be used. If that contains multiple (comma separated) values, the first will be used for the exits with state &lt;code&gt;SUCCESS&lt;/code&gt;, the last for the other exits.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="empty" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If using RestListener and set to &lt;code&gt;true&lt;/code&gt;, this removes the output and shows a blank page, the output is still logged in the ladybug testtool Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipWrapping" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the output will not be wrapped by the OutputWrapper. Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipValidation" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the output will not be validated or transformed by the validator. Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.core.PipeLineExit" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="exit" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="GlobalForwardsType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Forward" minOccurs="0" maxOccurs="unbounded" type="ForwardType" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.core.PipeForwards" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="globalForwards" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="FlowType">
    <xs:attribute name="recordKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key under which this flow is registered in the manager</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nextRecordHandlerManagerRef" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the manager to be used after handling this record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="recordHandlerRef" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the recordHandler to be used to transform records of the type specified in the key (optional)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="recordHandlerManagerRef" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the manager to which this flow must be added</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultHandlerRef" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the resultHandler to be used to handle the transformed result</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="openBlockBeforeLine" type="xs:string">
      <xs:annotation>
        <xs:documentation>Instructs the resultHandler to start a new block before the parsed line is processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeBlockBeforeLine" type="xs:string">
      <xs:annotation>
        <xs:documentation>Instructs the resultHandler to end the specified block before the parsed line is processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="openBlockAfterLine" type="xs:string">
      <xs:annotation>
        <xs:documentation>Instructs the resultHandler to start a new block after the parsed line is processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeBlockAfterLine" type="xs:string">
      <xs:annotation>
        <xs:documentation>Instructs the resultHandler to end the specified block after the parsed line is processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoCloseBlock" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, any open block of this type (and other nested open 'autoClose' block) is closed before a new one of the same type is opened. At a forced close, nested blocks are closed too (since 4.9) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="openBlockBeforeLineNumber" type="frankInt">
      <xs:annotation>
        <xs:documentation>If &amp;gt;0 the &lt;code&gt;openBlockBeforeLine&lt;/code&gt; instruction is only performed when the current line number is a multiple of this value Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.RecordHandlingFlow" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="flow" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="InputFieldsType">
    <xs:attribute name="value" type="xs:string" />
    <xs:attribute name="description" type="xs:string" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.InputfieldsPart" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="inputFields" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="OutputFieldsType">
    <xs:attribute name="value" type="xs:string" />
    <xs:attribute name="description" type="xs:string" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.OutputfieldsPart" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="outputFields" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="SchedulerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JobElementGroup" minOccurs="0" maxOccurs="unbounded" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.configuration.ScheduleManager" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="scheduler" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="DirectoryCleanerType">
    <xs:attribute name="directory" type="xs:string">
      <xs:annotation>
        <xs:documentation>directory to be cleaned up</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retention" type="xs:string">
      <xs:annotation>
        <xs:documentation>Minimum amount of time (with suffix 'd', 'h', 'm' or 's') that must have passed before a file will be deleted.
 You may only use one suffix! Default: 30d</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subdirectories" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, files in subdirectories will be deleted, too Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteEmptySubdirectories" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, empty subdirectories will be deleted, too Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notExistWarn" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about not existing directories Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.util.DirectoryCleaner" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="directoryCleaner" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="SapSystemsType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SapSystemElementGroup" minOccurs="0" maxOccurs="unbounded" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.configuration.extensions.SapSystems" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="sapSystems" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="JmsRealmsType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="JmsRealm" minOccurs="0" maxOccurs="unbounded" type="JmsRealmType" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jms.JmsRealmFactory" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="jmsRealms" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="JmsRealmType">
    <xs:attribute name="aliasForRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Includes another realm into this one</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realmName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Set the name of this realm&lt;br/&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Set the name of the QueueConnectionFactory&lt;br/&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topicConnectionFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Set the name of the TopicConnectionFactory&lt;br/&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string" />
    <xs:attribute name="securityProtocol" type="xs:string" />
    <xs:attribute name="urlPkgPrefixes" type="xs:string" />
    <xs:attribute name="authentication" type="xs:string" />
    <xs:attribute name="credentials" type="xs:string" />
    <xs:attribute name="initialContextFactoryName" type="xs:string" />
    <xs:attribute name="providerURL" type="xs:string" />
    <xs:attribute name="userTransactionUrl" type="xs:string" />
    <xs:attribute name="principal" type="xs:string" />
    <xs:attribute name="jndiAuthAlias" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string" />
    <xs:attribute name="jndiContextPrefix" type="xs:string" />
    <xs:attribute name="jndiProperties" type="xs:string" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jms.JmsRealm" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="jmsRealm" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="MonitoringType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="DestinationElementGroup" minOccurs="0" maxOccurs="unbounded" />
        <xs:element name="Monitor" minOccurs="0" maxOccurs="unbounded" type="MonitorType" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.monitoring.MonitorManager" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="monitoring" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="MonitorType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="TriggerElementGroup" minOccurs="0" maxOccurs="unbounded" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="destinations" type="xs:string" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of the object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="raised" type="frankBoolean" />
    <xs:attribute name="additionalHitCount" type="frankInt" />
    <xs:attribute name="type">
      <xs:simpleType>
        <xs:union memberTypes="EventTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="alarmSeverity">
      <xs:simpleType>
        <xs:union memberTypes="SeverityAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.monitoring.Monitor" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="monitor" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="AdapterfilterType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Source" minOccurs="0" maxOccurs="unbounded" type="xs:string" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="adapter" type="xs:string">
      <xs:annotation>
        <xs:documentation>Set the name of the Adapter that this AdapterFilter filters on.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.monitoring.AdapterFilter" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="adapterfilter" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="SharedResourcesType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SharedResourceElementGroup" minOccurs="0" maxOccurs="unbounded" />
        <xs:element name="HttpSession" minOccurs="0" maxOccurs="unbounded" type="HttpSessionType" />
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.configuration.SharedResources" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="sharedResources" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:group name="ListenerElementGroup">
    <xs:choice>
      <xs:element name="Listener">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="ParamElementGroup" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ListenerElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ParamElementGroup">
    <xs:choice>
      <xs:element name="Param">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="ParamElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="param" />
          <xs:attribute name="className" type="xs:string" default="org.frankframework.parameters.Parameter" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ParamElementGroupBase_2" />
    </xs:choice>
  </xs:group>
  <xs:group name="ParamElementGroupBase_2">
    <xs:choice>
      <xs:element name="BooleanParam">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BooleanParameterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="param" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DateParam">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DateParameterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="param" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="NumberParam">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="NumberParameterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="param" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="BooleanParameterType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractParameterDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="AbstractParameterDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.parameters.BooleanParameter" />
  </xs:complexType>
  <xs:group name="AbstractParameterDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="AbstractParameterDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the parameter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="value" />
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of a PipelineSession-variable. &lt;br/&gt;If specified, the value of the PipelineSession variable is used as input for
 the xpathExpression or stylesheet, instead of the current input message. &lt;br/&gt;If no xpathExpression or stylesheet are
 specified, the value itself is returned. &lt;br/&gt;If the value '*' is specified, all existing sessionkeys are added as
 parameter of which the name starts with the name of this parameter. &lt;br/&gt;If also the name of the parameter has the
 value '*' then all existing sessionkeys are added as parameter (except tsReceived)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="contextKey" />
    <xs:attribute ref="sessionKeyXPath" />
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL to a stylesheet that wil be applied to the contents of the message or the value of the session-variable.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>the XPath expression to extract the parameter value from the (xml formatted) input or session-variable.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt; a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto-detect Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace definitions for xpathExpression. Must be in the form of a comma or space separated list of
 &lt;code&gt;prefix=namespaceuri&lt;/code&gt; definitions. One entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before the stylesheet/xpathExpression is executed Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="defaultValue" />
    <xs:attribute ref="defaultValueMethods" />
    <xs:attribute ref="pattern" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain username and password, used when a &lt;code&gt;pattern&lt;/code&gt; containing {username} or {password} is specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username that is used when a &lt;code&gt;pattern&lt;/code&gt; containing {username} is specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password that is used when a &lt;code&gt;pattern&lt;/code&gt; containing {password} is specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="ignoreUnresolvablePatternElements" />
    <xs:attribute ref="minLength" />
    <xs:attribute ref="maxLength" />
    <xs:attribute ref="hidden" />
    <xs:attribute ref="mode" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="DateParameterType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractParameterDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="DateParameterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.parameters.DateParameter" />
  </xs:complexType>
  <xs:attributeGroup name="DateParameterDeclaredAttributeGroup">
    <xs:attribute name="type">
      <xs:simpleType>
        <xs:union memberTypes="ParameterTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="formatString" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used in combination with types &lt;code&gt;DATE&lt;/code&gt;, &lt;code&gt;TIME&lt;/code&gt;, &lt;code&gt;DATETIME&lt;/code&gt; and &lt;code&gt;TIMESTAMP&lt;/code&gt; to parse the raw parameter string data into an object of the respective type Default: depends on type</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="formatType">
      <xs:simpleType>
        <xs:union memberTypes="DateFormatTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="DateParameterCumulativeAttributeGroup">
    <xs:attributeGroup ref="DateParameterDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractParameterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="NumberParameterType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractParameterDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="NumberParameterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.parameters.NumberParameter" />
  </xs:complexType>
  <xs:attributeGroup name="NumberParameterDeclaredAttributeGroup">
    <xs:attribute name="decimalSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>Separate the integer part from the fractional part of a number. Default: system default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="groupingSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>In the United States, the comma is typically used for the grouping separator; however, several publication standards follow international standards in using either a space or a thin space character. Default: system default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxInclusive" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used in combination with type &lt;code&gt;number&lt;/code&gt;; if set and the value of the parameter exceeds this maximum value, this maximum value is taken</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minInclusive" type="xs:string">
      <xs:annotation>
        <xs:documentation>Used in combination with type &lt;code&gt;number&lt;/code&gt;; if set and the value of the parameter falls short of this minimum value, this minimum value is taken</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="NumberParameterCumulativeAttributeGroup">
    <xs:attributeGroup ref="NumberParameterDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractParameterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="SenderElementGroup">
    <xs:choice>
      <xs:element name="Sender">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="CacheElementGroup" />
              <xs:group ref="ParamElementGroup" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="SenderElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="CacheElementGroup">
    <xs:choice>
      <xs:element name="Cache">
        <xs:complexType>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="cache" />
          <xs:attribute name="className" type="xs:string" default="org.frankframework.cache.EhCache" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="CacheElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="CacheElementGroupBase">
    <xs:choice>
      <xs:element name="EhCache">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EhCacheType">
              <xs:attribute name="elementRole" type="xs:string" fixed="cache" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="EhCacheType">
    <xs:attributeGroup ref="EhCacheCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.cache.EhCache" />
  </xs:complexType>
  <xs:attributeGroup name="EhCacheDeclaredAttributeGroup">
    <xs:attribute name="maxElementsInMemory" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of elements in memory, before they are evicted Default: 100</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="memoryStoreEvictionPolicy" type="xs:string">
      <xs:annotation>
        <xs:documentation>Either &lt;code&gt;LRU&lt;/code&gt;=Least Recent Use,&lt;code&gt;LFU&lt;/code&gt;=Least Frequent Use or &lt;code&gt;FIFO&lt;/code&gt;=First In - First Out Default: LRU</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="eternal" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the elements in the cache are eternal, i.e. never expire Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeToLiveSeconds" type="frankInt">
      <xs:annotation>
        <xs:documentation>The amount of time &lt;i&gt;in seconds&lt;/i&gt; to live for an element from its creation date Default: 36000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeToIdleSeconds" type="frankInt">
      <xs:annotation>
        <xs:documentation>The amount of time &lt;i&gt;in seconds&lt;/i&gt; to live for an element from its last accessed or modified date Default: 36000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overflowToDisk" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the elements that are evicted from memory are spooled to disk Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxElementsOnDisk" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of elements on disk, before they are removed Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="diskPersistent" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the cache is stored on disk and survives configuration reloads &amp; JVM restarts. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="diskExpiryThreadIntervalSeconds" type="frankInt">
      <xs:annotation>
        <xs:documentation>How often to run the disk store expiry thread Default: 600</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="EhCacheCumulativeAttributeGroup">
    <xs:attributeGroup ref="EhCacheDeclaredAttributeGroup" />
    <xs:attributeGroup ref="CacheAdapterBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="CacheAdapterBaseDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the cache, will be lowercased Default: &lt;code&gt;&amp;lt;ownerName&amp;gt;&lt;/code&gt;_cache</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract cache key from request message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyXPathOutputType">
      <xs:annotation>
        <xs:documentation>output type of xpath expression to extract cache key from request message Default: text</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keyNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for keyxpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt; definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract cache key from request message. Use in combination with cacheEmptyKeys to inhibit caching for certain groups of request messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyInputSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to use as input for transformation of request message to key by keyxpath or keystylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheEmptyKeys" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether empty keys are used for caching. when set true, cache entries with empty keys can exist. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to extract value to be cached key from response message. Use in combination with cacheEmptyValues to inhibit caching for certain groups of response messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueXPathOutputType">
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="valueNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions for valuexpath. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt; definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet to extract value to be cached from response message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueInputSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key to use as input for transformation of response message to cached value by valuexpath or valuestylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheEmptyValues" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether empty values will be cached. when set true, empty cache entries can exist for any key. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:group name="SenderElementGroupBase">
    <xs:choice>
      <xs:element name="Afm2EdiFactSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Afm2EdiFactSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="AmazonS3Sender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="AmazonS3SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BisJmsSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BisJmsSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CmisSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CmisSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CommandSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CommandSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DelaySender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DelaySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DirectQuerySender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DirectQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EchoSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EchoSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbJmsSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbJmsSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ExchangeFolderSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ExchangeFolderSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FileSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FileSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FileSystemSenderWithAttachmentsSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FileSystemSenderWithAttachmentsType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedQuerySender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedResultSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedResultSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FrankSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FrankSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FtpFileSystemSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FtpFileSystemSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="HttpSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="HttpSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IMSSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IMSSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IbisJavaSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IbisJavaSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IbisLocalSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IbisLocalSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IdinSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IdinSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IdocSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IdocSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ImapSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ImapSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JavascriptSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JavascriptSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JmsSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JmsSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonXsltSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonXsltSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="KafkaSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="KafkaSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LdapSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LdapSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LocalFileSystemSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LocalFileSystemSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LogSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LogSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MQSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MQSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MailSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MailSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MessageStoreSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MessageStoreSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MongoDbSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MongoDbSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MqttSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MqttSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MultipartHttpSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MultipartHttpSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="NetStorageSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="NetStorageSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ParallelSendersSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ParallelSendersType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ReconnectSenderWrapperSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ReconnectSenderWrapperType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ReloadSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ReloadSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RestSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RestSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ResultSet2FileSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ResultSet2FileSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba1Sender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba1SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba2Sender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba2SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SapSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SapSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SchedulerSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SchedulerSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SendGridSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SendGridSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SenderSeriesSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SenderSeriesType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SenderWrapperSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SenderWrapperType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SftpFileSystemSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SftpFileSystemSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ShadowSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ShadowSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="StoredProcedureQuerySender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="StoredProcedureQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WebServiceNtlmSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WebServiceNtlmSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WebServiceSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WebServiceSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XComSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XComSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XfbSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XfbSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlJmsBrowserSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlJmsBrowserSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlQuerySender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlValidatorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlValidatorSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XsltSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XsltSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ZipWriterSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ZipWriterSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="Afm2EdiFactSenderType">
    <xs:attributeGroup ref="Afm2EdiFactSenderDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.afm.Afm2EdiFactSender" />
  </xs:complexType>
  <xs:attributeGroup name="Afm2EdiFactSenderDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of the object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string" />
    <xs:attribute name="postbus" type="xs:string" />
    <xs:attribute name="tpnummer" type="xs:string" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="AmazonS3SenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="AmazonS3SenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.AmazonS3Sender" />
  </xs:complexType>
  <xs:attributeGroup name="AmazonS3SenderDeclaredAttributeGroup">
    <xs:attribute name="accessKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Access key to access to the AWS resources owned by the account</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secretKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secret key to access to the AWS resources owned by the account</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain AWS credentials</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="chunkedEncodingDisabled" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Setting this flag will result in disabling chunked encoding for all requests. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceGlobalBucketAccessEnabled" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Option to enable or disable the usage of multi-region access point ARNs. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientRegion" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the AWS region that the client is using. Default: eu-west-1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bucketName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the bucket to access. The bucketName can also be specified by prefixing it to the object name, separated from it by |</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>Proxy port</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceEndpoint" type="xs:string">
      <xs:annotation>
        <xs:documentation>The S3 service endpoint, either with or without the protocol. (e.g. https://sns.us-west-1.amazonaws.com or sns.us-west-1.amazonaws.com)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum concurrent connections towards S3 Default: 50</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="AmazonS3SenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="AmazonS3SenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="SenderWithParametersBaseDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="SenderBaseDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:attributeGroup name="FileSystemSenderDeclaredAttributeGroup">
    <xs:attribute name="action">
      <xs:annotation>
        <xs:documentation>If parameter [action] is set, then the attribute action value will be overridden with the value of the parameter.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="FileSystemActionAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filename to operate on. If not set, the parameter filename is used. If that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>Destination for move, copy or rename. If not set, the parameter destination is used. If that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;: if a non-existing folder is part of the fileName, it will be created. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, for actions create, write, move, copy or rename, the destination file is overwritten if it already exists Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="frankInt">
      <xs:annotation>
        <xs:documentation>For action=append: If set to a positive number, the file is rotated each day, and this number of files is kept. The inputFolder must point to the directory where the file resides Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>For action=append: If set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept. Size is specified in plain bytes, suffixes like 'K', 'M' or 'G' are not recognized. The inputFolder must point to the directory where the file resides Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="frankInt">
      <xs:annotation>
        <xs:documentation>For the actions write and append, with rotateSize&gt;0: the number of backup files that is kept. The inputFolder must point to the directory where the file resides Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to look for in inputFolder e.g. '*.inp'. Works with actions move, copy, delete and list</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeWildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to be excluded when looking in inputFolder. Works with actions move, copy, delete and list</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNonEmptyFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt; then the folder and the content of the non empty folder will be deleted.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeLineSeparator" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt; then the system specific line separator will be appended to the file after executing the action. Works with actions write and append Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset to be used for read and write action</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteEmptyFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to true then the folder will be deleted if it is empty after processing the action. Works with actions delete, readDelete and move</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat">
      <xs:annotation>
        <xs:documentation>OutputFormat Default: XML</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DocumentFormatAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="typeFilter">
      <xs:annotation>
        <xs:documentation>Filter for action &lt;code&gt;list&lt;/code&gt;. Specify &lt;code&gt;FILES_ONLY&lt;/code&gt;, &lt;code&gt;FOLDERS_ONLY&lt;/code&gt; or &lt;code&gt;FILES_AND_FOLDERS&lt;/code&gt;. Default: FILES_ONLY</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="TypeFilterAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FileSystemSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="FileSystemSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="BisJmsSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JmsSenderDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="BisJmsSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.bis.BisJmsSender" />
  </xs:complexType>
  <xs:attributeGroup name="BisJmsSenderDeclaredAttributeGroup">
    <xs:attribute name="responseXPath" type="xs:string" />
    <xs:attribute name="responseNamespaceDefs" type="xs:string" />
    <xs:attribute name="messageHeaderInSoapBody" type="frankBoolean" />
    <xs:attribute name="resultInPayload" type="frankBoolean" />
    <xs:attribute name="errorListSessionKey" type="xs:string" />
    <xs:attribute name="externalRefToMessageIdSessionKey" type="xs:string" />
    <xs:attribute name="conversationIdSessionKey" type="xs:string" />
    <xs:attribute name="requestNamespace" type="xs:string" />
    <xs:attribute name="removeResponseNamespaces" type="frankBoolean" />
  </xs:attributeGroup>
  <xs:attributeGroup name="BisJmsSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="BisJmsSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JmsSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JmsSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JmsSenderDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JmsSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jms.JmsSender" />
  </xs:complexType>
  <xs:group name="JmsSenderDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="JmsSenderDeclaredAttributeGroup">
    <xs:attribute ref="destinationParam" />
    <xs:attribute name="synchronous" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the sender operates in RR mode: A reply is expected, either on the queue specified in &lt;code&gt;replyToName&lt;/code&gt;, or on a dynamically generated temporary queue Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="replyToName" />
    <xs:attribute ref="linkMethod" />
    <xs:attribute name="replyTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>(Only for &lt;code&gt;synchronous=true&lt;/code&gt;). Maximum time in ms to wait for a reply. 0 means no timeout. Default: 5000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="messageType" />
    <xs:attribute name="deliveryMode">
      <xs:annotation>
        <xs:documentation>Controls mode that messages are sent with Default: not set by application</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DeliveryModeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute ref="priority" />
    <xs:attribute name="soap" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, messages sent are put in a SOAP envelope Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="encodingStyleURI" />
    <xs:attribute ref="serviceNamespaceURI" />
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>SOAPAction string sent as message property</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="soapHeaderParam" />
    <xs:attribute ref="replySoapHeaderSessionKey" />
    <xs:attribute ref="responseHeadersToSessionKeys" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JmsSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="JmsSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JMSFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JMSFacadeType">
    <xs:attributeGroup ref="JMSFacadeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jms.JMSFacade" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JMSFacadeDeclaredAttributeGroup">
    <xs:attribute ref="messageClass" />
    <xs:attribute name="destinationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the JMS destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="destinationType" />
    <xs:attribute ref="acknowledgeMode" />
    <xs:attribute ref="persistent" />
    <xs:attribute ref="subscriberType" />
    <xs:attribute ref="queueConnectionFactoryName" />
    <xs:attribute ref="topicConnectionFactoryName" />
    <xs:attribute ref="jmsTransacted" />
    <xs:attribute name="transacted" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether messages are send under transaction control.
 If set &lt;code&gt;true&lt;/code&gt;, messages are committed or rolled back under control of an XA-transaction. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="correlationIdToHex" />
    <xs:attribute ref="correlationIdToHexPrefix" />
    <xs:attribute ref="messageTimeToLive" />
    <xs:attribute ref="correlationIdMaxLength" />
    <xs:attribute ref="messageSelector" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for authentication to JMS server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="lookupDestination" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JMSFacadeCumulativeAttributeGroup">
    <xs:attributeGroup ref="JMSFacadeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JndiBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JndiBaseType">
    <xs:attributeGroup ref="JndiBaseDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jndi.JndiBase" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JndiBaseDeclaredAttributeGroup">
    <xs:attribute ref="authentication" />
    <xs:attribute ref="credentials" />
    <xs:attribute ref="initialContextFactoryName" />
    <xs:attribute ref="providerURL" />
    <xs:attribute ref="securityProtocol" />
    <xs:attribute ref="urlPkgPrefixes" />
    <xs:attribute ref="jmsRealm" />
    <xs:attribute ref="principal" />
    <xs:attribute ref="jndiAuthAlias" />
    <xs:attribute ref="jndiContextPrefix" />
    <xs:attribute ref="jndiProperties" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the sender or the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="CmisSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="CmisSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.cmis.CmisSender" />
  </xs:complexType>
  <xs:attributeGroup name="CmisSenderDeclaredAttributeGroup">
    <xs:attribute name="action" use="required">
      <xs:annotation>
        <xs:documentation>Specifies action to perform</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="CmisActionAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of concurrent connections Default: 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>READ_TIMEOUT timeout in MS.
 Defaults to 10000, inherited from HttpSender#setTimeout. Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL to connect to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="repository" type="xs:string">
      <xs:annotation>
        <xs:documentation>Repository ID</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bindingType" use="required">
      <xs:annotation>
        <xs:documentation>BindingType CMIS protocol to use</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="BindingTypesAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="fileSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;action=create&lt;/code&gt; the sessionKey that contains the file to use. If &lt;code&gt;action=get&lt;/code&gt; and &lt;code&gt;getProperties=true&lt;/code&gt; the sessionKey to store the result in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filenameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;action=create&lt;/code&gt; the session key that contains the name of the file to use. If not set, the value of the property &lt;code&gt;filename&lt;/code&gt; from the input message is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMediaType" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;action=create&lt;/code&gt; the mime type used to store the document when it's not set in the input message by a property Default: 'application/octet-stream'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getProperties" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;action=get&lt;/code&gt;). If true, the content of the document is put to &lt;code&gt;FileSessionKey&lt;/code&gt; and all document properties are put in the result as a xml string Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getDocumentContent" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;action=get&lt;/code&gt;). If true, the attachment for the document is the sender result or, if set, stored in &lt;code&gt;fileSessionKey&lt;/code&gt;. If false, only the properties are returned Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useRootFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;action=create&lt;/code&gt;). If true, the document is created in the root folder of the repository. Otherwise the document is created in the repository Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnNotFound" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;action=get&lt;/code&gt;) result returned when no document was found for the given id (e.g. '[not_found]'). If empty then 'notFound' is returned as forward name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keepSession" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, the session is not closed at the end and it will be used in the next call Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overrideEntryPointWSDL" type="xs:string">
      <xs:annotation>
        <xs:documentation>Override entrypoint WSDL by reading it from the classpath, overrides url attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Resource url to keystore or certificate. If none specified, the JVMs default keystore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType">
      <xs:annotation>
        <xs:documentation>Type of keystore Default: pkcs12</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to obtain keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to access keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias to obtain specific certificate or key in keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Resource url to truststore. If none specified, the JVMs default truststore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType">
      <xs:annotation>
        <xs:documentation>Type of truststore Default: jks</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to access truststore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Trust manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the hostname in the certificate will be checked against the actual hostname of the peer</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, self signed certificates are accepted Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, CertificateExpiredExceptions are ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy host url</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>Proxy host port Default: 80</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy Username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy Password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CmisSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="CmisSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CommandSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="CommandSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.CommandSender" />
  </xs:complexType>
  <xs:attributeGroup name="CommandSenderDeclaredAttributeGroup">
    <xs:attribute name="command" type="xs:string">
      <xs:annotation>
        <xs:documentation>The command to be executed. Note: Executing a command in WAS requires &amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt; execute permission to avoid that provide the absolute path of the command. Absolute path can be found with the following command 'which -a {commandName}'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of seconds to execute a command. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commandWithArguments" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>In case the command that will be executed contains arguments then this flag should be set to true Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CommandSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="CommandSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="DelaySenderType">
    <xs:attributeGroup ref="DelaySenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.DelaySender" />
  </xs:complexType>
  <xs:attributeGroup name="DelaySenderDeclaredAttributeGroup">
    <xs:attribute name="delayTime" type="frankInt">
      <xs:annotation>
        <xs:documentation>The time &lt;i&gt;in milliseconds&lt;/i&gt; the thread will be put to sleep Default: 5000 [ms]</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="DelaySenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="DelaySenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="DirectQuerySenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JdbcSenderBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JdbcQuerySenderBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.DirectQuerySender" />
  </xs:complexType>
  <xs:group name="JdbcSenderBaseDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="JdbcSenderBaseDeclaredAttributeGroup">
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of seconds the JDBC driver will wait for a statement object to execute. If the limit is exceeded, a TimeoutException is thrown. A value of 0 means execution time is not limited Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcSenderBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcSenderBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JdbcFacadeType">
    <xs:attributeGroup ref="JdbcFacadeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.JdbcFacade" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JdbcFacadeDeclaredAttributeGroup">
    <xs:attribute ref="datasourceName" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to authenticate when connecting to database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>User name for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication when connecting to database, when none found from &lt;code&gt;authAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transacted" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls the use of transactions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="connectionsArePooled" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcFacadeCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcFacadeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JndiBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcQuerySenderBaseDeclaredAttributeGroup">
    <xs:attribute ref="packageContent" />
    <xs:attribute name="queryType">
      <xs:annotation>
        <xs:documentation>Type of query to be executed Default: OTHER</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="QueryTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute ref="scalar" />
    <xs:attribute ref="scalarExtended" />
    <xs:attribute name="maxRows" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of rows to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries, -1 means unlimited rows Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startRow" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of the first row to be returned from the output of &lt;code&gt;select&lt;/code&gt; queries. Rows before this are skipped from the output. Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="nullValue" />
    <xs:attribute ref="resultQuery" />
    <xs:attribute name="columnsReturned" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of columns whose values are to be returned. Works only if the driver implements jdbc 3.0 getGeneratedKeys().
 Note: not all drivers support multiple values and returned field names may vary between drivers.
 Works for H2 and Oracle. Could work for MS_SQL with a single identity column, with name GENERATED_KEYS, if a identity has been generated. Not supported for other DBMSes.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="useNamedParams" />
    <xs:attribute ref="includeFieldDefinition" />
    <xs:attribute ref="trimSpaces" />
    <xs:attribute name="rowIdSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If specified, the rowid of the processed row is put in the pipelinesession under the specified key (only applicable for &lt;code&gt;querytype=other&lt;/code&gt;). &lt;b&gt;Note:&lt;/b&gt; If multiple rows are processed a SqlException is thrown.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="streamResultToServlet" />
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockRows" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="frankInt">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="synchronous" />
    <xs:attribute name="blobColumn" type="frankInt">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateBlob': column that contains the BLOB to be updated Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateBlob': key of session variable that contains the data (String or InputStream) to be loaded to the BLOB. When empty, the input of the pipe, which then must be a String, is used.
 For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the BLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobBase64Direction">
      <xs:annotation>
        <xs:documentation>controls whether the streamed blobdata will need to be base64 &lt;code&gt;encode&lt;/code&gt; or &lt;code&gt;decode&lt;/code&gt; or not.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data.
 If blobCharset and blobSmartGet are not set, BLOBs are returned as bytes. Before version 7.6, blobs were base64 encoded after being read to accommodate for the fact that senders need to return a String. This is no longer the case</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobColumn" type="frankInt">
      <xs:annotation>
        <xs:documentation>Only for querytype 'updateClob': column that contains the CLOB to be updated Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clobSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>For querytype 'updateClob': key of session variable that contains the CLOB (String or InputStream) to be loaded to the CLOB. When empty, the input of the pipe, which then must be a String, is used.
 For querytype 'select': key of session variable that contains the OutputStream, Writer or Filename to write the CLOB to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="closeInputstreamOnExit" />
    <xs:attribute ref="closeOutputstreamOnExit" />
    <xs:attribute ref="streamCharset" />
    <xs:attribute name="avoidLocking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="prettyPrint" />
    <xs:attribute name="outputFormat">
      <xs:annotation>
        <xs:documentation>The type of output. If not set then defaults to old-style XML. If set to XML, new-style XML is used. EXPERIMENTAL: datatypes like numbers are not yet rendered correctly Default: false</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DocumentFormatAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcQuerySenderBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcQuerySenderBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcSenderBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="EchoSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="EchoSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.EchoSender" />
  </xs:complexType>
  <xs:attributeGroup name="EchoSenderDeclaredAttributeGroup">
    <xs:attribute name="synchronous" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>hack to allow to introduce a correlationid Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="EchoSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="EchoSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="EsbJmsSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JmsSenderDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="EsbJmsSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.esb.EsbJmsSender" />
  </xs:complexType>
  <xs:attributeGroup name="EsbJmsSenderDeclaredAttributeGroup">
    <xs:attribute name="messageProtocol">
      <xs:annotation>
        <xs:documentation>protocol of ESB service to be called</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="MessageProtocolAttributeValuesType_2 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>receiver timeout, in milliseconds Default: 20000 (20s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOut" type="frankInt">
      <xs:annotation>
        <xs:documentation>receiver timeout, in milliseconds. Default: 20000 (20s)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deliveryMode">
      <xs:annotation>
        <xs:documentation>if messageProtocol=&lt;code&gt;RR&lt;/code&gt; then &lt;code&gt;deliveryMode&lt;/code&gt; defaults to &lt;code&gt;NON_PERSISTENT&lt;/code&gt; Default: not set by application</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DeliveryModeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>if messageProtocol=&lt;code&gt;RR&lt;/code&gt; then &lt;code&gt;replyTimeout&lt;/code&gt; defaults to &lt;code&gt;timeout&lt;/code&gt; Default: 5000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if messageProtocol=&lt;code&gt;RR&lt;/code&gt; then &lt;code&gt;synchronous&lt;/code&gt; defaults to &lt;code&gt;true&lt;/code&gt; Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>if messageProtocol=&lt;code&gt;RR&lt;/code&gt; then if &lt;code&gt;soapAction&lt;/code&gt; is empty then it is derived from the element MessageHeader/To/Location in the SOAP header of the input message (if $messagingLayer='P2P' then '$applicationFunction' else '$operationName_$operationVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="EsbJmsSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="EsbJmsSenderDeclaredAttributeGroup" />
    <xs:attribute ref="destinationParam" />
    <xs:attribute ref="replyToName" />
    <xs:attribute ref="linkMethod" />
    <xs:attribute ref="messageType" />
    <xs:attribute ref="priority" />
    <xs:attribute name="soap" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, messages sent are put in a SOAP envelope Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="encodingStyleURI" />
    <xs:attribute ref="serviceNamespaceURI" />
    <xs:attribute ref="soapHeaderParam" />
    <xs:attribute ref="replySoapHeaderSessionKey" />
    <xs:attribute ref="responseHeadersToSessionKeys" />
    <xs:attributeGroup ref="JMSFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ExchangeFolderSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ExchangeFolderSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.ExchangeFolderSender" />
  </xs:complexType>
  <xs:attributeGroup name="ExchangeFolderSenderDeclaredAttributeGroup">
    <xs:attribute name="mailAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>The mail address of the mailbox connected to (also used for auto discovery)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>Url of the Exchange server. Set to e.g. https://outlook.office365.com/EWS/Exchange.asmx to speed up startup, leave empty to use autodiscovery</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Client ID that represents a registered application in Azure AD which could be found at Azure AD -&gt; App Registrations -&gt; MyApp -&gt; Overview.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientSecret" type="xs:string">
      <xs:annotation>
        <xs:documentation>Client secret that belongs to registered application in Azure AD which could be found at Azure AD -&gt; App Registrations -&gt; MyApp -&gt; Certificates and Secrets</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tenantId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Tenant ID that represents the tenant in which the registered application exists within Azure AD which could be found at Azure AD -&gt; App Registrations -&gt; MyApp -&gt; Overview.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username for authentication to mail server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication to mail server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain client ID and secret or username and password for authentication to Exchange mail server.
 If the attribute tenantId is empty, the deprecated Basic Authentication method is used.
 If the attribute tenantId is not empty, the username and password are treated as the client ID and secret.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filter" type="xs:string">
      <xs:annotation>
        <xs:documentation>If empty, all mails are retrieved. If set to &lt;code&gt;NDR&lt;/code&gt; only Non-Delivery Report mails ('bounces') are retrieved</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyAddressFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of fields to try as response address Default: replyTo,from,sender,Return-Path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>proxy port Default: 8080</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy authAlias</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mailboxObjectSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>Separator character used when working with multiple mailboxes, specified before the separator in the object name &lt;code&gt;test@organisation.com|My sub folder&lt;/code&gt; or &lt;code&gt;test@organisation.com|AAMkADljZDMxYzIzLTFlMjYtNGY4Mi1hM2Y1LTc2MjE5ZjIyZmMyNABGAAAAAAAu/9EmV5M6QokBRZwID1Q6BwDXQXY+F44hRbDfTB9v8jRfAAAEUqUVAADXQXY+F44hRbDfTB9v8jRfAAKA4F+pAAA=&lt;/code&gt;.
 Please consider when moving emails across mailboxes that there will be a null value returned instead of the newly created identifier. Default: |</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Resource url to keystore or certificate. If none specified, the JVMs default keystore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType">
      <xs:annotation>
        <xs:documentation>Type of keystore Default: pkcs12</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to obtain keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to access keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias to obtain specific certificate or key in keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Resource url to truststore. If none specified, the JVMs default truststore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType">
      <xs:annotation>
        <xs:documentation>Type of truststore Default: jks</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to access truststore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Trust manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the hostname in the certificate will be checked against the actual hostname of the peer</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, self signed certificates are accepted Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, CertificateExpiredExceptions are ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ExchangeFolderSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="ExchangeFolderSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FileSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="FileSenderDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FileSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.FileSender" />
  </xs:complexType>
  <xs:group name="FileSenderDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="FileSenderDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of the object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FileSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="FileSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileHandlerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FileHandlerType">
    <xs:attributeGroup ref="FileHandlerDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.util.FileHandler" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="FileHandlerDeclaredAttributeGroup">
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>the charset to be used when transforming a string to a byte array and/or the other way around Default: the value of the system property file.encoding</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;stream&lt;/code&gt; or &lt;code&gt;base64&lt;/code&gt; Default: string</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileSource" type="xs:string">
      <xs:annotation>
        <xs:documentation>either &lt;code&gt;filesystem&lt;/code&gt; or &lt;code&gt;classpath&lt;/code&gt; (classpath will only work for actions 'read' and 'info' and for 'info' only when resources are available as a file (i.e. doesn't work for resources in jar files and war files which are deployed without being extracted by the application server)) Default: filesystem</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="actions" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets actions the pipe has to perform. Possible action values:
 &lt;ul&gt;
   &lt;li&gt;write: create a new file and write input to it&lt;/li&gt;
   &lt;li&gt;write_append: create a new file if it does not exist, otherwise append to existing file; then write input to it&lt;/li&gt;
   &lt;li&gt;create: create a new file, but do not write anything to it&lt;/li&gt;
   &lt;li&gt;read: read from file&lt;/li&gt;
   &lt;li&gt;delete: delete the file&lt;/li&gt;
   &lt;li&gt;read_delete: read the contents, then delete (when outputType is stream the file is deleted after the stream is read)&lt;/li&gt;
   &lt;li&gt;encode: encode base64&lt;/li&gt; &lt;li&gt;decode: decode base64&lt;/li&gt;
   &lt;li&gt;list: returns the files and directories in the directory that satisfy the specified filter (see Dir2Xml). If a directory is not specified, the fileName is expected to include the directory&lt;/li&gt;
   &lt;li&gt;info: returns information about the file&lt;/li&gt;
 &lt;/ul&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="directory" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the directory in which the file resides or has to be created</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets suffix of the file that is written (only used if filename and filenamesession are not set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileName" type="xs:string" />
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets filename of the file that is written</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileNameSessionKey" type="xs:string" />
    <xs:attribute name="filenameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets filenameSessionKey the session key that contains the name of the file to be created (only used if filename is not set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="testExists" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>test if the specified directory exists at configure() Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createDirectory" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the directory to read from or write to is created if it does not exist Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeLineSeparator" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a line separator is written after the content is written Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="testCanWrite" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a test is performed to find out if a temporary file can be created and deleted in the specified directory (only used if directory is set and combined with the action write, write_append or create) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipBOM" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, a possible bytes order mark (bom) at the start of the file is skipped (only used for the action read and encoding uft-8) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteEmptyDirectory" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when actions=delete) when set to &lt;code&gt;true&lt;/code&gt;, the directory from which a file is deleted is also deleted when it contains no other files Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamResultToServlet" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when outputtype=stream) if set, the result is streamed to the httpservletresponse object Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="FileSystemSenderWithAttachmentsType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.filesystem.FileSystemSenderWithAttachments" />
  </xs:complexType>
  <xs:complexType name="FixedQuerySenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JdbcSenderBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FixedQuerySenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.FixedQuerySender" />
  </xs:complexType>
  <xs:attributeGroup name="FixedQuerySenderDeclaredAttributeGroup">
    <xs:attribute name="query" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The SQL query text to be executed each time sendMessage() is called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="batchSize" />
  </xs:attributeGroup>
  <xs:attributeGroup name="FixedQuerySenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="FixedQuerySenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcQuerySenderBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FixedResultSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FixedResultSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.FixedResultSender" />
  </xs:complexType>
  <xs:attributeGroup name="FixedResultSenderDeclaredAttributeGroup">
    <xs:attribute name="substituteVars" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>should values between ${ and } be resolved from the pipelinesession Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the file containing the result message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnString" type="xs:string">
      <xs:annotation>
        <xs:documentation>returned message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceFrom" type="xs:string" />
    <xs:attribute name="replaceTo" type="xs:string" />
    <xs:attribute name="styleSheetName" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="FixedResultSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="FixedResultSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FrankSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FrankSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.FrankSender" />
  </xs:complexType>
  <xs:attributeGroup name="FrankSenderDeclaredAttributeGroup">
    <xs:attribute name="synchronous" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Synchronous or Asynchronous execution of the call to other adapter or system.
 &lt;br/&gt;
 Set to &lt;code&gt;false&lt;/code&gt; to make the call asynchronously. This means that the current adapter
 continues with the next pipeline and the result of the sub-adapter that was called, or other system that was called,
 is ignored. Instead, the input message will be returned as the result message. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scope">
      <xs:annotation>
        <xs:documentation>Scope decides if the FrankSender calls another adapter, or another Java program running in the same JVM.
 &lt;br/&gt;
 It is possible to set this via a parameter. If the parameter is defined but the value at runtime
 is empty, then the value set via this attribute will be used as default. Default: ADAPTER</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ScopeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="target" type="xs:string">
      <xs:annotation>
        <xs:documentation>Target: service-name of service in other application that should be called, or name of adapter to be called.
 If the adapter is in another configuration, prefix the adapter name with the name of that configuration and a slash ("{@code /}").
 &lt;br/&gt;
 It is possible to set a target at runtime via a parameter.
 &lt;br/&gt;
 If a parameter with name target exists but has no value, then the target configured
 via the attribute will be used as a default.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnedSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of keys of session variables that will be returned to caller, for correct results as well as for erroneous results.
 The set of available sessionKeys to be returned might be limited by the returnedSessionKeys attribute of the corresponding JavaListener.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FrankSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="FrankSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FtpFileSystemSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FtpFileSystemSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.FtpFileSystemSender" />
  </xs:complexType>
  <xs:attributeGroup name="FtpFileSystemSenderDeclaredAttributeGroup">
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>pathname of the file or directory to list. Default: Home folder of the ftp user</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name or ip address of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>Port number of remote host Default: 21</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the user to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy hostname</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>Proxy port Default: 1080</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ftpType">
      <xs:annotation>
        <xs:documentation>FTP protocol to use Default: FTP</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="FtpTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="fileType">
      <xs:simpleType>
        <xs:union memberTypes="FileTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="passive" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, passive ftp is used: before data is sent, a pasv command is issued, and the connection is set up by the server Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyTransportType">
      <xs:annotation>
        <xs:documentation>(ftps) Transport type in case of sftp Default: SOCKS5</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="TransportTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystore" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Resource url to keystore or certificate to be used for authentication. If none specified, the JVMs default keystore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType">
      <xs:annotation>
        <xs:documentation>(ftps) Type of keystore Default: pkcs12</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Authentication alias used to obtain keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Default password to access keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Alias to obtain specific certificate or key in keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Authentication alias to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Default password to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Key manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Resource url to truststore to be used for authenticating peer. If none specified, the JVMs default truststore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType">
      <xs:annotation>
        <xs:documentation>(ftps) Type of truststore Default: jks</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Authentication alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Default password to access truststore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Trust manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(ftps) If &lt;code&gt;true&lt;/code&gt;, the hostname in the certificate will be checked against the actual hostname of the peer</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(ftps) If &lt;code&gt;true&lt;/code&gt;, self signed certificates are accepted Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(ftps) If &lt;code&gt;true&lt;/code&gt;, CertificateExpiredExceptions are ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prot">
      <xs:annotation>
        <xs:documentation>Sets the &lt;code&gt;Data Channel Protection Level&lt;/code&gt;. Default: C</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ProtAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FtpFileSystemSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="FtpFileSystemSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="HttpSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="HttpSenderBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="HttpSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.http.HttpSender" />
  </xs:complexType>
  <xs:attributeGroup name="HttpSenderDeclaredAttributeGroup">
    <xs:attribute name="postType">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;methodType&lt;/code&gt;=&lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;PATCH&lt;/code&gt;, the type of post request Default: RAW</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="PostTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="paramsInUrl" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If false and &lt;code&gt;methodType&lt;/code&gt;=&lt;code&gt;POST&lt;/code&gt;, request parameters are put in the request body instead of in the url Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="firstBodyPartName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;methodType=POST&lt;/code&gt; and &lt;code&gt;postType=URLENCODED&lt;/code&gt;, &lt;code&gt;FORM-DATA&lt;/code&gt; or &lt;code&gt;MTOM&lt;/code&gt;) Prepends a new BodyPart using the specified name and uses the input of the Sender as content</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set and &lt;code&gt;methodType=POST&lt;/code&gt; and &lt;code&gt;paramsInUrl=false&lt;/code&gt;, a multipart/form-data entity is created instead of a request body.
 For each part element in the session key a part in the multipart entity is created. Part elements can contain the following attributes:
 &lt;ul&gt;
 &lt;li&gt;name: optional, used as 'filename' in Content-Disposition&lt;/li&gt;
 &lt;li&gt;sessionKey: mandatory, refers to contents of part&lt;/li&gt;
 &lt;li&gt;mimeType: optional MIME type&lt;/li&gt;
 &lt;/ul&gt;
 The name of the part is determined by the name attribute, unless that is empty, or the contents is binary. In those cases the sessionKey name is used as name of the part.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mtomContentTransferEncoding" type="xs:string" />
    <xs:attribute name="encodeMessages" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="treatInputMessageAsParameters" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the input will be added to the URL for &lt;code&gt;methodType=GET&lt;/code&gt;, or for &lt;code&gt;methodType=POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; or
 &lt;code&gt;PATCH&lt;/code&gt; if &lt;code&gt;postType=RAW&lt;/code&gt;. This used to be the default behaviour in framework version 7.7 and earlier Default: for methodType=&lt;code&gt;GET&lt;/code&gt;: &lt;code&gt;false&lt;/code&gt;,&lt;br/&gt;for methodTypes &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="HttpSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="HttpSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="HttpSenderBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="HttpSenderBaseDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="HttpSenderBaseDeclaredAttributeGroup">
    <xs:attribute ref="url" />
    <xs:attribute ref="urlParam" />
    <xs:attribute ref="methodType" />
    <xs:attribute ref="contentType" />
    <xs:attribute ref="charSet" />
    <xs:attribute ref="certificate" />
    <xs:attribute ref="certificateType" />
    <xs:attribute ref="certificateAuthAlias" />
    <xs:attribute ref="certificatePassword" />
    <xs:attribute ref="headersParams" />
    <xs:attribute ref="parametersToSkipWhenEmpty" />
    <xs:attribute ref="xhtml" />
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when xHtml=&lt;code&gt;true&lt;/code&gt;) stylesheet to apply to the HTML response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="resultStatusCodeSessionKey" />
    <xs:attribute ref="sharedResourceRef" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of the object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="HttpSenderBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="HttpSenderBaseDeclaredAttributeGroup" />
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout in ms of obtaining a connection/result. Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="maxConnections" />
    <xs:attribute ref="maxExecuteRetries" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="authDomain" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="tokenEndpoint" />
    <xs:attribute ref="tokenExpiry" />
    <xs:attribute ref="clientAlias" />
    <xs:attribute ref="clientId" />
    <xs:attribute ref="clientSecret" />
    <xs:attribute ref="scope" />
    <xs:attribute ref="authenticatedTokenRequest" />
    <xs:attribute ref="proxyHost" />
    <xs:attribute ref="proxyPort" />
    <xs:attribute ref="proxyAuthAlias" />
    <xs:attribute ref="proxyUsername" />
    <xs:attribute ref="proxyPassword" />
    <xs:attribute ref="proxyRealm" />
    <xs:attribute ref="prefillProxyAuthCache" />
    <xs:attribute ref="disableCookies" />
    <xs:attribute ref="keystore" />
    <xs:attribute ref="keystoreType" />
    <xs:attribute ref="keystoreAuthAlias" />
    <xs:attribute ref="keystorePassword" />
    <xs:attribute ref="keyManagerAlgorithm" />
    <xs:attribute ref="keystoreAlias" />
    <xs:attribute ref="keystoreAliasAuthAlias" />
    <xs:attribute ref="keystoreAliasPassword" />
    <xs:attribute ref="truststore" />
    <xs:attribute ref="truststoreAuthAlias" />
    <xs:attribute ref="truststorePassword" />
    <xs:attribute ref="truststoreType" />
    <xs:attribute ref="trustManagerAlgorithm" />
    <xs:attribute ref="verifyHostname" />
    <xs:attribute ref="allowSelfSignedCertificates" />
    <xs:attribute ref="ignoreCertificateExpiredException" />
    <xs:attribute ref="followRedirects" />
    <xs:attribute ref="ignoreRedirects" />
    <xs:attribute ref="staleChecking" />
    <xs:attribute ref="staleTimeout" />
    <xs:attribute ref="connectionTimeToLive" />
    <xs:attribute ref="connectionIdleTimeout" />
    <xs:attribute ref="protocol" />
    <xs:attribute ref="supportedCipherSuites" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:attributeGroup name="HttpSessionBaseDeclaredAttributeGroup">
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout in ms of obtaining a connection/result. Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="maxConnections" />
    <xs:attribute ref="maxExecuteRetries" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="authDomain" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="tokenEndpoint" />
    <xs:attribute ref="tokenExpiry" />
    <xs:attribute ref="clientAlias" />
    <xs:attribute ref="clientId" />
    <xs:attribute ref="clientSecret" />
    <xs:attribute ref="scope" />
    <xs:attribute ref="authenticatedTokenRequest" />
    <xs:attribute ref="proxyHost" />
    <xs:attribute ref="proxyPort" />
    <xs:attribute ref="proxyAuthAlias" />
    <xs:attribute ref="proxyUsername" />
    <xs:attribute ref="proxyPassword" />
    <xs:attribute ref="proxyRealm" />
    <xs:attribute ref="prefillProxyAuthCache" />
    <xs:attribute ref="disableCookies" />
    <xs:attribute ref="keystore" />
    <xs:attribute ref="keystoreType" />
    <xs:attribute ref="keystoreAuthAlias" />
    <xs:attribute ref="keystorePassword" />
    <xs:attribute ref="keyManagerAlgorithm" />
    <xs:attribute ref="keystoreAlias" />
    <xs:attribute ref="keystoreAliasAuthAlias" />
    <xs:attribute ref="keystoreAliasPassword" />
    <xs:attribute ref="truststore" />
    <xs:attribute ref="truststoreAuthAlias" />
    <xs:attribute ref="truststorePassword" />
    <xs:attribute ref="truststoreType" />
    <xs:attribute ref="trustManagerAlgorithm" />
    <xs:attribute ref="verifyHostname" />
    <xs:attribute ref="allowSelfSignedCertificates" />
    <xs:attribute ref="ignoreCertificateExpiredException" />
    <xs:attribute ref="followRedirects" />
    <xs:attribute ref="ignoreRedirects" />
    <xs:attribute ref="staleChecking" />
    <xs:attribute ref="staleTimeout" />
    <xs:attribute ref="connectionTimeToLive" />
    <xs:attribute ref="connectionIdleTimeout" />
    <xs:attribute ref="protocol" />
    <xs:attribute ref="supportedCipherSuites" />
    <xs:attribute name="name" type="xs:string" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="IMSSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JmsSenderDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="IMSSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.ibm.IMSSender" />
  </xs:complexType>
  <xs:attributeGroup name="IMSSenderDeclaredAttributeGroup">
    <xs:attribute name="transactionCode" type="xs:string">
      <xs:annotation>
        <xs:documentation>The transaction code that should be added in the header, must be 8 characters</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IMSSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="IMSSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JmsSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IbisJavaSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="IbisJavaSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.IbisJavaSender" />
  </xs:complexType>
  <xs:attributeGroup name="IbisJavaSenderDeclaredAttributeGroup">
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>ServiceName of the JavaListener that should be called.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to specify ServiceName of the JavaListener that should be called.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnedSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of keys of session variables that will be returned to caller, for correct results as well as for erroneous results.
 The set of available sessionKeys to be returned might be limited by the returnedSessionKeys attribute of the corresponding JavaListener.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dispatchType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Set to 'DLL' to make the dispatcher communicate with a DLL set on the classpath</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IbisJavaSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="IbisJavaSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IbisLocalSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="IbisLocalSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.IbisLocalSender" />
  </xs:complexType>
  <xs:attributeGroup name="IbisLocalSenderDeclaredAttributeGroup">
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the WebServiceListener that should be called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="javaListener" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the JavaListener that should be called (will be ignored when javaListenerSessionKey is set)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="javaListenerSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the sessionKey which holds the name of the JavaListener that should be called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnedSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of keys of session variables that will be returned to caller, for correct results as well as for erroneous results.
 The set of available sessionKeys to be returned might be limited by the returnedSessionKeys attribute of the corresponding JavaListener.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="synchronous" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;false&lt;/code&gt;, the call is made asynchronously. This implies &lt;code&gt;isolated=true&lt;/code&gt; Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isolated" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the call is made in a separate thread, possibly using separate transaction Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkDependency" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the sender waits upon open until the called JavaListener is opened Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dependencyTimeOut" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum time (in seconds) the sender waits for the listener to start. A value of -1 indicates to wait indefinitely Default: 60</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwJavaListenerNotFoundException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;false&lt;/code&gt;, the xml-string \"&amp;lt;error&amp;gt;could not find JavaListener [...]&amp;lt;/error&amp;gt;\" is returned instead of throwing a senderexception Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IbisLocalSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="IbisLocalSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IdinSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="IdinSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.idin.IdinSender" />
  </xs:complexType>
  <xs:attributeGroup name="IdinSenderDeclaredAttributeGroup">
    <xs:attribute name="action">
      <xs:simpleType>
        <xs:union memberTypes="ActionAttributeValuesType_2 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="merchantID" type="xs:string">
      <xs:annotation>
        <xs:documentation>This is the contract number for iDIN the Merchant received from its Acquirer after registration,
 and is used to unambiguously identify the Merchant. This number is 10-digits long, where the
 first four digits are equal to the AcquirerID.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="merchantSubID" type="frankInt">
      <xs:annotation>
        <xs:documentation>The SubID that uniquely defines the name and address of the Merchant to be used for iDIN,
 if operating under different brands or trading entities. The Merchant obtains the SubID
 from its Acquirer after registration for iDIN. A Merchant can request permission from
 the Acquirer to use one or more SubIDs.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="merchantReturnUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>The web address provided by the Merchant in the transaction request that is used to redirect the
 Consumer back to the Merchant after completing the authentication in the Issuer domain. The URL
 does not necessarily begin with http:// or https://, it can also start with an app handler
 e.g. companyname-nlservice://.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="acquirerDirectoryUrl" type="xs:string" />
    <xs:attribute name="acquirerTransactionUrl" type="xs:string" />
    <xs:attribute name="acquirerStatusUrl" type="xs:string" />
    <xs:attribute name="keyStoreLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>The Java iDIN Software Library needs to access a keystore located in the Java classpath to
 store all the required certificates</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyStorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>The password used to access the keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyStoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>The AuthAlias used to access the keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="merchantCertificateAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>This is the certificate owned by the Merchant. It's the private certificate
 used to sign messages sent by the Merchant to the Acquirer's Routing Service platform. Its public
 key is also used by the Acquirer to authenticate incoming messages from the Merchant. The
 Merchant certificate must be in PKCS#12 format which has the extension .p12 or .pfx</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="merchantCertificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>In case the merchant certificate has been password protected</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="merchantCertificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>In case the merchant certificate has been password protected</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="acquirerCertificateAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>This is the public certificate used to authenticate incoming messages from the Acquirer. The library
 only needs its public key. The public certificate must be in PEM format (base64 ASCII) and typically
 has the file extension .cer,.crt or .pem.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="acquirerAlternativeCertificateAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>This is the public certificate used to authenticate incoming messages from the Acquirer. The library
 only needs its public key. The public certificate must be in PEM format (base64 ASCII) and typically
 has the file extension .cer,.crt or .pem.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="samlCertificateAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>This is the certificate owned by the Merchant. Its public key is used by the Issuer to encrypt information.
 The Merchant can then use the private key to decrypt that information. The SAML certificate must be in
 PKCS#12 format which has the extension .p12 or .pfx;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sAMLCertificatePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>In case the SAML certificate has been password protected</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sAMLCertificateAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>In case the SAML certificate has been password protected</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logsEnabled" type="frankBoolean" />
    <xs:attribute name="serviceLogsEnabled" type="frankBoolean" />
    <xs:attribute name="serviceLogsLocation" type="xs:string" />
    <xs:attribute name="serviceLogsPattern" type="xs:string" />
    <xs:attribute name="tls12Enabled" type="frankBoolean" />
    <xs:attribute name="merchantReturnUrlSessionKey" type="xs:string" />
    <xs:attribute name="configurationXML" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Load configuration from XML. Attributes may overwrite this 'default'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IdinSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="IdinSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IdocSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SapSenderBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SapSenderBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.sap.IdocSender" />
  </xs:complexType>
  <xs:group name="SapSenderBaseDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="SapSenderBaseDeclaredAttributeGroup">
    <xs:attribute name="luwHandleSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key in which LUW information is stored. If set, actions that share a LUW-handle will be executed using the same destination. Can only be used for synchronous functions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sapSystemNameParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the parameter used to indicate the name of the SapSystem used by this object if the attribute &lt;code&gt;sapSystemName&lt;/code&gt; is empty Default: sapSystemName</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SapSenderBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="SapSenderBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SapFunctionFacadeDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="SapFunctionFacadeDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the Ibis-object</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sapSystemName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the SapSystem used by this object</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="correlationIdFieldIndex" />
    <xs:attribute ref="correlationIdFieldName" />
    <xs:attribute ref="requestFieldIndex" />
    <xs:attribute ref="requestFieldName" />
    <xs:attribute ref="replyFieldIndex" />
    <xs:attribute ref="replyFieldName" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="ImapSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ImapSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.ImapSender" />
  </xs:complexType>
  <xs:attributeGroup name="ImapSenderDeclaredAttributeGroup">
    <xs:attribute name="host" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The hostname of the IMAP server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>The port of the IMAP server Default: 993</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain accessToken or username and password for authentication to Exchange mail server.
 If the alias refers to a combination of a username and a password, the deprecated Basic Authentication method is used.
 If the alias refers to a password without a username, the password is treated as the accessToken.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username for authentication to mail server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication to mail server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyAddressFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of fields to try as response address Default: replyTo,from,sender,Return-Path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ImapSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="ImapSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JavascriptSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JavascriptSenderCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JavascriptSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.JavascriptSender" />
  </xs:complexType>
  <xs:group name="JavascriptSenderDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:group name="JavascriptSenderCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="JavascriptSenderDeclaredChildGroup" />
      <xs:group ref="SenderWrapperBaseCumulativeChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="JavascriptSenderDeclaredAttributeGroup">
    <xs:attribute name="jsFileName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>the name of the javascript file containing the functions to run</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsFunctionName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the javascript function that will be called (first) Default: main</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="engineName">
      <xs:annotation>
        <xs:documentation>the name of the JavaScript engine to use. Default: J2V8</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="JavaScriptEnginesAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JavascriptSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="JavascriptSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderSeriesCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SenderSeriesType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderSeriesCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SenderSeriesCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.SenderSeries" />
  </xs:complexType>
  <xs:group name="SenderSeriesDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:group name="SenderSeriesCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="SenderSeriesDeclaredChildGroup" />
      <xs:group ref="SenderWrapperBaseCumulativeChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="SenderSeriesDeclaredAttributeGroup">
    <xs:attribute name="synchronous" type="frankBoolean" />
  </xs:attributeGroup>
  <xs:attributeGroup name="SenderSeriesCumulativeAttributeGroup">
    <xs:attributeGroup ref="SenderSeriesDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderWrapperBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="SenderWrapperBaseDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="CacheElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="SenderWrapperBaseCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="SenderWrapperBaseDeclaredChildGroup" />
      <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="SenderWrapperBaseDeclaredAttributeGroup">
    <xs:attribute name="getInputFromSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getInputFromFixedValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preserveInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input of a pipe is restored before processing the next one Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeResultInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the result is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeInputInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the input is stored under this session key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SenderWrapperBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="SenderWrapperBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JsonXsltSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JsonXsltSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.JsonXsltSender" />
  </xs:complexType>
  <xs:attributeGroup name="JsonXsltSenderDeclaredAttributeGroup">
    <xs:attribute name="jsonResult" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the xml result of the transformation is converted back to json Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace definitions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt; definitions Default: j=http://www.w3.org/2013/XSL/json</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JsonXsltSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="JsonXsltSenderDeclaredAttributeGroup" />
    <xs:attribute name="streamingXslt" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, then this sender will process the XSLT while streaming in a different thread. Can be used to switch streaming off for debugging purposes Default: set by appconstant xslt.streaming.default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey Default: 100</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: XPath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Omit the XML declaration on top of the output. If not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableOutputEscaping" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, any output is reparsed before being handled as XML again. If not set, the stylesheet is searched for &lt;code&gt;@disable-output-escaping='yes'&lt;/code&gt; and the value is set accordingly Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:annotation>
        <xs:documentation>For xpathExpression only Default: text</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="indentXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. If not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="handleLexicalEvents" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the transformer is enabled to handle lexical events, allowing it for example to process comments and to distinghuish CDATA from escaped text.
 Beware that this option can cause spurious NullPointerExceptions due to a race condition in streaming XSLT 1.0 processing in Xalan 2.7.2 Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipEmptyTags" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt; a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto-detect Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="debugInput" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XsltSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="XsltSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.XsltSender" />
  </xs:complexType>
  <xs:attributeGroup name="XsltSenderDeclaredAttributeGroup">
    <xs:attribute name="streamingXslt" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, then this sender will process the XSLT while streaming in a different thread. Can be used to switch streaming off for debugging purposes Default: set by appconstant xslt.streaming.default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey Default: 100</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: XPath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Omit the XML declaration on top of the output. If not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableOutputEscaping" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, any output is reparsed before being handled as XML again. If not set, the stylesheet is searched for &lt;code&gt;@disable-output-escaping='yes'&lt;/code&gt; and the value is set accordingly Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some other use cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.
 If left empty, an the xpathExpression will match any namespace</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:annotation>
        <xs:documentation>For xpathExpression only Default: text</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="indentXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. If not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="handleLexicalEvents" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the transformer is enabled to handle lexical events, allowing it for example to process comments and to distinghuish CDATA from escaped text.
 Beware that this option can cause spurious NullPointerExceptions due to a race condition in streaming XSLT 1.0 processing in Xalan 2.7.2 Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipEmptyTags" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt; a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto-detect Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="debugInput" />
  </xs:attributeGroup>
  <xs:attributeGroup name="XsltSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="XsltSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="KafkaSenderType">
    <xs:attributeGroup ref="KafkaSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.kafka.KafkaSender" />
  </xs:complexType>
  <xs:attributeGroup name="KafkaSenderDeclaredAttributeGroup">
    <xs:attribute name="topic" type="xs:string">
      <xs:annotation>
        <xs:documentation>The topic to send messages to. Only one topic per sender. Wildcards are not supported.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="KafkaSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="KafkaSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="KafkaFacadeDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="KafkaFacadeDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of the object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bootstrapServers" type="xs:string">
      <xs:annotation>
        <xs:documentation>The bootstrap servers to connect to, as a comma separated list.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientId" type="xs:string">
      <xs:annotation>
        <xs:documentation>The client id to use when connecting to the Kafka cluster.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="LdapSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="LdapSenderDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="LdapSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.ldap.LdapSender" />
  </xs:complexType>
  <xs:group name="LdapSenderDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="LdapSenderDeclaredAttributeGroup">
    <xs:attribute name="operation">
      <xs:annotation>
        <xs:documentation>Specifies LDAP operation to perform Default: read</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="OperationAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="ldapProviderURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL to context to search in, e.g. 'ldap://edsnlm01.group.intranet/ou=people, o=ing' to search in te people group of ing cds. Used to overwrite the providerURL specified in jmsRealm.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="manipulationSubject">
      <xs:annotation>
        <xs:documentation>Specifies subject to perform operation on. Default: attribute</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ManipulationAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="attributesToReturn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of attributes to return. When no are attributes specified, all the attributes from the object read are returned. Default: &lt;i&gt;all attributes&lt;/i&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="usePooling" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Specifies whether connection pooling is used or not Default: true when principal not set as parameter, false otherwise</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="searchTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Specifies the time (in ms) that is spent searching for results for operation search Default: 20000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable used to store cause of errors Default: errorReason</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxEntriesReturned" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of entries to be returned by a search query, or &lt;code&gt;0&lt;/code&gt; for unlimited Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unicodePwd" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the attributes passed by the input xml are scanned for an attribute with id unicodepwd, when found the value of this attribute will be encoded as required by active directory (a UTF-16 encoded unicode string containing the password surrounded by quotation marks) before sending it to the LDAP server Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyNotFound" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(Only used when &lt;code&gt;operation=search/deepsearch&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt; the xml '&amp;lt;ldapresult&amp;gt;object not found&amp;lt;/ldapresult&amp;gt;' is returned instead of the PartialResultException 'unprocessed continuation reference(s)' Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LdapSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="LdapSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JndiBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LocalFileSystemSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="LocalFileSystemSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.LocalFileSystemSender" />
  </xs:complexType>
  <xs:attributeGroup name="LocalFileSystemSenderDeclaredAttributeGroup">
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path to the folder that serves as the root of this virtual filesystem. All specifications of folders or files are relative to this root.
 When the root is left unspecified, absolute paths to files and folders can be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createRootFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Whether the LocalFileSystem tries to create the root folder if it doesn't exist yet. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LocalFileSystemSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="LocalFileSystemSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LogSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="LogSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.LogSender" />
  </xs:complexType>
  <xs:attributeGroup name="LogSenderDeclaredAttributeGroup">
    <xs:attribute name="logCategory" type="xs:string">
      <xs:annotation>
        <xs:documentation>category under which messages are logged Default: name of the sender</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logLevel" type="xs:string">
      <xs:annotation>
        <xs:documentation>level on which messages are logged Default: info</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LogSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="LogSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MQSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JmsSenderDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JmsSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.ibm.MQSender" />
  </xs:complexType>
  <xs:complexType name="MailSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="MailSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.MailSender" />
  </xs:complexType>
  <xs:attributeGroup name="MailSenderDeclaredAttributeGroup">
    <xs:attribute name="smtpHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the SMTP-host by which the messages are to be send</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smtpPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>Port of the SMTP-host by which the messages are to be send Default: 25</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useSsl" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set to true, we ensure TLS is being used Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="MailSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="MailSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="MailSenderBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="MailSenderBaseDeclaredAttributeGroup">
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authAlias used to obtain credentials for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="userId" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of userid</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="defaultSubject" />
    <xs:attribute ref="defaultFrom" />
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout &lt;i&gt;in milliseconds&lt;/i&gt; for socket connection timeout and socket i/o timeouts Default: 20000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="defaultAttachmentName" />
    <xs:attribute ref="defaultMessageType" />
    <xs:attribute ref="defaultMessageBase64" />
    <xs:attribute ref="bounceAddress" />
    <xs:attribute ref="domainWhitelist" />
  </xs:attributeGroup>
  <xs:attributeGroup name="MailSenderBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="MailSenderBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MessageStoreSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="MessageStoreSenderDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="MessageStoreSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.MessageStoreSender" />
  </xs:complexType>
  <xs:group name="MessageStoreSenderDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="MessageStoreSenderDeclaredAttributeGroup">
    <xs:attribute name="sessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of sessionKey's to be stored together with the message. Please note: corresponding MessageStoreListener must have the same value for this attribute.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyStoreWhenMessageIdUnique" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the message is stored only if the MessageId is not present in the store yet. Default: &lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="slotId" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Set the slotId, an identifier to keep separate the messages inserted
 by different MessageStoreSenders.
 &lt;br/&gt;
 This field should be set.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="MessageStoreSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="MessageStoreSenderDeclaredAttributeGroup" />
    <xs:attribute ref="type" />
    <xs:attribute ref="slotIdField" />
    <xs:attribute ref="typeField" />
    <xs:attribute ref="hostField" />
    <xs:attribute ref="sequenceName" />
    <xs:attribute ref="checkIfTableExists" />
    <xs:attribute ref="checkTable" />
    <xs:attribute ref="createTable" />
    <xs:attribute ref="messageFieldType" />
    <xs:attribute ref="keyFieldType" />
    <xs:attribute ref="dateFieldType" />
    <xs:attribute ref="textFieldType" />
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the messages are stored compressed Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="retention" />
    <xs:attribute ref="schemaOwner4Check" />
    <xs:attribute ref="storeFullMessage" />
    <xs:attributeGroup ref="JdbcTableMessageBrowserCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JdbcTransactionalStorageType">
    <xs:attributeGroup ref="JdbcTransactionalStorageCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.JdbcTransactionalStorage" />
  </xs:complexType>
  <xs:attributeGroup name="JdbcTransactionalStorageDeclaredAttributeGroup">
    <xs:attribute name="slotId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Set the slotId, an identifier to keep separate the messages inserted
 by different JdbcTransactionalStorage instances.
 &lt;br/&gt;
 This field is optional, unless the attribute #onlyStoreWhenMessageIdUnique is
 set to {@code true}.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="type" />
    <xs:attribute ref="slotIdField" />
    <xs:attribute ref="typeField" />
    <xs:attribute ref="hostField" />
    <xs:attribute ref="sequenceName" />
    <xs:attribute ref="checkIfTableExists" />
    <xs:attribute ref="checkTable" />
    <xs:attribute ref="createTable" />
    <xs:attribute ref="messageFieldType" />
    <xs:attribute ref="keyFieldType" />
    <xs:attribute ref="dateFieldType" />
    <xs:attribute ref="textFieldType" />
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the messages are stored compressed Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="retention" />
    <xs:attribute ref="schemaOwner4Check" />
    <xs:attribute ref="storeFullMessage" />
    <xs:attribute name="onlyStoreWhenMessageIdUnique" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the message is stored only if the MessageId is not present in the store yet. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcTransactionalStorageCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcTransactionalStorageDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcTableMessageBrowserCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JdbcTableMessageBrowserType">
    <xs:attributeGroup ref="JdbcTableMessageBrowserCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.JdbcTableMessageBrowser" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JdbcTableMessageBrowserDeclaredAttributeGroup">
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the table messages are stored in. Default: IBISSTORE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indexName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the index, to be used in hints for query optimizer too (only for Oracle). Default: IX_IBISSTORE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcTableMessageBrowserCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcTableMessageBrowserDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcMessageBrowserCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcMessageBrowserDeclaredAttributeGroup">
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column that contains the primary key of the table Default: MESSAGEKEY</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="idField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column messageIds are stored in Default: MESSAGEID</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column correlation-ids are stored in Default: CORRELATIONID</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column message themselves are stored in Default: MESSAGE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column the timestamp is stored in Default: MESSAGEDATE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commentField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column comments are stored in Default: COMMENTS</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expiryDateField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column the timestamp for expiry is stored in Default: EXPIRYDATE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelField" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the column labels are stored in Default: LABEL</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>Prefix to be prefixed on all database objects (tables, indices, sequences), e.g. to access a different Oracle schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="order">
      <xs:simpleType>
        <xs:union memberTypes="SortOrderAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore.
 Every character between to the strings in this expression will be replaced by a '*'.
 &lt;br/&gt;
 For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every
 character between keys &amp;lt;party&amp;gt; and &amp;lt;/party&amp;gt;
 &lt;br/&gt;
 When no hideRegex is configured on the errorStore / logStore but is configured on the org.frankframework.receivers.Receiver#setHideRegex(String),
 then the Receiver's hideRegex is used for the errorStore / logStore.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) Specifies the way to hide Default: ALL</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="HideMethodAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcMessageBrowserCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcMessageBrowserDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MongoDbSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="MongoDbSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.mongodb.MongoDbSender" />
  </xs:complexType>
  <xs:attributeGroup name="MongoDbSenderDeclaredAttributeGroup">
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>The MongoDB datasource Default: mongodb.datasource.default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="database" type="xs:string">
      <xs:annotation>
        <xs:documentation>Database to connect to. Can be overridden by parameter database</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collection" type="xs:string">
      <xs:annotation>
        <xs:documentation>Collection to act upon. Can be overridden by parameter collection</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="action">
      <xs:annotation>
        <xs:documentation>Action</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="MongoActionAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="filter" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter. Can contain references to parameters between ?{ and }. Can be overridden by parameter filter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="limit" type="frankInt">
      <xs:annotation>
        <xs:documentation>Limit to number of results returned. A value of 0 means 'no limit'. Can be overridden by parameter limit. Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="countOnly" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Only for find operation: return only the count and not the full document(s) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat">
      <xs:annotation>
        <xs:documentation>OutputFormat Default: JSON</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DocumentFormatAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="prettyPrint" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Format the output in easy legible way (currently only for XML)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="MongoDbSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="MongoDbSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MqttSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="MqttSenderDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="MqttFacadeDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.mqtt.MqttSender" />
  </xs:complexType>
  <xs:group name="MqttSenderDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:complexType name="MqttFacadeType">
    <xs:attributeGroup ref="MqttFacadeDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.mqtt.MqttFacade" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="MqttFacadeDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of the object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt" />
    <xs:attribute name="keepAliveInterval" type="frankInt" />
    <xs:attribute name="clientId" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;a href="https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttClient.html#MqttClient-java.lang.String-java.lang.String-org.eclipse.paho.client.mqttv3.MqttClientPersistence-" target="_blank"&gt;MqttClient(java.lang.String serverURI, java.lang.String clientId, MqttClientPersistence persistence)&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="brokerUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;a href="https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttClient.html#MqttClient-java.lang.String-java.lang.String-org.eclipse.paho.client.mqttv3.MqttClientPersistence-" target="_blank"&gt;MqttClient(java.lang.String serverURI, java.lang.String clientId, MqttClientPersistence persistence)&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topic" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;a href="https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttClient.html#subscribe-java.lang.String-" target="_blank"&gt;MqttClient.subscribe(java.lang.String topicFilter)&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="qos" type="frankInt">
      <xs:annotation>
        <xs:documentation>see &lt;a href="https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttClient.html#MqttClient-java.lang.String-java.lang.String-org.eclipse.paho.client.mqttv3.MqttClientPersistence-" target="_blank"&gt;MqttClient(java.lang.String serverURI, java.lang.String clientId, MqttClientPersistence persistence)&lt;/a&gt; Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cleanSession" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>see &lt;a href="https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttConnectOptions.html#setCleanSession-boolean-" target="_blank"&gt;MqttConnectOptions.setCleanSession(boolean cleanSession)&lt;/a&gt; Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="persistenceDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>see &lt;a href="https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/persist/MqttDefaultFilePersistence.html" target="_blank"&gt;MqttDefaultFilePersistence&lt;/a&gt; and &lt;a href="https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttClient.html" target="_blank"&gt;MqttClient&lt;/a&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="automaticReconnect" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>see &lt;a href="https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttConnectOptions.html#setAutomaticReconnect-boolean-" target="_blank"&gt;MqttConnectOptions.setAutomaticReconnect(boolean automaticReconnect)&lt;/a&gt; (apart from this recover job will also try to recover) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>character encoding of received messages Default: UTF-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string" />
    <xs:attribute name="password" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="MultipartHttpSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="HttpSenderBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="HttpSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.http.MultipartHttpSender" />
  </xs:complexType>
  <xs:complexType name="NetStorageSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="HttpSenderBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="NetStorageSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.akamai.NetStorageSender" />
  </xs:complexType>
  <xs:attributeGroup name="NetStorageSenderDeclaredAttributeGroup">
    <xs:attribute name="hashAlgorithm">
      <xs:annotation>
        <xs:documentation>Only works in combination with the UPLOAD action. If set, and not specified as parameter, the sender will sign the file to be uploaded.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="HashAlgorithmAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="action">
      <xs:annotation>
        <xs:documentation>NetStorage action to be used</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ActionAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="actionVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>At the time of writing, NetStorage only supports version 1 Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cpCode" type="xs:string">
      <xs:annotation>
        <xs:documentation>NetStorage CP Code of the storage group</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>The destination URL for the Akamai NetStorage. (Only the hostname, without CpCode; eq. xyz-nsu.akamaihd.net)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nonce" type="xs:string">
      <xs:annotation>
        <xs:documentation>Login is done via a Nonce and AccessToken</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="signVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>Version to validate queries made to NetStorage backend. Default: 5</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="accessToken" type="xs:string">
      <xs:annotation>
        <xs:documentation>Login is done via a Nonce and AccessToken</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootDir" type="xs:string">
      <xs:annotation>
        <xs:documentation>Root directory (appended to the url + cpCode)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for nonce (username) and accesstoken (password)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="NetStorageSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="NetStorageSenderDeclaredAttributeGroup" />
    <xs:attribute ref="urlParam" />
    <xs:attribute ref="methodType" />
    <xs:attribute ref="contentType" />
    <xs:attribute ref="charSet" />
    <xs:attribute ref="certificate" />
    <xs:attribute ref="certificateType" />
    <xs:attribute ref="certificateAuthAlias" />
    <xs:attribute ref="certificatePassword" />
    <xs:attribute ref="headersParams" />
    <xs:attribute ref="parametersToSkipWhenEmpty" />
    <xs:attribute ref="xhtml" />
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when xHtml=&lt;code&gt;true&lt;/code&gt;) stylesheet to apply to the HTML response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="resultStatusCodeSessionKey" />
    <xs:attribute ref="sharedResourceRef" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of the object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout in ms of obtaining a connection/result. Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="maxConnections" />
    <xs:attribute ref="maxExecuteRetries" />
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="authDomain" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="tokenEndpoint" />
    <xs:attribute ref="tokenExpiry" />
    <xs:attribute ref="clientAlias" />
    <xs:attribute ref="clientId" />
    <xs:attribute ref="clientSecret" />
    <xs:attribute ref="scope" />
    <xs:attribute ref="authenticatedTokenRequest" />
    <xs:attribute ref="proxyHost" />
    <xs:attribute ref="proxyPort" />
    <xs:attribute ref="proxyAuthAlias" />
    <xs:attribute ref="proxyUsername" />
    <xs:attribute ref="proxyPassword" />
    <xs:attribute ref="proxyRealm" />
    <xs:attribute ref="prefillProxyAuthCache" />
    <xs:attribute ref="disableCookies" />
    <xs:attribute ref="keystore" />
    <xs:attribute ref="keystoreType" />
    <xs:attribute ref="keystoreAuthAlias" />
    <xs:attribute ref="keystorePassword" />
    <xs:attribute ref="keyManagerAlgorithm" />
    <xs:attribute ref="keystoreAlias" />
    <xs:attribute ref="keystoreAliasAuthAlias" />
    <xs:attribute ref="keystoreAliasPassword" />
    <xs:attribute ref="truststore" />
    <xs:attribute ref="truststoreAuthAlias" />
    <xs:attribute ref="truststorePassword" />
    <xs:attribute ref="truststoreType" />
    <xs:attribute ref="trustManagerAlgorithm" />
    <xs:attribute ref="verifyHostname" />
    <xs:attribute ref="allowSelfSignedCertificates" />
    <xs:attribute ref="ignoreCertificateExpiredException" />
    <xs:attribute ref="followRedirects" />
    <xs:attribute ref="ignoreRedirects" />
    <xs:attribute ref="staleChecking" />
    <xs:attribute ref="staleTimeout" />
    <xs:attribute ref="connectionTimeToLive" />
    <xs:attribute ref="connectionIdleTimeout" />
    <xs:attribute ref="protocol" />
    <xs:attribute ref="supportedCipherSuites" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="ParallelSendersType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="ParallelSendersCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ParallelSendersCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.ParallelSenders" />
  </xs:complexType>
  <xs:group name="ParallelSendersDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:group name="ParallelSendersCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="ParallelSendersDeclaredChildGroup" />
      <xs:group ref="SenderWrapperBaseCumulativeChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="ParallelSendersDeclaredAttributeGroup">
    <xs:attribute name="maxConcurrentThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Set the upper limit to the amount of concurrent threads that can be run simultaneously. Use 0 to disable. Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ParallelSendersCumulativeAttributeGroup">
    <xs:attributeGroup ref="ParallelSendersDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderSeriesCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ReconnectSenderWrapperType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="ReconnectSenderWrapperCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SenderWrapperBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.ReconnectSenderWrapper" />
  </xs:complexType>
  <xs:group name="ReconnectSenderWrapperDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="ReconnectSenderWrapperCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="ReconnectSenderWrapperDeclaredChildGroup" />
      <xs:group ref="SenderWrapperBaseCumulativeChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:complexType name="ReloadSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ReloadSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.ReloadSender" />
  </xs:complexType>
  <xs:attributeGroup name="ReloadSenderDeclaredAttributeGroup">
    <xs:attribute name="forceReload" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>reload the configuration regardless of the version Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ReloadSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="ReloadSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="RestSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="HttpSenderBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="HttpSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.http.RestSender" />
  </xs:complexType>
  <xs:complexType name="ResultSet2FileSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JdbcSenderBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ResultSet2FileSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.ResultSet2FileSender" />
  </xs:complexType>
  <xs:attributeGroup name="ResultSet2FileSenderDeclaredAttributeGroup">
    <xs:attribute name="statusFieldType" type="xs:string">
      <xs:annotation>
        <xs:documentation>type of the optional status field which is set after the row is written to the file: timestamp</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filenameSessionKey" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Key of session variable that contains the name of the file to use.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="append" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; and the file already exists, the resultset rows are written to the end of the file. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRecordsSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set (and &amp;gt;=0), this session key contains the maximum number of records which are processed.
 If &lt;code&gt;query&lt;/code&gt; contains a group field (3), then also following records with the same group field value as the last record are processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ResultSet2FileSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="ResultSet2FileSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedQuerySenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Samba1SenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="Samba1SenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.Samba1Sender" />
  </xs:complexType>
  <xs:attributeGroup name="Samba1SenderDeclaredAttributeGroup">
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>The destination, aka smb://xxx/yyy share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SMB share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SMB share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for the SMB share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domainName" type="xs:string">
      <xs:annotation>
        <xs:documentation>logon/authentication domain, in case the user account is bound to a domain such as Active Directory.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="force" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, intermediate directories are created also Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="listHiddenFiles" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether hidden files are seen or not Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Samba1SenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="Samba1SenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Samba2SenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="Samba2SenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.Samba2Sender" />
  </xs:complexType>
  <xs:attributeGroup name="Samba2SenderDeclaredAttributeGroup">
    <xs:attribute name="hostname" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Hostname of the SMB share.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>Port to connect to. Default: 445</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'.
 When setting SPNEGO, the host must use the FQDN, and must be registered on the KDC with a valid SPN. Default: SPNEGO</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="Samba2AuthTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domainName" type="xs:string">
      <xs:annotation>
        <xs:documentation>NTLM only: logon/authentication domain, in case the user account is bound to a domain such as Active Directory.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>May not contain '\\' characters. The destination share, aka smb://xxx/yyy share.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>SPNEGO only:
 Key Distribution Center, typically hosted on a domain controller.
 Stored in &lt;code&gt;java.security.krb5.kdc&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>SPNEGO only:
 Kerberos Realm, case sensitive. Typically upper case and the same as the domain name.
 An Active Directory domain acts as a Kerberos Realm.
 Stored in &lt;code&gt;java.security.krb5.realm&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Samba2SenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="Samba2SenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SapSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SapSenderBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SapSenderImplCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.sap.SapSender" />
  </xs:complexType>
  <xs:attributeGroup name="SapSenderImplDeclaredAttributeGroup">
    <xs:attribute name="synchronous" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;false&lt;/code&gt;, the sender operates in RR mode: the a reply is expected from SAP, and the sender does not participate in a transaction. When &lt;code&gt;false&lt;/code&gt;, the sender operates in FF mode: no reply is expected from SAP, and the sender joins the transaction, that must be present. The SAP transaction is committed right after the XA transaction is completed. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="functionName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the RFC-function to be called in the SAP system</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="functionNameParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the parameter used to obtain the functionName from if the attribute &lt;code&gt;functionName&lt;/code&gt; is empty Default: functionName</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SapSenderImplCumulativeAttributeGroup">
    <xs:attributeGroup ref="SapSenderImplDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SapSenderBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SchedulerSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SchedulerSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.scheduler.SchedulerSender" />
  </xs:complexType>
  <xs:attributeGroup name="SchedulerSenderDeclaredAttributeGroup">
    <xs:attribute name="cronExpressionPattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>expression that generates the cron trigger</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jobGroup" type="xs:string">
      <xs:annotation>
        <xs:documentation>job group in which the new trigger is to be created (optional)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jobNamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>pattern that leads to the name of the registered trigger(optional)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="javaListener" type="xs:string">
      <xs:annotation>
        <xs:documentation>java listener to be called when scheduler trigger fires</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SchedulerSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="SchedulerSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SendGridSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SendGridSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.SendGridSender" />
  </xs:complexType>
  <xs:attributeGroup name="SendGridSenderDeclaredAttributeGroup">
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout in ms of obtaining a connection/result. Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of concurrent connections Default: 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExecuteRetries" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of times the execution is retried Default: 1 (for repeatable messages) else 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>Proxy port Default: 80</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for authentication to proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy realm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystore" type="xs:string">
      <xs:annotation>
        <xs:documentation>resource URL to keystore or certificate to be used for authentication. If none specified, the JVMs default keystore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType">
      <xs:annotation>
        <xs:documentation>Type of keystore Default: pkcs12</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to obtain keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to access keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias to obtain specific certificate or key in keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Resource URL to truststore to be used for authenticating peer. If none specified, the JVMs default truststore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType">
      <xs:annotation>
        <xs:documentation>Type of truststore Default: jks</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to access truststore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Trust manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the hostname in the certificate will be checked against the actual hostname of the peer</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, self signed certificates are accepted Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, CertificateExpiredExceptions are ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="followRedirects" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, a redirect request will be honoured, e.g. to switch to HTTPS Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleChecking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether connections checked to be stale, i.e. appear open, but are not. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="staleTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Used when &lt;code&gt;staleChecking&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Timeout after which an idle connection will be validated before being used. Default: 5000 ms</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocol" type="xs:string">
      <xs:annotation>
        <xs:documentation>Secure socket protocol (such as 'TLSv1.2') to use when a SSLContext object is generated. Default: TLSv1.2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SendGridSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="SendGridSenderDeclaredAttributeGroup" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authAlias used to obtain credentials for authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="userId" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of userid</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="defaultSubject" />
    <xs:attribute ref="defaultFrom" />
    <xs:attribute ref="defaultAttachmentName" />
    <xs:attribute ref="defaultMessageType" />
    <xs:attribute ref="defaultMessageBase64" />
    <xs:attribute ref="bounceAddress" />
    <xs:attribute ref="domainWhitelist" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SenderWrapperType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWrapperCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SenderWrapperBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.SenderWrapper" />
  </xs:complexType>
  <xs:group name="SenderWrapperDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="SenderWrapperCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="SenderWrapperDeclaredChildGroup" />
      <xs:group ref="SenderWrapperBaseCumulativeChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:complexType name="SftpFileSystemSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SftpFileSystemSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.SftpFileSystemSender" />
  </xs:complexType>
  <xs:attributeGroup name="SftpFileSystemSenderDeclaredAttributeGroup">
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path of the file or directory to start working. Default: Home folder of the sftp user</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name or ip address of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>Port number of remote host Default: 21</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the user to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy hostname</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>Proxy port Default: 1080</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias to obtain credentials to authenticate on proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default user name in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyTransportType">
      <xs:annotation>
        <xs:documentation>Transport type in case of sftp Default: SOCKS5</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="TransportTypeAttributeValuesType_2 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="prefCSEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional preferred encryption from client to server for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefSCEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional preferred encryption from server to client for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyFilePath" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path to private key file for sftp authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the alias to obtain credentials for passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="knownHostsPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path to file with knownhosts</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictHostKeyChecking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Verify the hosts againt the knownhosts file. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SftpFileSystemSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="SftpFileSystemSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemSenderCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ShadowSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="ParallelSendersCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ShadowSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.ShadowSender" />
  </xs:complexType>
  <xs:attributeGroup name="ShadowSenderDeclaredAttributeGroup">
    <xs:attribute name="originalSender" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the sender that is considered that is considered to be the golden standard, i.e. the source of truth. Default: the first sender specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultSender" type="xs:string">
      <xs:annotation>
        <xs:documentation>The sender name which will process the results Default: the last sender specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="waitForShadowsToFinish" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; the sender will wait for all shadows to have finished. Otherwise the collection of results will happen in a background thread. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ShadowSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="ShadowSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="ParallelSendersCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="StoredProcedureQuerySenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JdbcSenderBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="StoredProcedureQuerySenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.StoredProcedureQuerySender" />
  </xs:complexType>
  <xs:attributeGroup name="StoredProcedureQuerySenderDeclaredAttributeGroup">
    <xs:attribute name="query" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>A SQL statement that calls a stored procedure. The statement should begin with the &lt;code&gt;CALL&lt;/code&gt; or &lt;code&gt;EXEC&lt;/code&gt;
 SQL keyword depending on SQL dialect. In case of doubt, the safe choice is to always start with &lt;code&gt;CALL&lt;/code&gt; and choose Oracle dialect.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryType">
      <xs:annotation>
        <xs:documentation>The query type. For stored procedures, valid query types are JdbcQuerySenderBase.QueryType#SELECT and JdbcQuerySenderBase.QueryType#OTHER.
 Use JdbcQuerySenderBase.QueryType#SELECT when your stored procedure returns a row set (not supported by Oracle and PostgreSQL).
 Use JdbcQuerySenderBase.QueryType#OTHER when your stored procedure returns values via &lt;code&gt;OUT&lt;/code&gt; or &lt;code&gt;INOUT&lt;/code&gt; parameters, or does not return
 anything at all.
 &lt;p&gt;
 Using any other value will be rejected.
 &lt;/p&gt; Default: OTHER</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="QueryTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="StoredProcedureQuerySenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="StoredProcedureQuerySenderDeclaredAttributeGroup" />
    <xs:attribute ref="batchSize" />
    <xs:attribute ref="packageContent" />
    <xs:attribute ref="scalar" />
    <xs:attribute ref="scalarExtended" />
    <xs:attribute ref="nullValue" />
    <xs:attribute ref="resultQuery" />
    <xs:attribute ref="useNamedParams" />
    <xs:attribute ref="includeFieldDefinition" />
    <xs:attribute ref="trimSpaces" />
    <xs:attribute ref="streamResultToServlet" />
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="synchronous" />
    <xs:attribute ref="closeInputstreamOnExit" />
    <xs:attribute ref="closeOutputstreamOnExit" />
    <xs:attribute ref="streamCharset" />
    <xs:attribute ref="prettyPrint" />
    <xs:attribute name="outputFormat">
      <xs:annotation>
        <xs:documentation>The type of output. If not set then defaults to old-style XML. If set to XML, new-style XML is used. EXPERIMENTAL: datatypes like numbers are not yet rendered correctly Default: false</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DocumentFormatAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attributeGroup ref="JdbcSenderBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="WebServiceNtlmSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="WebServiceNtlmSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.http.WebServiceNtlmSender" />
  </xs:complexType>
  <xs:attributeGroup name="WebServiceNtlmSenderDeclaredAttributeGroup">
    <xs:attribute name="contentType" type="xs:string">
      <xs:annotation>
        <xs:documentation>content-type of the request Default: text/html; charset=utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>url or base of url to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>timeout in ms of obtaining a connection/result. 0 means no timeout Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxConnections" type="frankInt">
      <xs:annotation>
        <xs:documentation>the maximum number of concurrent connections Default: 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used to authenticate with the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authDomain" type="xs:string" />
    <xs:attribute name="proxyHost" type="xs:string" />
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>Default: 80</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>the soapactionuri to be set in the requestheader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="WebServiceNtlmSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="WebServiceNtlmSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="WebServiceSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="HttpSenderBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="WebServiceSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.http.WebServiceSender" />
  </xs:complexType>
  <xs:attributeGroup name="WebServiceSenderDeclaredAttributeGroup">
    <xs:attribute name="soap" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, messages sent are put in a soap envelope and the soap envelope is removed from received messages (soap envelope will not be visible to the pipeline) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapActionURI" type="xs:string" />
    <xs:attribute name="soapActionURIParam" type="xs:string" />
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>the soapactionuri to be set in the requestheader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapActionParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter to obtain the soapactionuri</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyleURI" type="xs:string" />
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>the encodingstyle to be set in the messageheader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwApplicationFaults" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether soap faults generated by the application generate an exception, or are treated as 'normal' messages Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string" />
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>the namespace of the message sent. identifies the service to be called. may be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURIParam" type="xs:string" />
    <xs:attribute name="serviceNamespaceParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>parameter to obtain the servicenamespace</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace defintions to be added in the soap envelope tag. must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used to obtain credentials for authentication to web services security</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used to obtain credentials for authentication to web services security</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to web services security</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when true, the password is sent digested. otherwise it is sent in clear text Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="WebServiceSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="WebServiceSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="HttpSenderDeclaredAttributeGroup" />
    <xs:attribute ref="url" />
    <xs:attribute ref="urlParam" />
    <xs:attribute ref="contentType" />
    <xs:attribute ref="charSet" />
    <xs:attribute ref="certificate" />
    <xs:attribute ref="certificateType" />
    <xs:attribute ref="certificateAuthAlias" />
    <xs:attribute ref="certificatePassword" />
    <xs:attribute ref="headersParams" />
    <xs:attribute ref="parametersToSkipWhenEmpty" />
    <xs:attribute ref="xhtml" />
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when xHtml=&lt;code&gt;true&lt;/code&gt;) stylesheet to apply to the HTML response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="resultStatusCodeSessionKey" />
    <xs:attribute ref="sharedResourceRef" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of the object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout in ms of obtaining a connection/result. Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="maxConnections" />
    <xs:attribute ref="maxExecuteRetries" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="authDomain" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="tokenEndpoint" />
    <xs:attribute ref="tokenExpiry" />
    <xs:attribute ref="clientAlias" />
    <xs:attribute ref="clientId" />
    <xs:attribute ref="clientSecret" />
    <xs:attribute ref="scope" />
    <xs:attribute ref="authenticatedTokenRequest" />
    <xs:attribute ref="proxyHost" />
    <xs:attribute ref="proxyPort" />
    <xs:attribute ref="proxyAuthAlias" />
    <xs:attribute ref="proxyUsername" />
    <xs:attribute ref="proxyPassword" />
    <xs:attribute ref="proxyRealm" />
    <xs:attribute ref="prefillProxyAuthCache" />
    <xs:attribute ref="disableCookies" />
    <xs:attribute ref="keystore" />
    <xs:attribute ref="keystoreType" />
    <xs:attribute ref="keystoreAuthAlias" />
    <xs:attribute ref="keystorePassword" />
    <xs:attribute ref="keyManagerAlgorithm" />
    <xs:attribute ref="keystoreAlias" />
    <xs:attribute ref="keystoreAliasAuthAlias" />
    <xs:attribute ref="keystoreAliasPassword" />
    <xs:attribute ref="truststore" />
    <xs:attribute ref="truststoreAuthAlias" />
    <xs:attribute ref="truststorePassword" />
    <xs:attribute ref="truststoreType" />
    <xs:attribute ref="trustManagerAlgorithm" />
    <xs:attribute ref="verifyHostname" />
    <xs:attribute ref="allowSelfSignedCertificates" />
    <xs:attribute ref="ignoreCertificateExpiredException" />
    <xs:attribute ref="followRedirects" />
    <xs:attribute ref="ignoreRedirects" />
    <xs:attribute ref="staleChecking" />
    <xs:attribute ref="staleTimeout" />
    <xs:attribute ref="connectionTimeToLive" />
    <xs:attribute ref="connectionIdleTimeout" />
    <xs:attribute ref="protocol" />
    <xs:attribute ref="supportedCipherSuites" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="XComSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="XComSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.xcom.XComSender" />
  </xs:complexType>
  <xs:attributeGroup name="XComSenderDeclaredAttributeGroup">
    <xs:attribute name="fileOption">
      <xs:annotation>
        <xs:documentation>one of create, append or replace</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="FileOptionTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>remote directory is prefixed witht the remote file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="carriageflag">
      <xs:simpleType>
        <xs:union memberTypes="CarriageFlagTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="codeflag">
      <xs:annotation>
        <xs:documentation>characterset conversion</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="CodeTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="compress">
      <xs:simpleType>
        <xs:union memberTypes="CompressTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="logfile" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of logfile for xcomtcp to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password of user on remote system</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>port of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queue" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>set queue off or on</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteSystem" type="xs:string">
      <xs:annotation>
        <xs:documentation>hostname or tcpip adres of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tracelevel" type="frankInt">
      <xs:annotation>
        <xs:documentation>set between 0 (no trace) and 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truncation" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>set truncation off or on</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="userid" type="xs:string">
      <xs:annotation>
        <xs:documentation>loginname of user on remote system</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="remoteFilePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>remote file to create. if empty, the name is equal to the local file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="workingDirName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>directory in which to run the xcomtcp command</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xcomtcp" type="xs:string">
      <xs:annotation>
        <xs:documentation>path to xcomtcp command</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="configFile" type="xs:string" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XComSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="XComSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XfbSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="XfbSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.xfb.XfbSender" />
  </xs:complexType>
  <xs:attributeGroup name="XfbSenderDeclaredAttributeGroup">
    <xs:attribute name="script" type="xs:string">
      <xs:annotation>
        <xs:documentation>Full pathname to the XFB script to be executed to transfer the file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ft" type="xs:string" />
    <xs:attribute name="flow" type="xs:string" />
    <xs:attribute name="appli" type="xs:string" />
    <xs:attribute name="noname" type="xs:string" />
    <xs:attribute name="copy" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;true&lt;/code&gt;, the file is copied before calling the XFB script.
 Reasons to copy the file:
 - XFB will rename the file (prefix it with FXB_) and delete it.
 - On Linux the sticky bit (drwxrws--- wasadmin xfbgw) isn't honoured with a move (only with a copy) (on AIX the sticky bit works for both move and copy).</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="copyPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>Prefix for the name of the copied or original filename. When the name of the original file starts with this prefix, it is removed. Otherwise this prefix is added to the filename of the copied file.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XfbSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="XfbSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlJmsBrowserSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jms.XmlJmsBrowserSender" />
  </xs:complexType>
  <xs:complexType name="XmlQuerySenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JdbcSenderBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JdbcQuerySenderBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.XmlQuerySender" />
  </xs:complexType>
  <xs:complexType name="XmlValidatorSenderType">
    <xs:attributeGroup ref="XmlValidatorSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.senders.XmlValidatorSender" />
  </xs:complexType>
  <xs:attributeGroup name="XmlValidatorSenderDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of the object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlValidatorSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlValidatorSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractXmlValidatorDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="AbstractXmlValidatorDeclaredAttributeGroup">
    <xs:attribute name="fullSchemaChecking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Enable full schema grammar constraint checking, including checking which
 may be time-consuming or memory intensive. Currently, particle unique
 attribution constraint checking and particle derivation restriction
 checking are controlled by this option.
 &lt;p&gt;
 see property
 http://apache.org/xml/features/validation/schema-full-checking
 &lt;/p&gt; Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in Default: failureReason</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive Default: xmlFailureReason</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateFile" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; Default: utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s).
 Alternatively, warnings can be switched off using suppression properties XSD_VALIDATION_WARNINGS_SUPPRESS_KEY, XSD_VALIDATION_ERROR_SUPPRESS_KEY and XSD_VALIDATION_FATAL_ERROR_SUPPRESS_KEY Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnknownNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Ignore namespaces in the input message which are unknown Default: true when &lt;code&gt;schema&lt;/code&gt; or &lt;code&gt;noNamespaceSchemaLocation&lt;/code&gt; is used, false otherwise</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCaching" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlSchemaVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property. Default: &lt;code&gt;1.1&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="ZipWriterSenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderWithParametersBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ZipWriterSenderCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.compression.ZipWriterSender" />
  </xs:complexType>
  <xs:attributeGroup name="ZipWriterSenderDeclaredAttributeGroup">
    <xs:attribute name="zipWriterHandle" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key used to refer to zip session. Must be specified with another value if ZipWriterPipes are nested Default: zipwriterhandle</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backwardsCompatibility" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Input will be 'piped' to the output, and the message will be preserved. Avoid using this if possible.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ZipWriterSenderCumulativeAttributeGroup">
    <xs:attributeGroup ref="ZipWriterSenderDeclaredAttributeGroup" />
    <xs:attributeGroup ref="CollectorSenderBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="CollectorSenderBaseDeclaredAttributeGroup">
    <xs:attribute name="collectionName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key used to refer to collection. Must be specified with another value if multiple CollectorPipes are active at the same time in the same session Default: collection</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CollectorSenderBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="CollectorSenderBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SenderBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="ListenerElementGroupBase">
    <xs:choice>
      <xs:element name="ApiListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BisJmsListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BisJmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CmisEventListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CmisEventListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DirectoryListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DirectoryListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbJmsListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbJmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ExchangeMailListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ExchangeMailListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FrankListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FrankListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FtpFileSystemListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FtpFileSystemListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="HttpListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="HttpListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ImapListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ImapListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JavaListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JavaListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JdbcListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JdbcListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JdbcQueryListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JdbcQueryListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JdbcTableListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JdbcTableListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JmsListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="KafkaListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="KafkaListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MessageStoreListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MessageStoreListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MqttListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MqttListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PullingJmsListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PullingJmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PushingJmsListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PushingJmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RestListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RestListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba2Listener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba2ListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SambaListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SambaListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SapListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SapListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SftpFileSystemListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SftpFileSystemListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SimpleJdbcListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SimpleJdbcListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="TibcoLogJmsListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="TibcoLogJmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WebServiceListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WebServiceListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="ApiListenerType">
    <xs:attributeGroup ref="ApiListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.http.rest.ApiListener" />
  </xs:complexType>
  <xs:attributeGroup name="ApiListenerDeclaredAttributeGroup">
    <xs:attribute name="method">
      <xs:annotation>
        <xs:documentation>HTTP method to listen to Default: GET</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="HttpMethodAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="methods">
      <xs:annotation>
        <xs:documentation>HTTP method(s) to listen to. Inside XML Configurations: for multiple values, use a comma as separator. Default: GET</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="HttpMethodAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="uriPattern" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>URI pattern to register this listener on, eq. &lt;code&gt;/my-listener/{something}/here&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consumes">
      <xs:annotation>
        <xs:documentation>The required contentType on requests, if it doesn't match a &lt;code&gt;415&lt;/code&gt; status (Unsupported Media Type) is returned. Default: ANY</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="MediaTypesAttributeValuesType_2 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="produces">
      <xs:annotation>
        <xs:documentation>The specified contentType on response. When &lt;code&gt;ANY&lt;/code&gt; the response will determine the content-type when it's known and will never calculate it. If no match is found &lt;code&gt;*&amp;#47;*&lt;/code&gt; will be used.
 When &lt;code&gt;DETECT&lt;/code&gt; the framework attempts to detect the MimeType (as well as charset) when not known. Default: ANY</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="MediaTypesAttributeValuesType_2 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="characterEncoding" type="xs:string">
      <xs:annotation>
        <xs:documentation>The specified character encoding on the response contentType header. NULL or empty
 values will be ignored. Default: UTF-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="updateEtag" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Automatically generate and validate etags Default: &lt;code&gt;false&lt;/code&gt;, can be changed by setting the property &lt;code&gt;api.etag.enabled&lt;/code&gt;.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authenticationMethod">
      <xs:annotation>
        <xs:documentation>Enables security for this listener. If you wish to use the application servers authorization roles [AUTHROLE], you need to enable them globally for all ApiListeners with the &lt;code&gt;servlet.ApiListenerServlet.securityRoles=IbisTester,IbisWebService&lt;/code&gt; property Default: &lt;code&gt;NONE&lt;/code&gt;</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="AuthenticationMethodsAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="authenticationRoles" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only active when AuthenticationMethod=AUTHROLE. Comma separated list of authorization roles which are granted for this service, eq. &lt;code&gt;IbisTester,IbisObserver&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartBodyName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specify the form-part you wish to enter the pipeline Default: name of the first form-part</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIdHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the header which contains the Message-Id. Default: Message-Id</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the header which contains the Correlation-Id. Default: Correlation-Id</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="operationId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Unique string used to identify the operation. The id MUST be unique among all operations described in the OpenApi schema.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerParams" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of parameters passed as http header. Parameters will be stored in 'headers' sessionkey.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentDispositionHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key that provides the &lt;code&gt;Content-Disposition&lt;/code&gt; header in the response</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="requiredIssuer" type="xs:string">
      <xs:annotation>
        <xs:documentation>Issuer to validate JWT</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jwksURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>Keysource URL to validate JWT</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jwtHeader" type="xs:string">
      <xs:annotation>
        <xs:documentation>Header to extract JWT from Default: &lt;code&gt;Authorization&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="requiredClaims" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of required claims</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exactMatchClaims" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated key value pairs to exactly match with JWT payload. e.g. &lt;code&gt;sub=UnitTest, aud=test&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="anyMatchClaims" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated key value pairs to one-of match with JWT payload. e.g. &lt;code&gt;appid=a,appid=b&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="roleClaim" type="xs:string">
      <xs:annotation>
        <xs:documentation>Claim name which specifies the role (maps to &lt;code&gt;IsUserInRolePipe&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="principalNameClaim" type="xs:string">
      <xs:annotation>
        <xs:documentation>Claim name which specifies the principal name (maps to &lt;code&gt;GetPrincipalPipe&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ApiListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="ApiListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="PushingListenerAdapterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="PushingListenerAdapterDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the listener as known to the adapter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="applicationFaultsAsExceptions" type="frankBoolean" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="BisJmsListenerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="BisJmsListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.bis.BisJmsListener" />
  </xs:complexType>
  <xs:attributeGroup name="BisJmsListenerDeclaredAttributeGroup">
    <xs:attribute name="requestXPath" type="xs:string" />
    <xs:attribute name="requestNamespaceDefs" type="xs:string" />
    <xs:attribute name="messageHeaderInSoapBody" type="frankBoolean" />
    <xs:attribute name="resultInPayload" type="frankBoolean" />
    <xs:attribute name="omitResult" type="frankBoolean" />
    <xs:attribute name="removeRequestNamespaces" type="frankBoolean" />
    <xs:attribute name="layByNamespace" type="frankBoolean" />
    <xs:attribute name="errorCodeSessionKey" type="xs:string" />
    <xs:attribute name="errorTextSessionKey" type="xs:string" />
    <xs:attribute name="errorReasonSessionKey" type="xs:string" />
    <xs:attribute name="serviceName" type="xs:string" />
    <xs:attribute name="actionName" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="BisJmsListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="BisJmsListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="PushingJmsListenerCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="JmsListenerBaseDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="JmsListenerBaseDeclaredAttributeGroup">
    <xs:attribute name="forceMessageIdAsCorrelationId" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>By default, the JmsListener takes the Correlation-ID (if present) as the ID that has to be used as Correlation-ID of the reply.
 When set to &lt;code&gt;true&lt;/code&gt;, the messageID is used as Correlation-ID of the reply. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Receive timeout &lt;i&gt;in milliseconds&lt;/i&gt; as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long- Default: 1000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useReplyTo" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Flag if reply-to queue from the request message should be used or not. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="replyDestinationName" />
    <xs:attribute ref="replyMessageType" />
    <xs:attribute ref="replyDeliveryMode" />
    <xs:attribute ref="replyPriority" />
    <xs:attribute ref="replyMessageTimeToLive" />
    <xs:attribute name="soap" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, messages sent are put in a SOAP envelope Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="replyEncodingStyleURI" />
    <xs:attribute ref="replyNamespaceURI" />
    <xs:attribute ref="replySoapAction" />
    <xs:attribute ref="soapHeaderSessionKey" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JmsListenerBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="JmsListenerBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JMSFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PushingJmsListenerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="PushingJmsListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jms.PushingJmsListener" />
  </xs:complexType>
  <xs:attributeGroup name="PushingJmsListenerDeclaredAttributeGroup">
    <xs:attribute name="destinationName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the JMS destination (queue or topic) to use</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cacheMode">
      <xs:simpleType>
        <xs:union memberTypes="CacheModeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="pollGuardInterval" type="frankInt">
      <xs:annotation>
        <xs:documentation>Interval &lt;i&gt;in milliseconds&lt;/i&gt; for the poll guard to check whether a successful poll was done by the receive
 (https://docs.oracle.com/javaee/7/api/javax/jms/messageconsumer.html#receive-long-) since last check. If polling has stopped this will be logged
 and the listener will be stopped and started in an attempt to workaround problems with polling.
 Polling might stop due to bugs in the JMS driver/implementation which should be fixed by the supplier. As the poll time includes reading
 and processing of the message no successful poll might be registered since the last check when message processing takes a long time, hence
 while messages are being processed the check on last successful poll will be skipped. Set to -1 to disable. Default: ten times the specified timeout</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="PushingJmsListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="PushingJmsListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JmsListenerBaseDeclaredAttributeGroup" />
    <xs:attribute ref="messageClass" />
    <xs:attribute ref="destinationType" />
    <xs:attribute ref="acknowledgeMode" />
    <xs:attribute ref="persistent" />
    <xs:attribute ref="subscriberType" />
    <xs:attribute ref="queueConnectionFactoryName" />
    <xs:attribute ref="topicConnectionFactoryName" />
    <xs:attribute ref="jmsTransacted" />
    <xs:attribute name="transacted" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether messages are send under transaction control.
 If set &lt;code&gt;true&lt;/code&gt;, messages are committed or rolled back under control of an XA-transaction. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="correlationIdToHex" />
    <xs:attribute ref="correlationIdToHexPrefix" />
    <xs:attribute ref="messageTimeToLive" />
    <xs:attribute ref="correlationIdMaxLength" />
    <xs:attribute ref="messageSelector" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for authentication to JMS server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="lookupDestination" />
    <xs:attributeGroup ref="JndiBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CmisEventListenerType">
    <xs:attributeGroup ref="CmisEventListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.cmis.CmisEventListener" />
  </xs:complexType>
  <xs:attributeGroup name="CmisEventListenerDeclaredAttributeGroup">
    <xs:attribute name="eventListener" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="CmisEventListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="CmisEventListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="PushingListenerAdapterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="DirectoryListenerType">
    <xs:attributeGroup ref="DirectoryListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.receivers.DirectoryListener" />
  </xs:complexType>
  <xs:attributeGroup name="DirectoryListenerDeclaredAttributeGroup">
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional base folder, that serves as root for all other folders</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="DirectoryListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="DirectoryListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemListenerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="FileSystemListenerDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="inputFolder" />
    <xs:attribute ref="inProcessFolder" />
    <xs:attribute ref="processedFolder" />
    <xs:attribute ref="errorFolder" />
    <xs:attribute ref="holdFolder" />
    <xs:attribute ref="logFolder" />
    <xs:attribute ref="createFolders" />
    <xs:attribute ref="delete" />
    <xs:attribute ref="numberOfBackups" />
    <xs:attribute ref="overwrite" />
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Determines the contents of the message that is sent to the pipeline. Can be 'name', for the filename, 'path', for the full file path, 'contents' for the contents of the file, 'info' for file information. For any other value, the attributes of the file are searched and used Default: path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="fileTimeSensitive" />
    <xs:attribute ref="minStableTime" />
    <xs:attribute ref="messageIdPropertyKey" />
    <xs:attribute ref="disableMessageBrowsers" />
    <xs:attribute ref="wildcard" />
    <xs:attribute ref="excludeWildcard" />
    <xs:attribute ref="storeMetadataInSessionKey" />
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset to be used for extracting the contents</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat">
      <xs:annotation>
        <xs:documentation>OutputFormat of message for messageType=info Default: XML</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DocumentFormatAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="EsbJmsListenerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="EsbJmsListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.esb.EsbJmsListener" />
  </xs:complexType>
  <xs:attributeGroup name="EsbJmsListenerDeclaredAttributeGroup">
    <xs:attribute name="messageProtocol" use="required">
      <xs:annotation>
        <xs:documentation>protocol of ESB service to be called</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="MessageProtocolAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="copyAEProperties" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if true, all JMS properties in the request starting with "ae_" are copied to the reply. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceMessageIdAsCorrelationId" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if messageProtocol=RR, default value is: true Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useReplyTo" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if messageProtocol=FF, default value is: false Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xPathLoggingKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of all XPath keys that need to be logged. (overrides &lt;code&gt;msg.log.keys&lt;/code&gt; property)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="EsbJmsListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="EsbJmsListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="PushingJmsListenerDeclaredAttributeGroup" />
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Receive timeout &lt;i&gt;in milliseconds&lt;/i&gt; as specified by the JMS API, see https://docs.oracle.com/javaee/7/api/javax/jms/MessageConsumer.html#receive-long- Default: 1000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="replyDestinationName" />
    <xs:attribute ref="replyMessageType" />
    <xs:attribute ref="replyDeliveryMode" />
    <xs:attribute ref="replyPriority" />
    <xs:attribute ref="replyMessageTimeToLive" />
    <xs:attribute name="soap" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, messages sent are put in a SOAP envelope Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="replyEncodingStyleURI" />
    <xs:attribute ref="replyNamespaceURI" />
    <xs:attribute ref="replySoapAction" />
    <xs:attribute ref="soapHeaderSessionKey" />
    <xs:attribute ref="messageClass" />
    <xs:attribute ref="destinationType" />
    <xs:attribute ref="acknowledgeMode" />
    <xs:attribute ref="persistent" />
    <xs:attribute ref="subscriberType" />
    <xs:attribute ref="queueConnectionFactoryName" />
    <xs:attribute ref="topicConnectionFactoryName" />
    <xs:attribute ref="jmsTransacted" />
    <xs:attribute name="transacted" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether messages are send under transaction control.
 If set &lt;code&gt;true&lt;/code&gt;, messages are committed or rolled back under control of an XA-transaction. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="correlationIdToHex" />
    <xs:attribute ref="correlationIdToHexPrefix" />
    <xs:attribute ref="messageTimeToLive" />
    <xs:attribute ref="correlationIdMaxLength" />
    <xs:attribute ref="messageSelector" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for authentication to JMS server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="lookupDestination" />
    <xs:attributeGroup ref="JndiBaseDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ExchangeMailListenerType">
    <xs:attributeGroup ref="ExchangeMailListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.receivers.ExchangeMailListener" />
  </xs:complexType>
  <xs:attributeGroup name="ExchangeMailListenerDeclaredAttributeGroup">
    <xs:attribute name="mailAddress" type="xs:string">
      <xs:annotation>
        <xs:documentation>The mail address of the mailbox connected to (also used for auto discovery)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>Url of the Exchange server. Set to e.g. https://outlook.office365.com/EWS/Exchange.asmx to speed up startup, leave empty to use autodiscovery</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Client ID that represents a registered application in Azure AD which could be found at Azure AD -&gt; App Registrations -&gt; MyApp -&gt; Overview.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clientSecret" type="xs:string">
      <xs:annotation>
        <xs:documentation>Client secret that belongs to registered application in Azure AD which could be found at Azure AD -&gt; App Registrations -&gt; MyApp -&gt; Certificates and Secrets</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tenantId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Tenant ID that represents the tenant in which the registered application exists within Azure AD which could be found at Azure AD -&gt; App Registrations -&gt; MyApp -&gt; Overview.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username for authentication to mail server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication to mail server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain client ID and secret or username and password for authentication to Exchange mail server.
 If the attribute tenantId is empty, the deprecated Basic Authentication method is used.
 If the attribute tenantId is not empty, the username and password are treated as the client ID and secret.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filter" type="xs:string">
      <xs:annotation>
        <xs:documentation>If empty, all mails are retrieved. If set to &lt;code&gt;NDR&lt;/code&gt; only Non-Delivery Report mails ('bounces') are retrieved</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyAddressFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of fields to try as response address Default: replyTo,from,sender,Return-Path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>proxy port Default: 8080</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy authAlias</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyDomain" type="xs:string">
      <xs:annotation>
        <xs:documentation>proxy domain</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mailboxObjectSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>Separator character used when working with multiple mailboxes, specified before the separator in the object name &lt;code&gt;test@organisation.com|My sub folder&lt;/code&gt; or &lt;code&gt;test@organisation.com|AAMkADljZDMxYzIzLTFlMjYtNGY4Mi1hM2Y1LTc2MjE5ZjIyZmMyNABGAAAAAAAu/9EmV5M6QokBRZwID1Q6BwDXQXY+F44hRbDfTB9v8jRfAAAEUqUVAADXQXY+F44hRbDfTB9v8jRfAAKA4F+pAAA=&lt;/code&gt;.
 Please consider when moving emails across mailboxes that there will be a null value returned instead of the newly created identifier. Default: |</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Resource url to keystore or certificate. If none specified, the JVMs default keystore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType">
      <xs:annotation>
        <xs:documentation>Type of keystore Default: pkcs12</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to obtain keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to access keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias to obtain specific certificate or key in keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>Resource url to truststore. If none specified, the JVMs default truststore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType">
      <xs:annotation>
        <xs:documentation>Type of truststore Default: jks</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password to access truststore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Trust manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the hostname in the certificate will be checked against the actual hostname of the peer</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, self signed certificates are accepted Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, CertificateExpiredExceptions are ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ExchangeMailListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="ExchangeMailListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="MailListenerCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="MailListenerDeclaredAttributeGroup">
    <xs:attribute name="simple" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the xml string passed to the pipeline only contains the subject of the mail (to save memory) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeEmailAsStreamInSessionKey" type="xs:string" />
    <xs:attribute name="messageType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Determines the contents of the message that is sent to the Pipeline. can be one of:
 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;email&lt;/code&gt;, for an XML containing most relevant information, except the body and the attachments&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;contents&lt;/code&gt;, for the body of the message&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;mime&lt;/code&gt;, for the MIME contents of the message&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; or &lt;code&gt;path&lt;/code&gt;, for an internal handle of mail message, that can be used by a related MailFileSystemSender&lt;/li&gt;
 &lt;li&gt;the key of any header present in the message context&lt;/li&gt;
 &lt;/ul&gt; Default: email</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="MailListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="MailListenerDeclaredAttributeGroup" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="inputFolder" />
    <xs:attribute ref="inProcessFolder" />
    <xs:attribute ref="processedFolder" />
    <xs:attribute ref="errorFolder" />
    <xs:attribute ref="holdFolder" />
    <xs:attribute ref="logFolder" />
    <xs:attribute ref="createFolders" />
    <xs:attribute ref="delete" />
    <xs:attribute ref="numberOfBackups" />
    <xs:attribute ref="overwrite" />
    <xs:attribute ref="fileTimeSensitive" />
    <xs:attribute ref="minStableTime" />
    <xs:attribute ref="messageIdPropertyKey" />
    <xs:attribute ref="disableMessageBrowsers" />
    <xs:attribute ref="wildcard" />
    <xs:attribute ref="excludeWildcard" />
    <xs:attribute ref="storeMetadataInSessionKey" />
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset to be used for extracting the contents</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat">
      <xs:annotation>
        <xs:documentation>OutputFormat of message for messageType=info Default: XML</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DocumentFormatAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="FrankListenerType">
    <xs:attributeGroup ref="FrankListenerDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.receivers.FrankListener" />
  </xs:complexType>
  <xs:attributeGroup name="FrankListenerDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the listener by which it can be found by the org.frankframework.senders.FrankSender. If this
 is not configured, the name will default to the name of the org.frankframework.core.Adapter.
 The name of the {@code FrankListener} must be unique across the configuration.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="FtpFileSystemListenerType">
    <xs:attributeGroup ref="FtpFileSystemListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.receivers.FtpFileSystemListener" />
  </xs:complexType>
  <xs:attributeGroup name="FtpFileSystemListenerDeclaredAttributeGroup">
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>pathname of the file or directory to list. Default: Home folder of the ftp user</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name or ip address of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>Port number of remote host Default: 21</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the user to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy hostname</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>Proxy port Default: 1080</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ftpType">
      <xs:annotation>
        <xs:documentation>FTP protocol to use Default: FTP</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="FtpTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="fileType">
      <xs:simpleType>
        <xs:union memberTypes="FileTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="passive" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, passive ftp is used: before data is sent, a pasv command is issued, and the connection is set up by the server Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyTransportType">
      <xs:annotation>
        <xs:documentation>(ftps) Transport type in case of sftp Default: SOCKS5</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="TransportTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystore" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Resource url to keystore or certificate to be used for authentication. If none specified, the JVMs default keystore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType">
      <xs:annotation>
        <xs:documentation>(ftps) Type of keystore Default: pkcs12</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Authentication alias used to obtain keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Default password to access keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Alias to obtain specific certificate or key in keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Authentication alias to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Default password to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Key manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststore" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Resource url to truststore to be used for authenticating peer. If none specified, the JVMs default truststore will be used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststoreType">
      <xs:annotation>
        <xs:documentation>(ftps) Type of truststore Default: jks</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="truststoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Authentication alias used to obtain truststore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truststorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Default password to access truststore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trustManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>(ftps) Trust manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verifyHostname" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(ftps) If &lt;code&gt;true&lt;/code&gt;, the hostname in the certificate will be checked against the actual hostname of the peer</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowSelfSignedCertificates" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(ftps) If &lt;code&gt;true&lt;/code&gt;, self signed certificates are accepted Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreCertificateExpiredException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(ftps) If &lt;code&gt;true&lt;/code&gt;, CertificateExpiredExceptions are ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prot">
      <xs:annotation>
        <xs:documentation>Sets the &lt;code&gt;Data Channel Protection Level&lt;/code&gt;. Default: C</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ProtAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FtpFileSystemListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="FtpFileSystemListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemListenerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FxfListenerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FxfListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.fxf.FxfListener" />
  </xs:complexType>
  <xs:attributeGroup name="FxfListenerDeclaredAttributeGroup">
    <xs:attribute name="fxfFileSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the session key to store the name of the received file in Default: fxfFile</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="moveProcessedFile" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the received file is moved after being processed Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processedSiblingDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;moveProcessedFile=true&lt;/code&gt;) &lt;b&gt;sibling&lt;/b&gt; directory (related to the parent directory of the file to process) where files are stored after being processed Default: processed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createProcessedDirectory" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;moveProcessedFile=true&lt;/code&gt;) when set to &lt;code&gt;true&lt;/code&gt;, the directory to move processed files in is created if it does not exist Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FxfListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="FxfListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="EsbJmsListenerCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="HttpListenerType">
    <xs:attributeGroup ref="HttpListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.http.HttpListener" />
  </xs:complexType>
  <xs:attributeGroup name="HttpListenerDeclaredAttributeGroup">
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the service that is provided by the adapter of this listener</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="HttpListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="HttpListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="PushingListenerAdapterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ImapListenerType">
    <xs:attributeGroup ref="ImapListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.receivers.ImapListener" />
  </xs:complexType>
  <xs:attributeGroup name="ImapListenerDeclaredAttributeGroup">
    <xs:attribute name="host" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The hostname of the IMAP server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>The port of the IMAP server Default: 993</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain accessToken or username and password for authentication to Exchange mail server.
 If the alias refers to a combination of a username and a password, the deprecated Basic Authentication method is used.
 If the alias refers to a password without a username, the password is treated as the accessToken.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username for authentication to mail server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for authentication to mail server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder (subfolder of root or of inbox) to look for mails. If empty, the inbox folder is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replyAddressFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of fields to try as response address Default: replyTo,from,sender,Return-Path</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ImapListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="ImapListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="MailListenerCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JavaListenerType">
    <xs:attributeGroup ref="JavaListenerDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.receivers.JavaListener" />
  </xs:complexType>
  <xs:attributeGroup name="JavaListenerDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Internal name of the listener, as known to the adapter. An IbisLocalSender refers to this name in its &lt;code&gt;javaListener&lt;/code&gt;-attribute.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>External Name of the listener. An IbisJavaSender refers to this name in its &lt;code&gt;serviceName&lt;/code&gt;-attribute.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="local" type="xs:string" />
    <xs:attribute name="isolated" type="frankBoolean" />
    <xs:attribute name="synchronous" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;false&lt;/code&gt;, the request is executed asynchronously. N.B. be aware that there is no limit on the number of threads generated Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnedSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of keys of session variables that should be returned to caller, for correct results as well as for erroneous results.
 If not set (not even to an empty value), all session keys can be returned. Default: all session keys can be returned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Should the JavaListener throw a ListenerException when it occurs or return an error message Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="httpWsdl" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the WSDL of the service provided by this listener will available for download Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="JdbcListenerType">
    <xs:attributeGroup ref="JdbcListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.JdbcListener" />
  </xs:complexType>
  <xs:attributeGroup name="JdbcListenerDeclaredAttributeGroup">
    <xs:attribute ref="peekUntransacted" />
    <xs:attribute ref="peekQuery" />
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Primary key field of the table, used to identify and differentiate messages.
 &lt;b&gt;NB: there should be an index on this field!&lt;/b&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Field containing the message data Default: &lt;i&gt;same as keyField&lt;/i&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType">
      <xs:annotation>
        <xs:documentation>Type of the field containing the message data Default: &lt;i&gt;String&lt;/i&gt;</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="MessageFieldTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="messageIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Field containing the &lt;code&gt;messageId&lt;/code&gt;.
 &lt;b&gt;NB: If this column is not set the default (primary key) keyField will be used as messageId!&lt;/b&gt; Default: &lt;i&gt;same as keyField&lt;/i&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Field containing the &lt;code&gt;correlationId&lt;/code&gt;.
 &lt;b&gt;NB: If this column is not set, the &lt;code&gt;messageId&lt;/code&gt; and &lt;code&gt;correlationId&lt;/code&gt; will be the same!&lt;/b&gt; Default: &lt;i&gt;same as messageIdField&lt;/i&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether BLOB is considered stored compressed in the database Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="blobCharset" />
    <xs:attribute name="blobSmartGet" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database. N.B. When set true, then the BLOB will be converted into a string Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="trace" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JdbcQueryListenerType">
    <xs:attributeGroup ref="JdbcQueryListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.JdbcQueryListener" />
  </xs:complexType>
  <xs:attributeGroup name="JdbcQueryListenerDeclaredAttributeGroup">
    <xs:attribute name="selectQuery" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Query that returns a row to be processed. Must contain a key field and optionally a message field.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="updateStatusToProcessedQuery" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>SQL statement to set the status of a row to 'processed'. Must contain one parameter, that is set to the value of the key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="updateStatusToErrorQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>SQL statement to set the status of a row to 'error'. Must contain one parameter, that is set to the value of the key Default: same as &lt;code&gt;updateStatusToProcessedQuery&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="updateStatusToInProcessQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>SQL statement to set the status of a row to 'in process'. Must contain one parameter, that is set to the value of the key.
 Can be left emtpy if database has SKIP LOCKED functionality and the Receiver can be (and is) set to Required or RequiresNew.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="revertInProcessStatusQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>SQL statement to set the status of a row to 'available'. Must contain one parameter, that is set to the value of the key.
 Only used in rollbacks, when updateStatusToInProcessQuery is specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcQueryListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcQueryListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcListenerCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JdbcTableListenerType">
    <xs:attributeGroup ref="JdbcTableListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.JdbcTableListener" />
  </xs:complexType>
  <xs:attributeGroup name="JdbcTableListenerDeclaredAttributeGroup">
    <xs:attribute name="tableName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the table to be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="tableAlias" />
    <xs:attribute name="statusField" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Field containing the status of the message. 
 &lt;b&gt;NB: For optimal performance, an index should exist that starts with this field, followed by all fields that are used with a fixed value in the select condition, and end with the &lt;code&gt;orderField&lt;/code&gt;.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="orderField" />
    <xs:attribute name="timestampField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Field used to store the date and time of the last change of the &lt;code&gt;statusField&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commentField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Field used to store the reason of the last change of the &lt;code&gt;statusField&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="maxCommentLength" />
    <xs:attribute name="statusValueAvailable" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Value of &lt;code&gt;statusField&lt;/code&gt; indicating row is available to be processed. If not specified, any row not having any of the other status values is considered available.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueError" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Value of &lt;code&gt;statusField&lt;/code&gt; indicating the processing of the row resulted in an error</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueProcessed" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Value of status field indicating row is processed OK</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueInProcess" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of &lt;code&gt;statusField&lt;/code&gt; indicating is being processed. Can be left emtpy if database has &lt;code&gt;SKIP LOCKED&lt;/code&gt; functionality and the &lt;code&gt;transactionAttribute&lt;/code&gt; of the &lt;code&gt;Receiver&lt;/code&gt; can be (and is) set to &lt;code&gt;Required&lt;/code&gt; or &lt;code&gt;RequiresNew&lt;/code&gt;.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueHold" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of &lt;code&gt;statusField&lt;/code&gt; indicating message is on Hold, temporarily</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="selectCondition" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcTableListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcTableListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcListenerCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JmsListenerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="PushingJmsListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jms.JmsListener" />
  </xs:complexType>
  <xs:complexType name="KafkaListenerType">
    <xs:attributeGroup ref="KafkaListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.kafka.KafkaListener" />
  </xs:complexType>
  <xs:attributeGroup name="KafkaListenerDeclaredAttributeGroup">
    <xs:attribute name="groupId" type="xs:string">
      <xs:annotation>
        <xs:documentation>The group id of the consumer</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="patternRecheckInterval" type="frankInt">
      <xs:annotation>
        <xs:documentation>How often to check for new topics when using Patterns. (in MS)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topics" type="xs:string">
      <xs:annotation>
        <xs:documentation>The topics to listen to as comma-separated list. Regular expressions are supported,
 for instance: {@code example.*}.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="KafkaListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="KafkaListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="KafkaFacadeDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MessageStoreListenerType">
    <xs:attributeGroup ref="MessageStoreListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.MessageStoreListener" />
  </xs:complexType>
  <xs:attributeGroup name="MessageStoreListenerDeclaredAttributeGroup">
    <xs:attribute name="slotId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Identifier for this service</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of sessionKey's to be read together with the message. Please note: corresponding MessageStoreSender must have the same value for this attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the table to be used Default: IBISSTORE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Primary key field of the table, used to identify and differentiate messages.
 &lt;b&gt;NB: there should be an index on this field!&lt;/b&gt; Default: MESSAGEKEY</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Field containing the message data Default: MESSAGE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Field containing the &lt;code&gt;messageId&lt;/code&gt;.
 &lt;b&gt;NB: If this column is not set the default (primary key) keyField will be used as messageId!&lt;/b&gt; Default: MESSAGEID</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIdField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Field containing the &lt;code&gt;correlationId&lt;/code&gt;.
 &lt;b&gt;NB: If this column is not set, the &lt;code&gt;messageId&lt;/code&gt; and &lt;code&gt;correlationId&lt;/code&gt; will be the same!&lt;/b&gt; Default: CORRELATIONID</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageFieldType">
      <xs:annotation>
        <xs:documentation>Type of the field containing the message data Default: BLOB</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="MessageFieldTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database. N.B. When set true, then the BLOB will be converted into a string Default: &lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusField" type="xs:string">
      <xs:annotation>
        <xs:documentation>Field containing the status of the message. 
 &lt;b&gt;NB: For optimal performance, an index should exist that starts with this field, followed by all fields that are used with a fixed value in the select condition, and end with the &lt;code&gt;orderField&lt;/code&gt;. Default: TYPE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timestampField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Field used to store the date and time of the last change of the &lt;code&gt;statusField&lt;/code&gt; Default: MESSAGEDATE</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commentField" type="xs:string">
      <xs:annotation>
        <xs:documentation>(optional) Field used to store the reason of the last change of the &lt;code&gt;statusField&lt;/code&gt; Default: COMMENTS</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueAvailable" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of statusField indicating row is available to be processed. If set empty, any row not having any of the other status values is considered available. Default: &lt;code&gt;M&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueInProcess" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of status field indicating is being processed. Set to &lt;code&gt;I&lt;/code&gt; if database has no SKIP LOCKED functionality, the Receiver cannot be set to &lt;code&gt;Required&lt;/code&gt; or &lt;code&gt;RequiresNew&lt;/code&gt;, or to support programmatic retry.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueError" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of &lt;code&gt;statusField&lt;/code&gt; indicating the processing of the row resulted in an error Default: &lt;code&gt;E&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueProcessed" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of status field indicating row is processed OK Default: &lt;code&gt;A&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statusValueHold" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of status field indicating message is on Hold, temporarily. If required, suggested value is &lt;code&gt;H&lt;/code&gt;.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="moveToMessageLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Move to messageLog after processing, as the message is already stored in the ibisstore only some fields need to be updated. When set &lt;code&gt;false&lt;/code&gt;, messages are deleted after being processed Default: &lt;code&gt;true&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="MessageStoreListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="MessageStoreListenerDeclaredAttributeGroup" />
    <xs:attribute ref="tableAlias" />
    <xs:attribute ref="orderField" />
    <xs:attribute ref="maxCommentLength" />
    <xs:attribute ref="selectCondition" />
    <xs:attribute ref="peekUntransacted" />
    <xs:attribute ref="peekQuery" />
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether BLOB is considered stored compressed in the database Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="blobCharset" />
    <xs:attribute ref="trace" />
    <xs:attributeGroup ref="JdbcFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MqttListenerType">
    <xs:attributeGroup ref="MqttFacadeDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.mqtt.MqttListener" />
  </xs:complexType>
  <xs:complexType name="PullingJmsListenerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JmsListenerBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jms.PullingJmsListener" />
  </xs:complexType>
  <xs:complexType name="RestListenerType">
    <xs:attributeGroup ref="RestListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.http.RestListener" />
  </xs:complexType>
  <xs:attributeGroup name="RestListenerDeclaredAttributeGroup">
    <xs:attribute name="uriPattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>Uri pattern to match, the {uri} part in https://mydomain.com/ibis4something/rest/{uri}, where mydomain.com and ibis4something refer to 'your ibis'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="method" type="xs:string">
      <xs:annotation>
        <xs:documentation>Method (e.g. GET or POST) to match</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="etagSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store etag</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentTypeSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of Session variable that determines requested content type, overrides produces</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>Can be either &lt;code&gt;/rest&lt;/code&gt; or &lt;code&gt;/rest-public&lt;/code&gt; and must correspond with the available RestListenerServlet path(s).</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authRoles" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of authorization roles which are granted for this rest service Default: IbisAdmin,IbisDataAdmin,IbisTester,IbisObserver,IbisWebService</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSecLog" type="frankBoolean" />
    <xs:attribute name="writeSecLogMessage" type="frankBoolean" />
    <xs:attribute name="retrieveMultipart" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Indicates whether the parts of a multipart entity should be retrieved and put in session keys. This can only be done once! Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="consumes">
      <xs:annotation>
        <xs:documentation>Mediatype (e.g. XML, JSON, TEXT) the RestServiceDispatcher receives as input Default: XML</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="MediaTypesAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="produces">
      <xs:annotation>
        <xs:documentation>Mediatype (e.g. XML, JSON, TEXT) the RestServiceDispatcher sends as output, if set to json the ibis will automatically try to convert the xml message Default: XML</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="MediaTypesAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="validateEtag" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to true the ibis will automatically validate and process etags Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generateEtag" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to true the ibis will automatically create an etag Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="automaticallyTransformToAndFromJson" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Uses an JsonPipe to convert the json-input to xml, and xml-output to json.
 Use with caution, a properly configured Input/Output-wrapper can do much more and is more robust! Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="RestListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="RestListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="PushingListenerAdapterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Samba2ListenerType">
    <xs:attributeGroup ref="Samba2ListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.receivers.Samba2Listener" />
  </xs:complexType>
  <xs:attributeGroup name="Samba2ListenerDeclaredAttributeGroup">
    <xs:attribute name="hostname" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Hostname of the SMB share.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>Port to connect to. Default: 445</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'.
 When setting SPNEGO, the host must use the FQDN, and must be registered on the KDC with a valid SPN. Default: SPNEGO</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="Samba2AuthTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domainName" type="xs:string">
      <xs:annotation>
        <xs:documentation>NTLM only: logon/authentication domain, in case the user account is bound to a domain such as Active Directory.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>May not contain '\\' characters. The destination share, aka smb://xxx/yyy share.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>SPNEGO only:
 Key Distribution Center, typically hosted on a domain controller.
 Stored in &lt;code&gt;java.security.krb5.kdc&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>SPNEGO only:
 Kerberos Realm, case sensitive. Typically upper case and the same as the domain name.
 An Active Directory domain acts as a Kerberos Realm.
 Stored in &lt;code&gt;java.security.krb5.realm&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Samba2ListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="Samba2ListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemListenerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SambaListenerType">
    <xs:attributeGroup ref="Samba2ListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.receivers.SambaListener" />
  </xs:complexType>
  <xs:complexType name="SapListenerType">
    <xs:attributeGroup ref="SapListenerImplCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.sap.SapListener" />
  </xs:complexType>
  <xs:attributeGroup name="SapListenerImplDeclaredAttributeGroup">
    <xs:attribute name="sapSystemName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the SapSystem used by this object</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="progid" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the RFC-destination to be registered in the SAP system</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionCount" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of connections that should be registered at the gateway Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SapListenerImplCumulativeAttributeGroup">
    <xs:attributeGroup ref="SapListenerImplDeclaredAttributeGroup" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the Ibis-object</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="correlationIdFieldIndex" />
    <xs:attribute ref="correlationIdFieldName" />
    <xs:attribute ref="requestFieldIndex" />
    <xs:attribute ref="requestFieldName" />
    <xs:attribute ref="replyFieldIndex" />
    <xs:attribute ref="replyFieldName" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="SftpFileSystemListenerType">
    <xs:attributeGroup ref="SftpFileSystemListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.receivers.SftpFileSystemListener" />
  </xs:complexType>
  <xs:attributeGroup name="SftpFileSystemListenerDeclaredAttributeGroup">
    <xs:attribute name="remoteDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path of the file or directory to start working. Default: Home folder of the sftp user</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name or ip address of remote host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>Port number of remote host Default: 21</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the alias to obtain credentials to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the user to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password to authenticatie on remote server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyHost" type="xs:string">
      <xs:annotation>
        <xs:documentation>Proxy hostname</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPort" type="frankInt">
      <xs:annotation>
        <xs:documentation>Proxy port Default: 1080</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias to obtain credentials to authenticate on proxy</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyUsername" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default user name in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password in case proxy requires authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="proxyTransportType">
      <xs:annotation>
        <xs:documentation>Transport type in case of sftp Default: SOCKS5</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="TransportTypeAttributeValuesType_2 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="prefCSEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional preferred encryption from client to server for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefSCEncryption" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional preferred encryption from server to client for sftp protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyFilePath" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path to private key file for sftp authentication</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the alias to obtain credentials for passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="privateKeyPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Passphrase of private key file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="knownHostsPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path to file with knownhosts</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictHostKeyChecking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Verify the hosts againt the knownhosts file. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SftpFileSystemListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="SftpFileSystemListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemListenerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SimpleJdbcListenerType">
    <xs:attributeGroup ref="SimpleJdbcListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.SimpleJdbcListener" />
  </xs:complexType>
  <xs:attributeGroup name="SimpleJdbcListenerDeclaredAttributeGroup">
    <xs:attribute name="selectQuery" type="xs:string">
      <xs:annotation>
        <xs:documentation>count query that returns the number of available records. when there are available records the pipeline is activated</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trace" type="frankBoolean" />
  </xs:attributeGroup>
  <xs:attributeGroup name="SimpleJdbcListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="SimpleJdbcListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JdbcFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="TibcoLogJmsListenerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JmsListenerBaseDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="PushingJmsListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.tibco.TibcoLogJmsListener" />
  </xs:complexType>
  <xs:complexType name="WebServiceListenerType">
    <xs:attributeGroup ref="WebServiceListenerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.http.WebServiceListener" />
  </xs:complexType>
  <xs:attributeGroup name="WebServiceListenerDeclaredAttributeGroup">
    <xs:attribute name="soap" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt; the SOAP envelope is removed from received messages and a SOAP envelope is added to returned messages (SOAP envelope will not be visible to the pipeline) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespaceURI" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace of the service that is provided by the adapter of this listener.
 If specified, requests posted to https://mydomain.com/ibis4something/servlet/rpcrouter that have this namespace in their body  will be handled by this listener,
 where mydomain.com and ibis4something refer to 'your ibis'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="applicationFaultsAsSoapFaults" type="frankBoolean" />
    <xs:attribute name="address" type="xs:string">
      <xs:annotation>
        <xs:documentation>The address to listen to, e.g the part &amp;lt;address&amp;gt; in https://mydomain.com/ibis4something/services/&amp;lt;address&amp;gt;,
 where mydomain.com and ibis4something refer to 'your ibis'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mtomEnabled" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set, MTOM is enabled on the SOAP binding</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="attachmentSessionKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of session keys to hold contents of attachments of the request</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable that holds the description (name, sessionKey, mimeType) of the parts present in the request. Only used if attachmentSessionKeys are specified Default: multipartXml</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="WebServiceListenerCumulativeAttributeGroup">
    <xs:attributeGroup ref="WebServiceListenerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="PushingListenerAdapterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="ErrorSenderElementGroup">
    <xs:choice>
      <xs:element name="ErrorSender">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="CacheElementGroup" />
              <xs:group ref="ParamElementGroup" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ErrorSenderElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ErrorSenderElementGroupBase">
    <xs:choice>
      <xs:element name="Afm2EdiFactErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Afm2EdiFactSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="AmazonS3ErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="AmazonS3SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BisJmsErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BisJmsSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CmisErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CmisSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CommandErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CommandSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DelayErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DelaySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DirectQueryErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DirectQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EchoErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EchoSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbJmsErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbJmsSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ExchangeFolderErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ExchangeFolderSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FileErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FileSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FileSystemSenderWithAttachmentsErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FileSystemSenderWithAttachmentsType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedQueryErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedResultErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedResultSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FrankErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FrankSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FtpFileSystemErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FtpFileSystemSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="HttpErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="HttpSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IMSErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IMSSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IbisJavaErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IbisJavaSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IbisLocalErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IbisLocalSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IdinErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IdinSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IdocErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IdocSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ImapErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ImapSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JavascriptErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JavascriptSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JmsErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JmsSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonXsltErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonXsltSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="KafkaErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="KafkaSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LdapErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LdapSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LocalFileSystemErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LocalFileSystemSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LogErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LogSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MQErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MQSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MailErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MailSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MessageStoreErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MessageStoreSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MongoDbErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MongoDbSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MqttErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MqttSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MultipartHttpErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MultipartHttpSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="NetStorageErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="NetStorageSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ParallelSendersErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ParallelSendersType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ReconnectSenderWrapperErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ReconnectSenderWrapperType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ReloadErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ReloadSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RestErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RestSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ResultSet2FileErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ResultSet2FileSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba1ErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba1SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba2ErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba2SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SapErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SapSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SchedulerErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SchedulerSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SendGridErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SendGridSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SenderSeriesErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SenderSeriesType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SenderWrapperErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SenderWrapperType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SftpFileSystemErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SftpFileSystemSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ShadowErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ShadowSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="StoredProcedureQueryErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="StoredProcedureQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WebServiceNtlmErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WebServiceNtlmSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WebServiceErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WebServiceSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XComErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XComSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XfbErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XfbSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlJmsBrowserErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlJmsBrowserSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlQueryErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlQuerySenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlValidatorErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlValidatorSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XsltErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XsltSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ZipWriterErrorSender">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ZipWriterSenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorSender" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="ErrorStorageElementGroup">
    <xs:choice>
      <xs:element name="ErrorStorage">
        <xs:complexType>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="errorStorage" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ErrorStorageElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ErrorStorageElementGroupBase">
    <xs:choice>
      <xs:element name="DummyErrorStorage">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DummyTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorStorage" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbJmsErrorStorage">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbJmsTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorStorage" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JdbcErrorStorage">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JdbcTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorStorage" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JmsErrorStorage">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JmsTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorStorage" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="DummyTransactionalStorageType">
    <xs:attributeGroup ref="JdbcTransactionalStorageCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.DummyTransactionalStorage" />
  </xs:complexType>
  <xs:complexType name="EsbJmsTransactionalStorageType">
    <xs:attributeGroup ref="JmsTransactionalStorageCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.esb.EsbJmsTransactionalStorage" />
  </xs:complexType>
  <xs:complexType name="JmsTransactionalStorageType">
    <xs:attributeGroup ref="JmsTransactionalStorageCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jms.JmsTransactionalStorage" />
  </xs:complexType>
  <xs:attributeGroup name="JmsTransactionalStorageDeclaredAttributeGroup">
    <xs:attribute name="slotId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional identifier for this storage, to be able to share the physical storage between a number of receivers and pipes.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Possible values are &lt;code&gt;E&lt;/code&gt; (error store), &lt;code&gt;M&lt;/code&gt; (message store), &lt;code&gt;L&lt;/code&gt; (message log for Pipe) or &lt;code&gt;A&lt;/code&gt; (message log for Receiver).&lt;br/&gt;
 Receiver will always set type to &lt;code&gt;E&lt;/code&gt; for errorStorage and always set type to &lt;code&gt;A&lt;/code&gt; for messageLog. SenderPipe will set type to &lt;code&gt;L&lt;/code&gt; for messageLog (when type isn't specified).&lt;br/&gt;
 See MessageStoreSender for type &lt;code&gt;M&lt;/code&gt;. Default: &lt;code&gt;E&lt;/code&gt; for errorStorage on Receiver&lt;br/&gt;&lt;code&gt;A&lt;/code&gt; for messageLog on Receiver&lt;br/&gt;&lt;code&gt;L&lt;/code&gt; for messageLog on Pipe</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JmsTransactionalStorageCumulativeAttributeGroup">
    <xs:attributeGroup ref="JmsTransactionalStorageDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JmsMessageBrowserCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JmsMessageBrowserDeclaredAttributeGroup">
    <xs:attribute name="timeOut" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout &lt;i&gt;in milliseconds&lt;/i&gt; for receiving a message from the queue Default: 3000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout &lt;i&gt;in milliseconds&lt;/i&gt; for receiving a message from the queue Default: 3000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to mask strings in the errorStore/logStore.
 Every character between to the strings in this expression will be replaced by a '*'.
 &lt;br/&gt;
 For example, the regular expression (?&amp;lt;=&amp;lt;party&amp;gt;).*?(?=&amp;lt;/party&amp;gt;) will replace every
 character between keys &amp;lt;party&amp;gt; and &amp;lt;/party&amp;gt;
 &lt;br/&gt;
 When no hideRegex is configured on the errorStore / logStore but is configured on the org.frankframework.receivers.Receiver#setHideRegex(String),
 then the Receiver's hideRegex is used for the errorStore / logStore.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty) Specifies the way to hide Default: ALL</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="HideMethodAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JmsMessageBrowserCumulativeAttributeGroup">
    <xs:attributeGroup ref="JmsMessageBrowserDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JMSFacadeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="MessageLogElementGroup">
    <xs:choice>
      <xs:element name="MessageLog">
        <xs:complexType>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="messageLog" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="MessageLogElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="MessageLogElementGroupBase">
    <xs:choice>
      <xs:element name="DummyMessageLog">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DummyTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="messageLog" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbJmsMessageLog">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbJmsTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="messageLog" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JdbcMessageLog">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JdbcTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="messageLog" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JmsMessageLog">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JmsTransactionalStorageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="messageLog" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="ErrorMessageFormatterElementGroup">
    <xs:choice>
      <xs:element name="ErrorMessageFormatter">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element name="Param" type="ParamType" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="errorMessageFormatter" />
          <xs:attribute name="className" type="xs:string" default="org.frankframework.errormessageformatters.ErrorMessageFormatter" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ErrorMessageFormatterElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ErrorMessageFormatterElementGroupBase">
    <xs:choice>
      <xs:element name="FixedErrorMessageErrorMessageFormatter">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedErrorMessageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorMessageFormatter" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedErrorMessageFormatter">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedErrorMessageFormatterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorMessageFormatter" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapErrorMessageErrorMessageFormatter">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapErrorMessageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorMessageFormatter" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapErrorMessageFormatter">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapErrorMessageFormatterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorMessageFormatter" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XslErrorMessageFormatter">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XslErrorMessageFormatterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorMessageFormatter" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Y01ErrorMessageFormatter">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Y01ErrorMessageFormatterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="errorMessageFormatter" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="FixedErrorMessageType">
    <xs:attributeGroup ref="FixedErrorMessageFormatterDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.errormessageformatters.FixedErrorMessage" />
  </xs:complexType>
  <xs:complexType name="FixedErrorMessageFormatterType">
    <xs:attributeGroup ref="FixedErrorMessageFormatterDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.errormessageformatters.FixedErrorMessageFormatter" />
  </xs:complexType>
  <xs:attributeGroup name="FixedErrorMessageFormatterDeclaredAttributeGroup">
    <xs:attribute name="returnString" type="xs:string">
      <xs:annotation>
        <xs:documentation>returned message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file containing the result message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceFrom" type="xs:string" />
    <xs:attribute name="replaceTo" type="xs:string" />
    <xs:attribute name="styleSheetName" type="xs:string" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="SoapErrorMessageType">
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.errormessageformatters.SoapErrorMessage" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="SoapErrorMessageFormatterType">
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.errormessageformatters.SoapErrorMessageFormatter" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="XslErrorMessageFormatterType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="XslErrorMessageFormatterDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="XslErrorMessageFormatterDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.errormessageformatters.XslErrorMessageFormatter" />
  </xs:complexType>
  <xs:group name="XslErrorMessageFormatterDeclaredChildGroup">
    <xs:sequence>
      <xs:element name="Param" minOccurs="0" maxOccurs="unbounded" type="ParamType" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="XslErrorMessageFormatterDeclaredAttributeGroup">
    <xs:attribute name="styleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL to the stylesheet used to transform the output of the standard ErrorMessageFormatter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>xPathExpression to use for transformation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="Y01ErrorMessageFormatterType">
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.errormessageformatters.Y01ErrorMessageFormatter" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:group name="InputValidatorElementGroup">
    <xs:choice>
      <xs:element name="InputValidator">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element name="Forward" type="ForwardType" />
              <xs:element name="Locker" type="LockerType" />
              <xs:group ref="ParamElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="InputValidatorElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="InputValidatorElementGroupBase">
    <xs:choice>
      <xs:element name="ApiWsdlXmlInputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiWsdlXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbSoapInputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbSoapValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfXmlInputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Json2XmlInputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Json2XmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonInputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapInputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WsdlXmlInputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WsdlXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlInputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlWellFormedCheckerInputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlWellFormedCheckerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="ApiWsdlXmlValidatorType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ApiWsdlXmlValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.api.ApiWsdlXmlValidator" />
  </xs:complexType>
  <xs:attributeGroup name="ApiWsdlXmlValidatorDeclaredAttributeGroup">
    <xs:attribute name="multipart" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>indicates whether the message is multipart/form-data. If so, the wsdl only represents the first part, other parts are attachments. This attribute is only used for generating the 'real' wsdl which is available in the ibis console (../rest/webservices) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ApiWsdlXmlValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="ApiWsdlXmlValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="WsdlXmlValidatorCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="AbstractPipeDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Locker" minOccurs="0" maxOccurs="1" type="LockerType" />
      <xs:element name="Forward" minOccurs="0" maxOccurs="unbounded" type="ForwardType" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="AbstractPipeDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe. Can be referenced by the &lt;code&gt;path&lt;/code&gt; attribute of a PipeForward.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="getInputFromSessionKey" />
    <xs:attribute ref="getInputFromFixedValue" />
    <xs:attribute ref="emptyInputReplacement" />
    <xs:attribute ref="preserveInput" />
    <xs:attribute ref="storeResultInSessionKey" />
    <xs:attribute ref="maxThreads" />
    <xs:attribute ref="chompCharSize" />
    <xs:attribute ref="elementToMove" />
    <xs:attribute ref="elementToMoveSessionKey" />
    <xs:attribute ref="elementToMoveChain" />
    <xs:attribute ref="durationThreshold" />
    <xs:attribute ref="removeCompactMsgNamespaces" />
    <xs:attribute ref="restoreMovedElements" />
    <xs:attribute ref="sizeStatistics" />
    <xs:attribute ref="writeToSecLog" />
    <xs:attribute ref="secLogSessionKeys" />
    <xs:attribute ref="logIntermediaryResults" />
    <xs:attribute ref="hideRegex" />
  </xs:attributeGroup>
  <xs:attributeGroup name="AbstractPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="AbstractPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="TransactionAttributesType">
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.core.TransactionAttributes" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="TransactionAttributesDeclaredAttributeGroup">
    <xs:attribute name="transacted" type="frankBoolean" />
    <xs:attribute ref="transactionTimeout" />
    <xs:attribute ref="transactionAttribute" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="WsdlXmlValidatorType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="WsdlXmlValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.WsdlXmlValidator" />
  </xs:complexType>
  <xs:attributeGroup name="WsdlXmlValidatorDeclaredAttributeGroup">
    <xs:attribute name="wsdl" type="xs:string">
      <xs:annotation>
        <xs:documentation>The WSDL to read the XSDs from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the child element of the SOAP body, or a comma separated list of names to choose from (only one is allowed) (WSDL generator will use the first element) (use empty value to allow an empty SOAP body, for example to allow element x and an empty SOAP body use: x,). In case the request contains SOAPAction header and the WSDL contains an element specific to that SOAPAction, it will use that element as SOAP body.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaLocationToAdd" type="xs:string">
      <xs:annotation>
        <xs:documentation>Pairs of URI references which will be added to the WSDL</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Creates &lt;code&gt;schemaLocation&lt;/code&gt; attribute based on the WSDL and replaces the namespace of the soap body element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="WsdlXmlValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="WsdlXmlValidatorDeclaredAttributeGroup" />
    <xs:attribute ref="root" />
    <xs:attribute ref="outputSoapBody" />
    <xs:attribute ref="soapHeader" />
    <xs:attribute ref="soapHeaderNamespace" />
    <xs:attribute ref="soapVersion" />
    <xs:attribute ref="allowPlainXml" />
    <xs:attribute ref="ignoreUnknownNamespaces" />
    <xs:attributeGroup ref="Json2XmlValidatorDeclaredAttributeGroup" />
    <xs:attribute ref="schema" />
    <xs:attribute ref="schemaLocation" />
    <xs:attribute ref="noNamespaceSchemaLocation" />
    <xs:attribute ref="responseRoot" />
    <xs:attribute ref="fullSchemaChecking" />
    <xs:attribute ref="throwException" />
    <xs:attribute ref="reasonSessionKey" />
    <xs:attribute ref="xmlReasonSessionKey" />
    <xs:attribute ref="validateFile" />
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; Default: utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="addNamespaceToSchema" />
    <xs:attribute ref="importedSchemaLocationsToIgnore" />
    <xs:attribute ref="useBaseImportedSchemaLocationsToIgnore" />
    <xs:attribute ref="importedNamespacesToIgnore" />
    <xs:attribute ref="warn" />
    <xs:attribute ref="ignoreCaching" />
    <xs:attribute ref="xmlSchemaVersion" />
    <xs:attribute ref="soapNamespace" />
    <xs:attribute ref="rootElementSessionKey" />
    <xs:attribute ref="rootNamespaceSessionKey" />
    <xs:attribute ref="schemaSessionKey" />
    <xs:attribute ref="forwardFailureToSuccess" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe. Can be referenced by the &lt;code&gt;path&lt;/code&gt; attribute of a PipeForward.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute ref="getInputFromSessionKey" />
    <xs:attribute ref="getInputFromFixedValue" />
    <xs:attribute ref="emptyInputReplacement" />
    <xs:attribute ref="preserveInput" />
    <xs:attribute ref="storeResultInSessionKey" />
    <xs:attribute ref="maxThreads" />
    <xs:attribute ref="chompCharSize" />
    <xs:attribute ref="elementToMove" />
    <xs:attribute ref="elementToMoveSessionKey" />
    <xs:attribute ref="elementToMoveChain" />
    <xs:attribute ref="durationThreshold" />
    <xs:attribute ref="removeCompactMsgNamespaces" />
    <xs:attribute ref="restoreMovedElements" />
    <xs:attribute ref="sizeStatistics" />
    <xs:attribute ref="writeToSecLog" />
    <xs:attribute ref="secLogSessionKeys" />
    <xs:attribute ref="logIntermediaryResults" />
    <xs:attribute ref="hideRegex" />
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SoapValidatorType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SoapValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.soap.SoapValidator" />
  </xs:complexType>
  <xs:attributeGroup name="SoapValidatorDeclaredAttributeGroup">
    <xs:attribute ref="root" />
    <xs:attribute name="soapBody" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the child element of the SOAP body, or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="outputSoapBody" />
    <xs:attribute ref="soapHeader" />
    <xs:attribute ref="soapHeaderNamespace" />
    <xs:attribute ref="soapVersion" />
    <xs:attribute ref="allowPlainXml" />
    <xs:attribute ref="ignoreUnknownNamespaces" />
  </xs:attributeGroup>
  <xs:attributeGroup name="SoapValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="SoapValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="Json2XmlValidatorDeclaredAttributeGroup" />
    <xs:attribute ref="schema" />
    <xs:attribute ref="schemaLocation" />
    <xs:attribute ref="noNamespaceSchemaLocation" />
    <xs:attribute ref="responseRoot" />
    <xs:attribute ref="fullSchemaChecking" />
    <xs:attribute ref="throwException" />
    <xs:attribute ref="reasonSessionKey" />
    <xs:attribute ref="xmlReasonSessionKey" />
    <xs:attribute ref="validateFile" />
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; Default: utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="addNamespaceToSchema" />
    <xs:attribute ref="importedSchemaLocationsToIgnore" />
    <xs:attribute ref="useBaseImportedSchemaLocationsToIgnore" />
    <xs:attribute ref="importedNamespacesToIgnore" />
    <xs:attribute ref="warn" />
    <xs:attribute ref="ignoreCaching" />
    <xs:attribute ref="xmlSchemaVersion" />
    <xs:attribute ref="soapNamespace" />
    <xs:attribute ref="rootElementSessionKey" />
    <xs:attribute ref="rootNamespaceSessionKey" />
    <xs:attribute ref="schemaSessionKey" />
    <xs:attribute ref="forwardFailureToSuccess" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe. Can be referenced by the &lt;code&gt;path&lt;/code&gt; attribute of a PipeForward.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute ref="getInputFromSessionKey" />
    <xs:attribute ref="getInputFromFixedValue" />
    <xs:attribute ref="emptyInputReplacement" />
    <xs:attribute ref="preserveInput" />
    <xs:attribute ref="storeResultInSessionKey" />
    <xs:attribute ref="maxThreads" />
    <xs:attribute ref="chompCharSize" />
    <xs:attribute ref="elementToMove" />
    <xs:attribute ref="elementToMoveSessionKey" />
    <xs:attribute ref="elementToMoveChain" />
    <xs:attribute ref="durationThreshold" />
    <xs:attribute ref="removeCompactMsgNamespaces" />
    <xs:attribute ref="restoreMovedElements" />
    <xs:attribute ref="sizeStatistics" />
    <xs:attribute ref="writeToSecLog" />
    <xs:attribute ref="secLogSessionKeys" />
    <xs:attribute ref="logIntermediaryResults" />
    <xs:attribute ref="hideRegex" />
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Json2XmlValidatorType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="Json2XmlValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.Json2XmlValidator" />
  </xs:complexType>
  <xs:attributeGroup name="Json2XmlValidatorDeclaredAttributeGroup">
    <xs:attribute name="targetNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Only for JSON input: namespace of the resulting XML. Need only be specified when the namespace of root name is ambiguous in the schema</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat">
      <xs:annotation>
        <xs:documentation>Default format of the result, that is used if the format cannot be found from outputFormatSessionKey or from inputFormatSessionKey (when validating responses and autoFormat=true) Default: XML</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DocumentFormatAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="outputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve outputFormat from Default: outputFormat</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFormatSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to store the inputFormat in, to be able to set the outputformat when autoFormat=true. Can also be used to pass the value of an HTTP Accept header, to obtain a properly formatted response Default: Json2XmlValidator.inputFormat &amp;lt;name of the pipe&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoFormat" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, the format on 'output' is set to the same as the format of the input message on 'input'. The format of the input message is stored in and retrieved from the session variable specified by outputFormatSessionKey Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compactJsonArrays" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true assume arrays in JSON do not have the element containers like in XML Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="strictJsonArraySyntax" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true check that incoming JSON adheres to the specified syntax (compact or full), otherwise both types are accepted for conversion from JSON to XML Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jsonWithRootElements" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, assume that JSON contains/must contain a root element Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deepSearch" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, and converting from JSON to XML, parameter substitutions are searched for optional sub elements too. By default, only mandatory elements are searched for parameter substitutions. N.B. Currently this option might cause problems. Please try using more qualified parameters names (using '/') first Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUndeclaredElements" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, and converting from JSON to XML, elements in JSON that are not found in the XML Schema are ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failOnWildcards" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, an exception is thrown when a wildcard is found in the XML Schema when parsing an object. This often indicates that an element is not properly typed in the XML Schema, and could lead to ambuigities. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="acceptNamespacelessXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, all XML is allowed to be without namespaces. If no namespaces are detected (by the presence of the string 'xmlns') in the XML, the root namespace is added to the XML Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="acceptNamespaceLessXml" type="frankBoolean" />
    <xs:attribute name="produceNamespacelessXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, all XML that is generated is without a namespace set Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="produceNamespaceLessXml" type="frankBoolean" />
    <xs:attribute name="validateJsonToRootElementOnly" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, and converting to or from JSON, then the message root is the only rootValidation, ignoring root validations like for SOAP envelope and header set by descender classes like SoapValidator Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowJson" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Allow JSON input Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Json2XmlValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="Json2XmlValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="XmlValidatorCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlValidatorType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="XmlValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.XmlValidator" />
  </xs:complexType>
  <xs:attributeGroup name="XmlValidatorDeclaredAttributeGroup">
    <xs:attribute ref="schema" />
    <xs:attribute ref="schemaLocation" />
    <xs:attribute ref="noNamespaceSchemaLocation" />
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the root element, or a comma separated list of element names. The validation fails if the root element is not present in the list. N.B. for WSDL generation only the first element is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="responseRoot" />
    <xs:attribute ref="fullSchemaChecking" />
    <xs:attribute ref="throwException" />
    <xs:attribute ref="reasonSessionKey" />
    <xs:attribute ref="xmlReasonSessionKey" />
    <xs:attribute ref="validateFile" />
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file, only used when &lt;code&gt;validateFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; Default: utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="addNamespaceToSchema" />
    <xs:attribute ref="importedSchemaLocationsToIgnore" />
    <xs:attribute ref="useBaseImportedSchemaLocationsToIgnore" />
    <xs:attribute ref="importedNamespacesToIgnore" />
    <xs:attribute ref="warn" />
    <xs:attribute name="ignoreUnknownNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Ignore namespaces in the input message which are unknown Default: true when &lt;code&gt;schema&lt;/code&gt; or &lt;code&gt;noNamespaceSchemaLocation&lt;/code&gt; is used, false otherwise</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="ignoreCaching" />
    <xs:attribute ref="xmlSchemaVersion" />
    <xs:attribute ref="soapNamespace" />
    <xs:attribute ref="rootElementSessionKey" />
    <xs:attribute ref="rootNamespaceSessionKey" />
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlValidatorDeclaredAttributeGroup" />
    <xs:attribute ref="schemaSessionKey" />
    <xs:attribute ref="forwardFailureToSuccess" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe. Can be referenced by the &lt;code&gt;path&lt;/code&gt; attribute of a PipeForward.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute ref="getInputFromSessionKey" />
    <xs:attribute ref="getInputFromFixedValue" />
    <xs:attribute ref="emptyInputReplacement" />
    <xs:attribute ref="preserveInput" />
    <xs:attribute ref="storeResultInSessionKey" />
    <xs:attribute ref="maxThreads" />
    <xs:attribute ref="chompCharSize" />
    <xs:attribute ref="elementToMove" />
    <xs:attribute ref="elementToMoveSessionKey" />
    <xs:attribute ref="elementToMoveChain" />
    <xs:attribute ref="durationThreshold" />
    <xs:attribute ref="removeCompactMsgNamespaces" />
    <xs:attribute ref="restoreMovedElements" />
    <xs:attribute ref="sizeStatistics" />
    <xs:attribute ref="writeToSecLog" />
    <xs:attribute ref="secLogSessionKeys" />
    <xs:attribute ref="logIntermediaryResults" />
    <xs:attribute ref="hideRegex" />
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="ValidatorBaseDeclaredAttributeGroup">
    <xs:attribute ref="schemaSessionKey" />
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responseRoot" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the response root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="forwardFailureToSuccess" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe. Can be referenced by the &lt;code&gt;path&lt;/code&gt; attribute of a PipeForward.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ValidatorBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="ValidatorBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute ref="getInputFromSessionKey" />
    <xs:attribute ref="getInputFromFixedValue" />
    <xs:attribute ref="emptyInputReplacement" />
    <xs:attribute ref="preserveInput" />
    <xs:attribute ref="storeResultInSessionKey" />
    <xs:attribute ref="maxThreads" />
    <xs:attribute ref="chompCharSize" />
    <xs:attribute ref="elementToMove" />
    <xs:attribute ref="elementToMoveSessionKey" />
    <xs:attribute ref="elementToMoveChain" />
    <xs:attribute ref="durationThreshold" />
    <xs:attribute ref="removeCompactMsgNamespaces" />
    <xs:attribute ref="restoreMovedElements" />
    <xs:attribute ref="sizeStatistics" />
    <xs:attribute ref="writeToSecLog" />
    <xs:attribute ref="secLogSessionKeys" />
    <xs:attribute ref="logIntermediaryResults" />
    <xs:attribute ref="hideRegex" />
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="FixedForwardPipeDeclaredAttributeGroup">
    <xs:attribute name="skipOnEmptyInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set, the processing continues directly at the forward of this pipe, without executing the pipe itself, if the input is empty Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifParam" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, this pipe is only executed when the value of parameter with name &lt;code&gt;ifParam&lt;/code&gt; equals &lt;code&gt;ifValue&lt;/code&gt; (otherwise this pipe is skipped)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>See &lt;code&gt;ifParam&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The pipe is only executed if the session variable exists and is not null</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onlyIfValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'onlyIfSessionKey' to check if action must be executed. The pipe is only executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to check if action must be executed. The pipe is not executed if the session variable exists and is not null</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unlessValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value of session variable 'unlessSessionKey' to check if action must be executed. The pipe is not executed if the session variable has the specified value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FixedForwardPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="EsbSoapValidatorType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="EsbSoapValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.esb.EsbSoapValidator" />
  </xs:complexType>
  <xs:attributeGroup name="EsbSoapValidatorDeclaredAttributeGroup">
    <xs:attribute name="direction">
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType_2 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="mode">
      <xs:simpleType>
        <xs:union memberTypes="ModeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="cmhVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>Only used when &lt;code&gt;mode=reg&lt;/code&gt;!&lt;/b&gt; Sets the Common Message Header version. 1 or 2 Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="EsbSoapValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="EsbSoapValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SoapValidatorCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FxfXmlValidatorType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FxfXmlValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.fxf.FxfXmlValidator" />
  </xs:complexType>
  <xs:attributeGroup name="FxfXmlValidatorDeclaredAttributeGroup">
    <xs:attribute name="direction">
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType_3 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="fxfVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>either 3.1 or 3.2 Default: 3.1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FxfXmlValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="FxfXmlValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="WsdlXmlValidatorCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JsonValidatorType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JsonValidatorCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.JsonValidator" />
  </xs:complexType>
  <xs:attributeGroup name="JsonValidatorDeclaredAttributeGroup">
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>The JSON Schema to validate to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subSchemaPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>Prefix to element name to find subschema in schema Default: /definitions/</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set: key of session variable to store reasons of mis-validation in Default: failureReason</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JsonValidatorCumulativeAttributeGroup">
    <xs:attributeGroup ref="JsonValidatorDeclaredAttributeGroup" />
    <xs:attributeGroup ref="ValidatorBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlWellFormedCheckerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="XmlWellFormedCheckerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.XmlWellFormedChecker" />
  </xs:complexType>
  <xs:attributeGroup name="XmlWellFormedCheckerDeclaredAttributeGroup">
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the root element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe. Can be referenced by the &lt;code&gt;path&lt;/code&gt; attribute of a PipeForward.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlWellFormedCheckerCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlWellFormedCheckerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute ref="getInputFromSessionKey" />
    <xs:attribute ref="getInputFromFixedValue" />
    <xs:attribute ref="emptyInputReplacement" />
    <xs:attribute ref="preserveInput" />
    <xs:attribute ref="storeResultInSessionKey" />
    <xs:attribute ref="maxThreads" />
    <xs:attribute ref="chompCharSize" />
    <xs:attribute ref="elementToMove" />
    <xs:attribute ref="elementToMoveSessionKey" />
    <xs:attribute ref="elementToMoveChain" />
    <xs:attribute ref="durationThreshold" />
    <xs:attribute ref="removeCompactMsgNamespaces" />
    <xs:attribute ref="restoreMovedElements" />
    <xs:attribute ref="sizeStatistics" />
    <xs:attribute ref="writeToSecLog" />
    <xs:attribute ref="secLogSessionKeys" />
    <xs:attribute ref="logIntermediaryResults" />
    <xs:attribute ref="hideRegex" />
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="OutputValidatorElementGroup">
    <xs:choice>
      <xs:element name="OutputValidator">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element name="Forward" type="ForwardType" />
              <xs:element name="Locker" type="LockerType" />
              <xs:group ref="ParamElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="OutputValidatorElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="OutputValidatorElementGroupBase">
    <xs:choice>
      <xs:element name="ApiWsdlXmlOutputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiWsdlXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbSoapOutputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbSoapValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfXmlOutputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Json2XmlOutputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Json2XmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonOutputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapOutputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WsdlXmlOutputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WsdlXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlOutputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlWellFormedCheckerOutputValidator">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlWellFormedCheckerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputValidator" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="InputWrapperElementGroup">
    <xs:choice>
      <xs:element name="InputWrapper">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element name="Forward" type="ForwardType" />
              <xs:element name="Locker" type="LockerType" />
              <xs:group ref="ParamElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="inputWrapper" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="InputWrapperElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="InputWrapperElementGroupBase">
    <xs:choice>
      <xs:element name="ApiSoapInputWrapper">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiSoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputWrapper" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BisInputWrapper">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BisWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputWrapper" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbSoapInputWrapper">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbSoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputWrapper" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfInputWrapper">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputWrapper" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapInputWrapper">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="inputWrapper" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="ApiSoapWrapperPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SoapWrapperPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.api.ApiSoapWrapperPipe" />
  </xs:complexType>
  <xs:complexType name="SoapWrapperPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SoapWrapperPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.soap.SoapWrapperPipe" />
  </xs:complexType>
  <xs:attributeGroup name="SoapWrapperPipeDeclaredAttributeGroup">
    <xs:attribute name="direction">
      <xs:annotation>
        <xs:documentation>Default: wrap</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType_4 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="soapVersion">
      <xs:annotation>
        <xs:documentation>Soap version to use Default: auto</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="SoapVersionAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="soapNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when direction=&lt;code&gt;wrap&lt;/code&gt;) Namespace of the soap envelope Default: auto determined from soapVersion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapNamespaceSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store auto-detected soapNamespace Default: If configured as Pipeline Input Wrapper or PipeLine Output Wrapper: soapNamespace</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store soap header Default: If configured as Pipeline Input Wrapper and direction=&lt;code&gt;unwrap&lt;/code&gt;: soapHeader</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="encodingStyle" type="xs:string">
      <xs:annotation>
        <xs:documentation>The encodingStyle to be set in the soap header</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>The default for the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapHeaderStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when direction=&lt;code&gt;wrap&lt;/code&gt;) Stylesheet to create the content of the soap header. As input for this stylesheet a dummy xml string is used. Note: outputType=&lt;code&gt;xml&lt;/code&gt; and xsltVersion=</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when direction=&lt;code&gt;wrap&lt;/code&gt;) Stylesheet to apply to the input message. Note: outputType=&lt;code&gt;xml&lt;/code&gt; and xsltVersion=2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeOutputNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when direction=&lt;code&gt;unwrap&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, namespaces (and prefixes) in the content of the soap body are removed Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeUnusedOutputNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when direction=&lt;code&gt;unwrap&lt;/code&gt; and &lt;code&gt;removeoutputnamespaces=false&lt;/code&gt;) If &lt;code&gt;true&lt;/code&gt;, unused namespaces in the content of the soap body are removed Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputNamespace" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when direction=&lt;code&gt;wrap&lt;/code&gt;) If not empty, this namespace is added to the root element in the soap body</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, the root element in the soap body is changed to this value</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreSoapFault" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when direction=&lt;code&gt;unwrap&lt;/code&gt;) If &lt;code&gt;false&lt;/code&gt; and the soap body contains a soap fault, a PipeRunException is thrown Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowPlainXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;unwrap&lt;/code&gt; only: if true, allow unwrapped xml too Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssUserName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default username for WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default password for WebServiceSecurity</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wssPasswordDigest" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, the password is sent digested; Otherwise it is sent in clear text Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>For direction=&lt;code&gt;wrap&lt;/code&gt; only: When false, adds an XML declaration to the output message. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe. Can be referenced by the &lt;code&gt;path&lt;/code&gt; attribute of a PipeForward.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SoapWrapperPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="SoapWrapperPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute ref="getInputFromSessionKey" />
    <xs:attribute ref="getInputFromFixedValue" />
    <xs:attribute ref="emptyInputReplacement" />
    <xs:attribute ref="preserveInput" />
    <xs:attribute ref="storeResultInSessionKey" />
    <xs:attribute ref="maxThreads" />
    <xs:attribute ref="chompCharSize" />
    <xs:attribute ref="elementToMove" />
    <xs:attribute ref="elementToMoveSessionKey" />
    <xs:attribute ref="elementToMoveChain" />
    <xs:attribute ref="durationThreshold" />
    <xs:attribute ref="removeCompactMsgNamespaces" />
    <xs:attribute ref="restoreMovedElements" />
    <xs:attribute ref="sizeStatistics" />
    <xs:attribute ref="writeToSecLog" />
    <xs:attribute ref="secLogSessionKeys" />
    <xs:attribute ref="logIntermediaryResults" />
    <xs:attribute ref="hideRegex" />
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="BisWrapperPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="BisWrapperPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.bis.BisWrapperPipe" />
  </xs:complexType>
  <xs:attributeGroup name="BisWrapperPipeDeclaredAttributeGroup">
    <xs:attribute name="inputXPath" type="xs:string" />
    <xs:attribute name="inputNamespaceDefs" type="xs:string" />
    <xs:attribute name="outputRoot" type="xs:string" />
    <xs:attribute name="bisMessageHeaderInSoapBody" type="frankBoolean" />
    <xs:attribute name="bisMessageHeaderSessionKey" type="xs:string" />
    <xs:attribute name="bisResultInPayload" type="frankBoolean" />
    <xs:attribute name="bisConversationIdSessionKey" type="xs:string" />
    <xs:attribute name="bisExternalRefToMessageIdSessionKey" type="xs:string" />
    <xs:attribute name="bisErrorCodeSessionKey" type="xs:string" />
    <xs:attribute name="bisErrorTextSessionKey" type="xs:string" />
    <xs:attribute name="bisErrorReasonSessionKey" type="xs:string" />
    <xs:attribute name="bisServiceName" type="xs:string" />
    <xs:attribute name="bisActionName" type="xs:string" />
    <xs:attribute name="omitResult" type="frankBoolean" />
    <xs:attribute name="addOutputNamespace" type="frankBoolean" />
  </xs:attributeGroup>
  <xs:attributeGroup name="BisWrapperPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="BisWrapperPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SoapWrapperPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="EsbSoapWrapperPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="EsbSoapWrapperPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.esb.EsbSoapWrapperPipe" />
  </xs:complexType>
  <xs:attributeGroup name="EsbSoapWrapperPipeDeclaredAttributeGroup">
    <xs:attribute name="mode">
      <xs:annotation>
        <xs:documentation>Default: REG</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ModeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="cmhVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>&lt;b&gt;Only used when &lt;code&gt;mode=reg&lt;/code&gt;!&lt;/b&gt; Sets the Common Message Header version. 1 or 2 Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addOutputNamespace" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;outputNamespace&lt;/code&gt; is automatically set using the parameters (if $messagingLayer='P2P' then 'http://nn.nl/XSD/$businessDomain/$applicationName/$applicationFunction' else is serviceContext is not empty 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceContext/$serviceContextVersion/$operationName/$operationVersion' else 'http://nn.nl/XSD/$businessDomain/$serviceName/$serviceVersion/$operationName/$operationVersion') Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retrievePhysicalDestination" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt;, the physical destination is retrieved from the queue instead of using the parameter &lt;code&gt;destination&lt;/code&gt; Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useFixedValues" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the fields CorrelationId, MessageId and Timestamp will have a fixed value (for testing purposes only) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fixResultNamespace" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;direction=wrap&lt;/code&gt;) when &lt;code&gt;true&lt;/code&gt; and the Result tag already exists, the namespace is changed Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="p2pAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as P2P</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="esbAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>When the messagingLayer part of the destination has this value interpret it as ESB</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="EsbSoapWrapperPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="EsbSoapWrapperPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="SoapWrapperPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FxfWrapperPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FxfWrapperPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.fxf.FxfWrapperPipe" />
  </xs:complexType>
  <xs:attributeGroup name="FxfWrapperPipeDeclaredAttributeGroup">
    <xs:attribute name="flowId" type="xs:string">
      <xs:annotation>
        <xs:documentation>The flowId of the file transfer when direction=wrap. When direction=unwrap the flowId will be extracted from the incoming message and added as a sessionKey to the pipeline.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="flowOutFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies the output folder if transformFilename=&lt;code&gt;false&lt;/code&gt; and direction=wrap</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transformFilename" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt; and direction=wrap, the input which is expected to be a local filename will be transformed to the filename as known on the IUF State machine. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapBodySessionKey" type="xs:string" />
    <xs:attribute name="transferFlowIdSessionKey" type="xs:string" />
    <xs:attribute name="clientFilenameSessionKey" type="xs:string" />
    <xs:attribute name="flowIdSessionKey" type="xs:string" />
    <xs:attribute name="fxfDirSessionKey" type="xs:string" />
    <xs:attribute name="fxfFileSessionKey" type="xs:string" />
    <xs:attribute name="fxfVersion" type="xs:string">
      <xs:annotation>
        <xs:documentation>either 3.1 or 3.2 Default: 3.1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the folder corresponding fxf.dir property will be created in case it does not exist Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useServerFilename" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, ServerFileName from the input will be used as the filename Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FxfWrapperPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="FxfWrapperPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="EsbSoapWrapperPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="OutputWrapperElementGroup">
    <xs:choice>
      <xs:element name="OutputWrapper">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element name="Forward" type="ForwardType" />
              <xs:element name="Locker" type="LockerType" />
              <xs:group ref="ParamElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="outputWrapper" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="OutputWrapperElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="OutputWrapperElementGroupBase">
    <xs:choice>
      <xs:element name="ApiSoapOutputWrapper">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiSoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputWrapper" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BisOutputWrapper">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BisWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputWrapper" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbSoapOutputWrapper">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbSoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputWrapper" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfOutputWrapper">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputWrapper" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapOutputWrapper">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="outputWrapper" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="PipeElementGroup">
    <xs:choice>
      <xs:element name="Pipe">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="CacheElementGroup" />
              <xs:group ref="ChildElementGroup" />
              <xs:element name="Forward" type="ForwardType" />
              <xs:group ref="InputValidatorElementGroup" />
              <xs:group ref="InputWrapperElementGroup" />
              <xs:group ref="ListenerElementGroup" />
              <xs:element name="Locker" type="LockerType" />
              <xs:group ref="ManagerElementGroup" />
              <xs:group ref="MessageLogElementGroup" />
              <xs:group ref="OutputValidatorElementGroup" />
              <xs:group ref="OutputWrapperElementGroup" />
              <xs:group ref="ParamElementGroup" />
              <xs:group ref="ReaderFactoryElementGroup" />
              <xs:group ref="RecordHandlerElementGroup" />
              <xs:group ref="ResultHandlerElementGroup" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
          <xs:attribute name="className" type="xs:string" default="org.frankframework.pipes.SenderPipe" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="PipeElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ChildElementGroup">
    <xs:choice>
      <xs:element name="Child">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="ChildElementGroup_2" />
              <xs:element name="Flow" type="FlowType" />
              <xs:element name="InputFields" type="InputFieldsType" />
              <xs:element name="OutputFields" type="OutputFieldsType" />
              <xs:group ref="ParamElementGroup" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="child" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ChildElementGroupBase" />
      <xs:group ref="ChildElementGroupBase_3" />
      <xs:group ref="ChildElementGroupBase_4" />
    </xs:choice>
  </xs:group>
  <xs:group name="ChildElementGroup_2">
    <xs:choice>
      <xs:element name="Child">
        <xs:complexType>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="child" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="ChildElementGroupBase">
    <xs:choice>
      <xs:element name="FieldPositionChild">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FieldPositionRecordHandlerManagerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="child" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedPositionChild">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedPositionRecordHandlerManagerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="child" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="FieldPositionRecordHandlerManagerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="RecordHandlerManagerDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FieldPositionRecordHandlerManagerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.FieldPositionRecordHandlerManager" />
  </xs:complexType>
  <xs:attributeGroup name="FieldPositionRecordHandlerManagerDeclaredAttributeGroup">
    <xs:attribute name="fieldNr" type="frankInt">
      <xs:annotation>
        <xs:documentation>position of field that identifies the recordtype (position of first field is 1)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="separator" type="xs:string">
      <xs:annotation>
        <xs:documentation>separator that separates the fields in the record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FieldPositionRecordHandlerManagerCumulativeAttributeGroup">
    <xs:attributeGroup ref="FieldPositionRecordHandlerManagerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="RecordHandlerManagerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="RecordHandlerManagerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="RecordHandlerManagerDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="RecordHandlerManagerDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.RecordHandlerManager" />
  </xs:complexType>
  <xs:group name="RecordHandlerManagerDeclaredChildGroup">
    <xs:sequence>
      <xs:element name="Flow" minOccurs="0" maxOccurs="unbounded" type="FlowType" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="RecordHandlerManagerDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the manager</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initial" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>This manager is the initial manager, i.e. to be used for the first record Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="FixedPositionRecordHandlerManagerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="RecordHandlerManagerDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FixedPositionRecordHandlerManagerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.FixedPositionRecordHandlerManager" />
  </xs:complexType>
  <xs:attributeGroup name="FixedPositionRecordHandlerManagerDeclaredAttributeGroup">
    <xs:attribute name="startPosition" type="frankInt">
      <xs:annotation>
        <xs:documentation>Start position of the field in the record that identifies the recordtype (first character is 0) Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endPosition" type="frankInt">
      <xs:annotation>
        <xs:documentation>If endposition &amp;gt;= 0 then this field contains the endPosition of the recordtype field in the record; All characters beyond this position are ignored. Else, if endPosition &amp;lt; 0 then it depends on the length of the recordkey in the flow Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FixedPositionRecordHandlerManagerCumulativeAttributeGroup">
    <xs:attributeGroup ref="FixedPositionRecordHandlerManagerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="RecordHandlerManagerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="ChildElementGroupBase_3">
    <xs:choice>
      <xs:element name="RecordTransformerChild">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RecordTransformerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="child" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RecordXml2SenderChild">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RecordXml2SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="child" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RecordXmlTransformerChild">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RecordXmlTransformerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="child" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="RecordTransformerType">
    <xs:group ref="RecordTransformerPluralConfigChildGroup" />
    <xs:attributeGroup ref="RecordTransformerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.RecordTransformer" />
  </xs:complexType>
  <xs:group name="RecordTransformerPluralConfigChildGroup">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="ChildElementGroup_2" />
        <xs:element name="InputFields" type="InputFieldsType" />
        <xs:element name="OutputFields" type="OutputFieldsType" />
        <xs:group ref="ParamElementGroup" />
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="RecordTransformerDeclaredAttributeGroup">
    <xs:attribute name="outputFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>semicolon separated list of output record field specifications (see table below)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>optional separator to add between the fields</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="RecordTransformerCumulativeAttributeGroup">
    <xs:attributeGroup ref="RecordTransformerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractRecordHandlerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="AbstractRecordHandlerDeclaredChildGroup">
    <xs:sequence>
      <xs:element name="InputFields" minOccurs="0" maxOccurs="unbounded" type="InputFieldsType" />
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="AbstractRecordHandlerDeclaredAttributeGroup">
    <xs:attribute name="recordIdentifyingFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of numbers of those fields that are compared with the previous record to determine if a prefix must be written. if any of these fields is not equal in both records, the record types are assumed to be different</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fieldsDifferConditionForPrefix" type="xs:string" />
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the recordhandler</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated specification of field lengths. if neither this attribute nor &lt;code&gt;inputSeparator&lt;/code&gt; is specified then the entire record is parsed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>Separator that separates the fields in the input record. If neither this attribute nor &lt;code&gt;inputFields&lt;/code&gt; is specified then the entire record is parsed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trim" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, trailing spaces are removed from each field Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="RecordXml2SenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="RecordXml2SenderCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="RecordXmlTransformerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.RecordXml2Sender" />
  </xs:complexType>
  <xs:group name="RecordXml2SenderDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="RecordXml2SenderCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="RecordXml2SenderDeclaredChildGroup" />
      <xs:group ref="AbstractRecordHandlerDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:complexType name="RecordXmlTransformerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractRecordHandlerDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="RecordXmlTransformerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.RecordXmlTransformer" />
  </xs:complexType>
  <xs:attributeGroup name="RecordXmlTransformerDeclaredAttributeGroup">
    <xs:attribute name="outputFields" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated string with tagnames for the individual input fields (related using there positions). if you leave a tagname empty, the field is not xml-ized</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>Root tag for the generated xml document that will be send to the Sender Default: record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of stylesheet to transform an individual record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. One entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:annotation>
        <xs:documentation>Only valid for &lt;code&gt;xpathExpression&lt;/code&gt; Default: text</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endOfRecord" type="xs:string">
      <xs:annotation>
        <xs:documentation>String which ends the record and must be ignored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="RecordXmlTransformerCumulativeAttributeGroup">
    <xs:attributeGroup ref="RecordXmlTransformerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractRecordHandlerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="ChildElementGroupBase_4">
    <xs:choice>
      <xs:element name="Result2BlobWriterChild">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Result2BlobWriterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="child" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Result2ClobWriterChild">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Result2ClobWriterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="child" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Result2FilewriterChild">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Result2FilewriterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="child" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Result2StringWriterChild">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Result2StringWriterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="child" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ResultBlock2SenderChild">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ResultBlock2SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="child" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="Result2BlobWriterType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractResultHandlerDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="Result2BlobWriterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.Result2BlobWriter" />
  </xs:complexType>
  <xs:attributeGroup name="Result2BlobWriterDeclaredAttributeGroup">
    <xs:attribute name="blobColumn" type="frankInt">
      <xs:annotation>
        <xs:documentation>Column that contains the BLOB to be updated Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data.
 If blobCharset and blobSmartGet are not set, BLOBs are returned as bytes. Before version 7.6, blobs were base64 encoded after being read to accommodate for the fact that senders need to return a String. This is no longer the case</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Result2BlobWriterCumulativeAttributeGroup">
    <xs:attributeGroup ref="Result2BlobWriterDeclaredAttributeGroup" />
    <xs:attributeGroup ref="Result2LobWriterBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="AbstractResultHandlerDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="AbstractResultHandlerDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of the object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>Prefix that has to be written before each record, if the record is in another block than the previous record</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>&lt;i&gt;deprecated&lt;/i&gt; suffix that has to be written after the record, if the record is in another block than the next record. &lt;br/&gt;n.b. if a suffix is set without a prefix, it is only used at the end of processing (i.e. at the end of the file) as a final close</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="default" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if set to &lt;code&gt;true&lt;/code&gt;, this resultHandler is the default for all flows that do not have a handler specified Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockByRecordType" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set to &lt;code&gt;true&lt;/code&gt;(default), every group of records, as indicated by RecordHandler.newRecordType,
 is handled as a block. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:attributeGroup name="Result2LobWriterBaseDeclaredAttributeGroup">
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too Default: jdbc.datasource.default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>loads JNDI (and other) properties from a JmsRealm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Result2LobWriterBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="Result2LobWriterBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="ResultWriterCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="ResultWriterDeclaredAttributeGroup">
    <xs:attribute name="onOpenDocument" type="xs:string">
      <xs:annotation>
        <xs:documentation>string that is written before any data of results is written Default: &amp;lt;document name=&amp;quot;#name#&amp;quot;&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onCloseDocument" type="xs:string">
      <xs:annotation>
        <xs:documentation>string that is written after all data of results is written Default: &amp;lt;/document&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onOpenBlock" type="xs:string">
      <xs:annotation>
        <xs:documentation>string that is written before the start of each logical block, as defined in the flow Default: &amp;lt;#name#&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onCloseBlock" type="xs:string">
      <xs:annotation>
        <xs:documentation>string that is written after the end of each logical block, as defined in the flow Default: &amp;lt;/#name#&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockNamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>string that is replaced by name of block or name of stream in above strings Default: #name#</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ResultWriterCumulativeAttributeGroup">
    <xs:attributeGroup ref="ResultWriterDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractResultHandlerDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Result2ClobWriterType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractResultHandlerDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="Result2ClobWriterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.Result2ClobWriter" />
  </xs:complexType>
  <xs:attributeGroup name="Result2ClobWriterDeclaredAttributeGroup">
    <xs:attribute name="clobColumn" type="frankInt">
      <xs:annotation>
        <xs:documentation>Column that contains the CLOB to be updated Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Result2ClobWriterCumulativeAttributeGroup">
    <xs:attributeGroup ref="Result2ClobWriterDeclaredAttributeGroup" />
    <xs:attributeGroup ref="Result2LobWriterBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Result2FilewriterType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractResultHandlerDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="Result2FilewriterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.Result2Filewriter" />
  </xs:complexType>
  <xs:attributeGroup name="Result2FilewriterDeclaredAttributeGroup">
    <xs:attribute name="outputDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory in which the resultfile must be stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="move2dirAfterFinalize" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory to which the created file must be moved after finalization (is optional)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filenamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the file is created using the messageformat. Params: 1=inputfilename, 2=extension of file, 3=current date</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Result2FilewriterCumulativeAttributeGroup">
    <xs:attributeGroup ref="Result2FilewriterDeclaredAttributeGroup" />
    <xs:attributeGroup ref="ResultWriterCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Result2StringWriterType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractResultHandlerDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ResultWriterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.Result2StringWriter" />
  </xs:complexType>
  <xs:complexType name="ResultBlock2SenderType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="ResultBlock2SenderCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ResultWriterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.ResultBlock2Sender" />
  </xs:complexType>
  <xs:group name="ResultBlock2SenderDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="ResultBlock2SenderCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="ResultBlock2SenderDeclaredChildGroup" />
      <xs:group ref="AbstractResultHandlerDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:group name="ManagerElementGroup">
    <xs:choice>
      <xs:element name="Manager">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element name="Flow" type="FlowType" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="manager" />
          <xs:attribute name="className" type="xs:string" default="org.frankframework.batch.RecordHandlerManager" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ManagerElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ManagerElementGroupBase">
    <xs:choice>
      <xs:element name="FieldPositionManager">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FieldPositionRecordHandlerManagerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="manager" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedPositionManager">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedPositionRecordHandlerManagerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="manager" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="ReaderFactoryElementGroup">
    <xs:choice>
      <xs:element name="ReaderFactory">
        <xs:complexType>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="readerFactory" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ReaderFactoryElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ReaderFactoryElementGroupBase">
    <xs:choice>
      <xs:element name="DelphiStringRecordReaderFactory">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DelphiStringRecordReaderFactoryType">
              <xs:attribute name="elementRole" type="xs:string" fixed="readerFactory" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="InputStreamReaderFactory">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="InputStreamReaderFactoryType">
              <xs:attribute name="elementRole" type="xs:string" fixed="readerFactory" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="DelphiStringRecordReaderFactoryType">
    <xs:attributeGroup ref="DelphiStringRecordReaderFactoryDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.DelphiStringRecordReaderFactory" />
  </xs:complexType>
  <xs:attributeGroup name="DelphiStringRecordReaderFactoryDeclaredAttributeGroup">
    <xs:attribute name="separator" type="xs:string">
      <xs:annotation>
        <xs:documentation>separator placed between each string read Default: |</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stringLength" type="frankInt">
      <xs:annotation>
        <xs:documentation>the maximum length of each string. each string is preceded by a one byte length indication. Default: 50</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stringsPerRecord" type="frankInt">
      <xs:annotation>
        <xs:documentation>the number of strings read for each record. 0 means file consists of one logical record Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="separatorReplacement" type="xs:string">
      <xs:annotation>
        <xs:documentation>replacement character, used when separator is found in string read Default: _</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="InputStreamReaderFactoryType">
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.InputStreamReaderFactory" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:group name="RecordHandlerElementGroup">
    <xs:choice>
      <xs:element name="RecordHandler">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="ChildElementGroup_2" />
              <xs:element name="InputFields" type="InputFieldsType" />
              <xs:element name="OutputFields" type="OutputFieldsType" />
              <xs:group ref="ParamElementGroup" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="recordHandler" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="RecordHandlerElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="RecordHandlerElementGroupBase">
    <xs:choice>
      <xs:element name="RecordTransformerRecordHandler">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RecordTransformerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="recordHandler" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RecordXml2SenderRecordHandler">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RecordXml2SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="recordHandler" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RecordXmlTransformerRecordHandler">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RecordXmlTransformerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="recordHandler" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="ResultHandlerElementGroup">
    <xs:choice>
      <xs:element name="ResultHandler">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="ParamElementGroup" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="resultHandler" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ResultHandlerElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ResultHandlerElementGroupBase">
    <xs:choice>
      <xs:element name="Result2BlobWriterResultHandler">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Result2BlobWriterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="resultHandler" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Result2ClobWriterResultHandler">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Result2ClobWriterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="resultHandler" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Result2FilewriterResultHandler">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Result2FilewriterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="resultHandler" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Result2StringWriterResultHandler">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Result2StringWriterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="resultHandler" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ResultBlock2SenderResultHandler">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ResultBlock2SenderType">
              <xs:attribute name="elementRole" type="xs:string" fixed="resultHandler" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="PipeElementGroupBase">
    <xs:choice>
      <xs:element name="Adios2XmlPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Adios2XmlPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="AmountOfPagesPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="AmountOfPagesPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ApiPrincipalPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiPrincipalPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ApiSoapWrapperPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiSoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ApiStreamPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiStreamPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ApiWsdlXmlValidatorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ApiWsdlXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Base64Pipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Base64PipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BatchBlobTransformerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BatchBlobTransformerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BatchClobTransformerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BatchClobTransformerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BatchFileTransformerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BatchFileTransformerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BisWrapperPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BisWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BlobLineIteratingPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BlobLineIteratingPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BytesOutputPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="BytesOutputPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ChecksumPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ChecksumPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ClobLineIteratingPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ClobLineIteratingPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CompareIntegerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CompareIntegerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CompareStringPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CompareStringPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CompressPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CompressPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CounterSwitchPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CounterSwitchPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CredentialCheckingPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CredentialCheckingPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CrlPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CrlPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CsvParserPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CsvParserPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DelayPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DelayPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DirectWrapperPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DirectWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DomainTransformerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="DomainTransformerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EchoPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EchoPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbSoapValidatorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbSoapValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EsbSoapWrapperPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EsbSoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EscapePipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EscapePipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="EtagHandlerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="EtagHandlerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ExceptionPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ExceptionPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FileLineIteratorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FileLineIteratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FilePipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FilePipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FilenameSwitchPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FilenameSwitchType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FixedResultPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FixedResultPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ForEachAttachmentPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ForEachAttachmentPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ForEachChildElementPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ForEachChildElementPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfWrapperPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="FxfXmlValidatorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="FxfXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetFromSessionPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="GetFromSessionType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetPrincipalPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="GetPrincipalPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetTibcoQueuesPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="GetTibcoQueuesType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="HashPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="HashPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IncreaseIntegerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IncreaseIntegerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IsUserInRolePipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IsUserInRolePipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IsXmlPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IsXmlPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Json2XmlValidatorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Json2XmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonValidatorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonWellFormedCheckerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonWellFormedCheckerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JsonXsltPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JsonXsltPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="JwtPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JwtPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LabelFormatPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LabelFormatType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LadybugPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LadybugPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LarvaPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LarvaPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LdapChallengePipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LdapChallengePipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LdapFindGroupMembershipsPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LdapFindGroupMembershipsPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LdapFindMemberPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LdapFindMemberPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LocalFileSystemPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LocalFileSystemPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LogContextPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LogContextPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MailSenderPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="MailSenderPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ObfuscatePipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ObfuscatePipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PGPPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PGPPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PasswordGeneratorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PasswordGeneratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PasswordHashPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PasswordHashPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PdfPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PdfPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PostboxRetrieverPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PostboxRetrieverPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PutInSessionPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PutInSessionType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PutParametersInSessionPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PutParametersInSessionType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="PutSystemDateInSessionPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PutSystemDateInSessionType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RekenBoxCallerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RekenBoxCallerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RemoveCacheKeyPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RemoveCacheKeyPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RemoveFromSessionPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RemoveFromSessionType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ReplacerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ReplacerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ResultSetIteratingPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ResultSetIteratingPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba1Pipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba1PipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Samba2Pipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Samba2PipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SambaPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SambaPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SapLUWManagerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SapLUWManagerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ScanTibcoSolutionPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ScanTibcoSolutionPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SendTibcoMessagePipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SendTibcoMessageType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SenderPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SenderPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SignaturePipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SignaturePipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SizePipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SizePipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SkipPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SkipPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapValidatorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SoapWrapperPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SoapWrapperPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Stream2StringPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Stream2StringPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="StreamLineIteratorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="StreamLineIteratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="StreamPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="StreamPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="StreamTransformerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="StreamTransformerPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Text2XmlPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="Text2XmlPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="TextSplitterPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="TextSplitterPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="UUIDGeneratorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="UUIDGeneratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="UnzipPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="UnzipPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WsdlGeneratorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WsdlGeneratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="WsdlXmlValidatorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="WsdlXmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XQueryPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XQueryPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlBuilderPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlBuilderPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlFileElementIteratorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlFileElementIteratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlIfPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlIfType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlSwitchPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlSwitchType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlValidatorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlValidatorType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XmlWellFormedCheckerPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XmlWellFormedCheckerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="XsltPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="XsltPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ZipIteratorPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ZipIteratorPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ZipWriterPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ZipWriterPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="Adios2XmlPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="Adios2XmlPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.rekenbox.Adios2XmlPipe" />
  </xs:complexType>
  <xs:attributeGroup name="Adios2XmlPipeDeclaredAttributeGroup">
    <xs:attribute name="adiosDefinities" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets URL to the pascal file with label-constants generated by the ADIOS-utility. Default: nnrscons.pas</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction">
      <xs:annotation>
        <xs:documentation>Transformation direction. Default: Adios2Xml</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType_5 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="rekenbox" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets name of the rekenbox to be called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rekenboxSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the SessionKey to retrieve the rekenbox name from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noConversionForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the name of the forward used when no conversion to XML was performed, because the input was already XML. Default: noconversion</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Adios2XmlPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="Adios2XmlPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="AmountOfPagesPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="AmountOfPagesPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.aspose.pipe.AmountOfPagesPipe" />
  </xs:complexType>
  <xs:attributeGroup name="AmountOfPagesPipeDeclaredAttributeGroup">
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset to be used to read the input message.
 Defaults to the message's known charset or UTF-8 when unknown.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="AmountOfPagesPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="AmountOfPagesPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ApiPrincipalPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ApiPrincipalPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.http.rest.ApiPrincipalPipe" />
  </xs:complexType>
  <xs:attributeGroup name="ApiPrincipalPipeDeclaredAttributeGroup">
    <xs:attribute name="action" type="xs:string" />
    <xs:attribute name="authenticationMethod" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="ApiPrincipalPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ApiPrincipalPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ApiStreamPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ApiStreamPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.api.ApiStreamPipe" />
  </xs:complexType>
  <xs:attributeGroup name="ApiStreamPipeDeclaredAttributeGroup">
    <xs:attribute name="jmsRealm" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="ApiStreamPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ApiStreamPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="StreamPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="StreamPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.StreamPipe" />
  </xs:complexType>
  <xs:attributeGroup name="StreamPipeDeclaredAttributeGroup">
    <xs:attribute name="extractFirstStringPart" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt;) when true the first part is not put in a session key but returned to the pipeline (as the result of this pipe) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multipartXmlSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used when &lt;code&gt;extractfirststringpart=true&lt;/code&gt;) the session key to put the xml in with info about the stored parts Default: &lt;code&gt;multipartxml&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkAntiVirus" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt;) when true parts are checked for antivirus scan returncode. these antivirus scan parts have been added by another application (so the antivirus scan is not performed in this pipe). for each file part an antivirus scan part have been added by this other application (directly after this file part) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusPartName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) name of antivirus scan status parts Default: &lt;code&gt;antivirus_rc&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusMessagePartName" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) name of antivirus scan message parts Default: &lt;code&gt;antivirus_msg&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusPassedMessage" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) message of antivirus scan parts which indicates the antivirus scan passed Default: &lt;code&gt;pass&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusFailureAsSoapFault" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) when true and the antivirusfailed forward is specified and the antivirus scan did not pass, a soap fault is returned instead of only a plain error message Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="antiVirusFailureReasonSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>(only used for parameter &lt;code&gt;httprequest&lt;/code&gt; and when &lt;code&gt;checkantivirus=true&lt;/code&gt;) if not empty and the antivirusfailed forward is specified and the antivirus scan did not pass, the error message (or soap fault) is stored in this session key and the first string part is returned to the pipeline</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="StreamPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="StreamPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Base64PipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="Base64PipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.Base64Pipe" />
  </xs:complexType>
  <xs:attributeGroup name="Base64PipeDeclaredAttributeGroup">
    <xs:attribute name="direction">
      <xs:annotation>
        <xs:documentation>Default: ENCODE</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Character encoding to be used to when reading input from strings for direction=encode or writing data for direction=decode.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>(Only used when direction=encode) Defines separator between lines. Special values: &lt;code&gt;auto&lt;/code&gt;: platform default, &lt;code&gt;dos&lt;/code&gt;: crlf, &lt;code&gt;unix&lt;/code&gt;: lf Default: auto</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineLength" type="frankInt">
      <xs:annotation>
        <xs:documentation>(Only used when direction=encode) Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). If linelength &amp;lt;= 0, then the output will not be divided into lines Default: 76</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Base64PipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="Base64PipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="BatchBlobTransformerPipeType">
    <xs:group ref="StreamTransformerPipePluralConfigChildGroup" />
    <xs:attributeGroup ref="BatchBlobTransformerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.BatchBlobTransformerPipe" />
  </xs:complexType>
  <xs:attributeGroup name="BatchBlobTransformerPipeDeclaredAttributeGroup">
    <xs:attribute name="blobCharset" type="xs:string" />
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="BatchBlobTransformerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="BatchBlobTransformerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="BatchTransformerPipeBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="StreamTransformerPipeType">
    <xs:group ref="StreamTransformerPipePluralConfigChildGroup" />
    <xs:attributeGroup ref="StreamTransformerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.StreamTransformerPipe" />
  </xs:complexType>
  <xs:group name="StreamTransformerPipePluralConfigChildGroup">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="ChildElementGroup" />
        <xs:element name="Forward" type="ForwardType" />
        <xs:element name="Locker" type="LockerType" />
        <xs:group ref="ManagerElementGroup" />
        <xs:group ref="ParamElementGroup" />
        <xs:group ref="ReaderFactoryElementGroup" />
        <xs:group ref="RecordHandlerElementGroup" />
        <xs:group ref="ResultHandlerElementGroup" />
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="StreamTransformerPipeDeclaredAttributeGroup">
    <xs:attribute name="storeOriginalBlock" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; the original block is stored under the session key &lt;code&gt;originalBlock&lt;/code&gt;. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Characterset used for reading file or inputstream" Default: UTF-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="StreamTransformerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="StreamTransformerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="BatchTransformerPipeBaseDeclaredAttributeGroup">
    <xs:attribute name="query" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The SQL query text to be executed each time sendMessage() is called</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too Default: jdbc.datasource.default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="jmsRealm" type="xs:string">
      <xs:annotation>
        <xs:documentation>loads JNDI (and other) properties from a JmsRealm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="BatchTransformerPipeBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="BatchTransformerPipeBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamTransformerPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="BatchClobTransformerPipeType">
    <xs:group ref="StreamTransformerPipePluralConfigChildGroup" />
    <xs:attributeGroup ref="BatchTransformerPipeBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.BatchClobTransformerPipe" />
  </xs:complexType>
  <xs:complexType name="BatchFileTransformerPipeType">
    <xs:group ref="StreamTransformerPipePluralConfigChildGroup" />
    <xs:attributeGroup ref="BatchFileTransformerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.batch.BatchFileTransformerPipe" />
  </xs:complexType>
  <xs:attributeGroup name="BatchFileTransformerPipeDeclaredAttributeGroup">
    <xs:attribute name="move2dirAfterTransform" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory in which the transformed file(s) is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="move2dirAfterError" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory to which the inputfile is moved in case an error occurs</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="frankInt">
      <xs:annotation>
        <xs:documentation>Number of copies held of a file with the same name. Backup files have a dot and a number suffixed to their name. If set to 0, no backups will be kept. Default: 5</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the destination file will be deleted if it already exists Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delete" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the file processed will be deleted after being processed, and not stored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="BatchFileTransformerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="BatchFileTransformerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamTransformerPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="BlobLineIteratingPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="IteratingPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JdbcIteratingPipeBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.BlobLineIteratingPipe" />
  </xs:complexType>
  <xs:group name="IteratingPipeDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="1" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="IteratingPipeCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="IteratingPipeDeclaredChildGroup" />
      <xs:group ref="MessageSendingPipeCumulativeChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="IteratingPipeDeclaredAttributeGroup">
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:annotation>
        <xs:documentation>Only valid for xpathexpression Default: text</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="itemNoSessionKey" />
    <xs:attribute ref="maxItems" />
    <xs:attribute ref="stopConditionXPathExpression" />
    <xs:attribute ref="ignoreExceptions" />
    <xs:attribute ref="collectResults" />
    <xs:attribute ref="removeXmlDeclarationInResults" />
    <xs:attribute ref="addInputToResult" />
    <xs:attribute ref="removeDuplicates" />
    <xs:attribute ref="parallel" />
    <xs:attribute ref="maxChildThreads" />
    <xs:attribute name="blockSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. When set to a value greater than 0, it specifies the number of rows send, in a one block, to the sender. Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IteratingPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="IteratingPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="MessageSendingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MessageSendingPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="MessageSendingPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="MessageSendingPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.MessageSendingPipe" use="prohibited" />
  </xs:complexType>
  <xs:group name="MessageSendingPipeDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="MessageLogElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="InputValidatorElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="OutputValidatorElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="InputWrapperElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="OutputWrapperElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="MessageSendingPipeCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="MessageSendingPipeDeclaredChildGroup" />
      <xs:group ref="AbstractPipeDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="MessageSendingPipeDeclaredAttributeGroup">
    <xs:attribute name="linkMethod">
      <xs:annotation>
        <xs:documentation>For asynchronous communication, the server side may either use the messageID or the correlationID
 in the correlationID field of the reply message. Use this property to set the behaviour of the reply-listener. Default: CORRELATIONID</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="LinkMethodAttributeValuesType_2 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="correlationIDStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath expression to extract correlationid from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for correlationIDXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceUri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="correlationIDSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of a PipelineSession-variable. If specified, the value of the PipelineSession variable is used as input for the XPathExpression or stylesheet, instead of the current input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath expression to extract label from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for labelXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceUri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath expression to extract audit trail from message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for auditTrailXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceUri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="auditTrailSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of a PipelineSession-variable. If specified, the value of the PipelineSession variable is used as audit trail (instead of the default 'no audit trail)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInputForExtract" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input of the Pipe is used to extract audit trail, correlationid and label (instead of the wrapped input) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideRegex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Next to common usage in AbstractPipe, also strings in the error/logstore are masked</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMethod">
      <xs:annotation>
        <xs:documentation>(Only used when hideRegex is not empty and only applies to error/logstore) Default: all</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="HideMethodAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="checkXmlWellFormed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the XML Well-Formedness of the result is checked Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRootTag" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, besides the XML Well-Formedness the root element of the result is checked to be equal to the value set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultOnTimeOut" type="xs:string">
      <xs:annotation>
        <xs:documentation>The message (e.g. 'receiver timed out') that is returned when the time listening for a reply message
 exceeds the timeout, or in other situations no reply message is received.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRetries" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of times a processing attempt is retried after a timeout or an exception is caught or after an incorrect reply is received (see also &lt;code&gt;retryXPath&lt;/code&gt;) Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMinInterval" type="frankInt">
      <xs:annotation>
        <xs:documentation>The starting number of seconds waited after an unsuccessful processing attempt before another processing attempt is made. Each next retry this interval is doubled with a upper limit of &lt;code&gt;retryMaxInterval&lt;/code&gt; Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryMaxInterval" type="frankInt">
      <xs:annotation>
        <xs:documentation>The maximum number of seconds waited after an unsuccessful processing attempt before another processing attempt is made Default: 600</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath expression evaluated on each technical successful reply. Retry is done if condition returns true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retryNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for retryXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceUri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presumedTimeOutInterval" type="frankInt">
      <xs:annotation>
        <xs:documentation>If the previous call was a timeout, the maximum time &lt;i&gt;in seconds&lt;/i&gt; after this timeout to presume the current call is also a timeout. Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stubFilename" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the pipe returns a message from a file, instead of doing the regular process</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeoutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, a TimeoutException is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeOutOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, a TimeoutException is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exceptionOnResult" type="xs:string">
      <xs:annotation>
        <xs:documentation>If not empty, a PipeRunException is thrown when the result equals this value (for testing purposes only)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="MessageSendingPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="MessageSendingPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeDeclaredAttributeGroup" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The functional name of this pipe. Can be referenced by the &lt;code&gt;path&lt;/code&gt; attribute of a PipeForward.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="getInputFromSessionKey" />
    <xs:attribute ref="getInputFromFixedValue" />
    <xs:attribute ref="emptyInputReplacement" />
    <xs:attribute ref="preserveInput" />
    <xs:attribute ref="storeResultInSessionKey" />
    <xs:attribute ref="maxThreads" />
    <xs:attribute ref="chompCharSize" />
    <xs:attribute ref="elementToMove" />
    <xs:attribute ref="elementToMoveSessionKey" />
    <xs:attribute ref="elementToMoveChain" />
    <xs:attribute ref="durationThreshold" />
    <xs:attribute ref="removeCompactMsgNamespaces" />
    <xs:attribute ref="restoreMovedElements" />
    <xs:attribute ref="sizeStatistics" />
    <xs:attribute ref="writeToSecLog" />
    <xs:attribute ref="secLogSessionKeys" />
    <xs:attribute ref="logIntermediaryResults" />
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcIteratingPipeBaseDeclaredAttributeGroup">
    <xs:attribute name="jmsRealm" type="xs:string" />
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text to be excecuted each time sendMessage() is called. When not set, the input message is taken as the query</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too Default: jdbc.datasource.default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useNamedParams" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Named parameters will be auto-detected by default. Every string in the query which equals &lt;code&gt;?{paramname}&lt;/code&gt; will be replaced by the value of the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="trimSpaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Remove trailing blanks from all result values. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sqlDialect" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, the SQL dialect in which the queries are written and should be translated from to the actual SQL dialect</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockRows" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, exclusive row-level locks are obtained on all the rows identified by the select statement (e.g. by appending ' FOR UPDATE NOWAIT SKIP LOCKED' to the end of the query) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lockWait" type="frankInt">
      <xs:annotation>
        <xs:documentation>when set and &gt;=0, ' FOR UPDATE WAIT #' is used instead of ' FOR UPDATE NOWAIT SKIP LOCKED' Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avoidLocking" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, then select queries are executed in a way that avoids taking locks, e.g. with isolation mode 'read committed' instead of 'repeatable read'. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobCharset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset that is used to read and write BLOBs. This assumes the blob contains character data.
 If blobCharset and blobSmartGet are not set, BLOBs are returned as bytes. Before version 7.6, blobs were base64 encoded after being read to accommodate for the fact that senders need to return a String. This is no longer the case</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobSmartGet" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls automatically whether blobdata is stored compressed and/or serialized in the database Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blobsCompressed" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether blobdata is stored compressed in the database Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JdbcIteratingPipeBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="JdbcIteratingPipeBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StringIteratorPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="StringIteratorPipeDeclaredAttributeGroup">
    <xs:attribute name="blockSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Controls multiline behaviour. If set to a value greater than 0, it specifies the number of rows send in a block to the sender. Default: 0 (one line at a time, no prefix of suffix)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startPosition" type="frankInt">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;startPosition &amp;gt;= 0&lt;/code&gt;, this field contains the start position of the key in the current record (first character is 0);
 A sequence of lines with the same key is put in one block and send to the sender. Cannot be used in combination with blockSize. Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endPosition" type="frankInt">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;endPosition &amp;gt;= startPosition&lt;/code&gt;, this field contains the end position of the key in the current record Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="combineBlocks" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, all items in a block are sent at once. If set false, items are sent individually, potentially leveraging block enabled sending capabilities of the sender Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockPrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;combineBlocks = true&lt;/code&gt;, this string is inserted at the start of each block. Requires &lt;code&gt;blockSize&lt;/code&gt; or &lt;code&gt;startPosition&lt;/code&gt; and &lt;code&gt;endPosition&lt;/code&gt; to be set too. Default: &amp;lt;block&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="blockSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;combineBlocks = true&lt;/code&gt;, this string is inserted at the end of the set of lines. Requires &lt;code&gt;blockSize&lt;/code&gt; or &lt;code&gt;startPosition&lt;/code&gt; and &lt;code&gt;endPosition&lt;/code&gt; to be set too. Default: &amp;lt;/block&amp;gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linePrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>This string is inserted at the start of each item</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineSuffix" type="xs:string">
      <xs:annotation>
        <xs:documentation>This string is appended at the end of each item</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="escapeXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Escape XML characters in each item Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="StringIteratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="StringIteratorPipeDeclaredAttributeGroup" />
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to apply to each message, before sending it</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: xpath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:annotation>
        <xs:documentation>Only valid for xpathexpression Default: text</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Force the transformer generated from the xpath-expression to omit the xml declaration Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="itemNoSessionKey" />
    <xs:attribute ref="maxItems" />
    <xs:attribute ref="stopConditionXPathExpression" />
    <xs:attribute ref="ignoreExceptions" />
    <xs:attribute ref="collectResults" />
    <xs:attribute ref="removeXmlDeclarationInResults" />
    <xs:attribute ref="addInputToResult" />
    <xs:attribute ref="removeDuplicates" />
    <xs:attribute ref="parallel" />
    <xs:attribute ref="maxChildThreads" />
    <xs:attributeGroup ref="MessageSendingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="BytesOutputPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.BytesOutputPipe" />
  </xs:complexType>
  <xs:complexType name="ChecksumPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ChecksumPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.ChecksumPipe" />
  </xs:complexType>
  <xs:attributeGroup name="ChecksumPipeDeclaredAttributeGroup">
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Character encoding to be used to encode message before calculating checksum.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type">
      <xs:annotation>
        <xs:documentation>Type of checksum to be calculated Default: MD5</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ChecksumTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="inputIsFile" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be a filename; otherwise the input itself is used in the calculations. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ChecksumPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ChecksumPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ClobLineIteratingPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="IteratingPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JdbcIteratingPipeBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.ClobLineIteratingPipe" />
  </xs:complexType>
  <xs:complexType name="CompareIntegerPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.CompareIntegerPipe" />
  </xs:complexType>
  <xs:complexType name="CompareStringPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="CompareStringPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.CompareStringPipe" />
  </xs:complexType>
  <xs:attributeGroup name="CompareStringPipeDeclaredAttributeGroup">
    <xs:attribute name="xml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; the string values to compare are considered to be xml strings and before the actual compare both xml strings are transformed to a canonical form Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CompareStringPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CompareStringPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CompressPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="CompressPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.CompressPipe" />
  </xs:complexType>
  <xs:attributeGroup name="CompressPipeDeclaredAttributeGroup">
    <xs:attribute name="compress" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if &lt;code&gt;true&lt;/code&gt; the pipe compresses, otherwise it decompress Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filenamePattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>required if result is a file, the pattern for the result filename. Can be set with variables e.g. {file}.{ext}.zip in this example the {file} and {ext} variables are resolved with sessionKeys with the same name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageIsContent" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>flag indicates whether the message is the content or the path to a file with the contents. for multiple files use ';' as delimiter Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>required if result is a file, the directory in which to store the result file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resultIsContent" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>flag indicates whether the result must be written to the message or to a file (filename = message) Default: true when outputDirectory is not set.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="zipEntryPattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>the pattern for the zipentry name in case a zipfile is read or written</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileFormat">
      <xs:simpleType>
        <xs:union memberTypes="FileFormatAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CompressPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CompressPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CounterSwitchPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="CounterSwitchPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.CounterSwitchPipe" />
  </xs:complexType>
  <xs:attributeGroup name="CounterSwitchPipeDeclaredAttributeGroup">
    <xs:attribute name="divisor" type="frankInt">
      <xs:annotation>
        <xs:documentation>Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CounterSwitchPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CounterSwitchPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CredentialCheckingPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="CredentialCheckingPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.CredentialCheckingPipe" />
  </xs:complexType>
  <xs:attributeGroup name="CredentialCheckingPipeDeclaredAttributeGroup">
    <xs:attribute name="authAlias" type="xs:string" />
    <xs:attribute name="targetPassword" type="xs:string" />
    <xs:attribute name="targetUserid" type="xs:string" />
    <xs:attribute name="defaultPassword" type="xs:string" />
    <xs:attribute name="defaultUserid" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="CredentialCheckingPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CredentialCheckingPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CrlPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="CrlPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.CrlPipe" />
  </xs:complexType>
  <xs:attributeGroup name="CrlPipeDeclaredAttributeGroup">
    <xs:attribute name="issuerSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the sessionKey that holds the certificate of the issuer who signed the CRL.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CrlPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CrlPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CsvParserPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="CsvParserPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.CsvParserPipe" />
  </xs:complexType>
  <xs:attributeGroup name="CsvParserPipeDeclaredAttributeGroup">
    <xs:attribute name="fileContainsHeader" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Specifies if the first line should be treated as header or as data Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fieldNames" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of header names. If set, then &lt;code&gt;fileContainsHeader&lt;/code&gt; defaults to false. If not set, headers are taken from the first line</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fieldSeparator" type="xs:string">
      <xs:annotation>
        <xs:documentation>Character that separates fields Default: ,</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerCase">
      <xs:annotation>
        <xs:documentation>When set, character casing will be changed for the header</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="HeaderCaseAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="prettyPrint" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Format the XML output in easy legible way</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useControlCodes" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Enables the ASCII {@code (RS) Record Separator} and {@code (US) Unit Separator} Control Code field delimiters.
 May not be used in combination with attribute {@code fieldSeparator}.
 See &lt;a href="https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Field_separators"&gt;WIKI Control Codes&lt;/a&gt;.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CsvParserPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="CsvParserPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="DelayPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="DelayPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.DelayPipe" />
  </xs:complexType>
  <xs:attributeGroup name="DelayPipeDeclaredAttributeGroup">
    <xs:attribute name="delayTime" type="frankInt">
      <xs:annotation>
        <xs:documentation>The time &lt;i&gt;in milliseconds&lt;/i&gt; the thread will be put to sleep Default: 5000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="DelayPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="DelayPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="DirectWrapperPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="TimeoutGuardPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.esb.DirectWrapperPipe" />
  </xs:complexType>
  <xs:attributeGroup name="TimeoutGuardPipeDeclaredAttributeGroup">
    <xs:attribute name="throwException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, a piperunexception is thrown. otherwise the output is only logged as an error (and returned in a xml string with 'error' tags) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>timeout in seconds of obtaining a result Default: 30</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="TimeoutGuardPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="TimeoutGuardPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="DomainTransformerPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="DomainTransformerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.DomainTransformerPipe" />
  </xs:complexType>
  <xs:attributeGroup name="DomainTransformerPipeDeclaredAttributeGroup">
    <xs:attribute name="jmsRealm" type="xs:string" />
    <xs:attribute name="datasourceName" type="xs:string" />
    <xs:attribute name="tableName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the table that contains the mapping Default: mapping</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column labels are stored in Default: label</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueInField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column source values are stored in Default: valuein</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueOutField" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the column destination values are stored in Default: valueout</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="DomainTransformerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="DomainTransformerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="EchoPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.EchoPipe" />
  </xs:complexType>
  <xs:complexType name="EscapePipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="EscapePipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.EscapePipe" />
  </xs:complexType>
  <xs:attributeGroup name="EscapePipeDeclaredAttributeGroup">
    <xs:attribute name="substringStart" type="xs:string">
      <xs:annotation>
        <xs:documentation>substring to start translation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="substringEnd" type="xs:string">
      <xs:annotation>
        <xs:documentation>substring to end translation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction">
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType_7 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="encodeSubstring" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set &lt;code&gt;true&lt;/code&gt; special characters in &lt;code&gt;substringstart&lt;/code&gt; and &lt;code&gt;substringend&lt;/code&gt; are first translated to their xml equivalents Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="EscapePipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="EscapePipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="EtagHandlerPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="EtagHandlerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.EtagHandlerPipe" />
  </xs:complexType>
  <xs:attributeGroup name="EtagHandlerPipeDeclaredAttributeGroup">
    <xs:attribute name="action">
      <xs:simpleType>
        <xs:union memberTypes="EtagActionAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="uriPattern" type="xs:string" />
    <xs:attribute name="restPath" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="EtagHandlerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="EtagHandlerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ExceptionPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ExceptionPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.ExceptionPipe" />
  </xs:complexType>
  <xs:attributeGroup name="ExceptionPipeDeclaredAttributeGroup">
    <xs:attribute name="throwException" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, a PipeRunException is thrown. Otherwise, the output is only logged as an error (and no rollback is performed). Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ExceptionPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ExceptionPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FileLineIteratorPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="IteratingPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FileLineIteratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.FileLineIteratorPipe" />
  </xs:complexType>
  <xs:attributeGroup name="FileLineIteratorPipeDeclaredAttributeGroup">
    <xs:attribute name="move2dirAfterTransform" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory where input file is moved to in case of a successful transformation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="move2dirAfterError" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory where input file is moved to in case an error occurred</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default charset attribute Default: UTF-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FileLineIteratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="FileLineIteratorPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StreamLineIteratorPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="StreamLineIteratorPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="IteratingPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="StreamLineIteratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.StreamLineIteratorPipe" />
  </xs:complexType>
  <xs:attributeGroup name="StreamLineIteratorPipeDeclaredAttributeGroup">
    <xs:attribute name="endOfLineString" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, each record has to end with this string. If a line read doesn't end with this string more lines are added (including line separators) until the total record ends with the given string</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startOfLineString" type="xs:string">
      <xs:annotation>
        <xs:documentation>Marks the start of a new record. If set, a new record is started when this line is read.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="StreamLineIteratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="StreamLineIteratorPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StringIteratorPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FilePipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FilePipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.FilePipe" />
  </xs:complexType>
  <xs:attributeGroup name="FilePipeDeclaredAttributeGroup">
    <xs:attribute name="charset" type="xs:string" />
    <xs:attribute name="outputType" type="xs:string" />
    <xs:attribute name="actions" type="xs:string" />
    <xs:attribute name="fileSource" type="xs:string" />
    <xs:attribute name="directory" type="xs:string" />
    <xs:attribute name="writeSuffix" type="xs:string" />
    <xs:attribute name="filename" type="xs:string" />
    <xs:attribute name="filenameSessionKey" type="xs:string" />
    <xs:attribute name="createDirectory" type="frankBoolean" />
    <xs:attribute name="writeLineSeparator" type="frankBoolean" />
    <xs:attribute name="testExists" type="frankBoolean" />
    <xs:attribute name="testCanWrite" type="frankBoolean" />
    <xs:attribute name="skipBOM" type="frankBoolean" />
    <xs:attribute name="deleteEmptyDirectory" type="frankBoolean" />
    <xs:attribute name="streamResultToServlet" type="frankBoolean" />
  </xs:attributeGroup>
  <xs:attributeGroup name="FilePipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="FilePipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FilenameSwitchType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FilenameSwitchCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.FilenameSwitch" />
  </xs:complexType>
  <xs:attributeGroup name="FilenameSwitchDeclaredAttributeGroup">
    <xs:attribute name="notFoundForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when the forward or pipename derived from the filename that was the input could not be found.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="toLowercase" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>convert the result to lowercase, before searching for a corresponding forward Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FilenameSwitchCumulativeAttributeGroup">
    <xs:attributeGroup ref="FilenameSwitchDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="FixedResultPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FixedResultPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.FixedResultPipe" />
  </xs:complexType>
  <xs:attributeGroup name="FixedResultPipeDeclaredAttributeGroup">
    <xs:attribute name="substituteVars" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Should values between ${ and } be resolved. If true, the search order of replacement values is:
 system properties (1), PipelineSession variables (2), application properties (3). Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the file containing the result message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filenameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the session key containing the file name of the file containing the result message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnString" type="xs:string">
      <xs:annotation>
        <xs:documentation>Returned message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceFrom" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, every occurrence of this attribute's value is replaced by the value of &lt;code&gt;replaceTo&lt;/code&gt;.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceTo" type="xs:string">
      <xs:annotation>
        <xs:documentation>See &lt;code&gt;replaceFrom&lt;/code&gt;.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>File name of XSLT stylesheet to apply.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceFixedParams" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, parameter replacement matches &lt;code&gt;name-of-parameter&lt;/code&gt;, not &lt;code&gt;?{name-of-parameter}&lt;/code&gt; Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FixedResultPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="FixedResultPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ForEachAttachmentPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="IteratingPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ForEachAttachmentPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.filesystem.ForEachAttachmentPipe" />
  </xs:complexType>
  <xs:attributeGroup name="ForEachAttachmentPipeDeclaredAttributeGroup">
    <xs:attribute name="onlyProperties" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of attachment properties to list</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeProperties" type="xs:string">
      <xs:annotation>
        <xs:documentation>comma separated list of attachment properties not to list. When specified, 'onlyProperties' is ignored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ForEachAttachmentPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ForEachAttachmentPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="IteratingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ForEachChildElementPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="IteratingPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ForEachChildElementPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.ForEachChildElementPipe" />
  </xs:complexType>
  <xs:attributeGroup name="ForEachChildElementPipeDeclaredAttributeGroup">
    <xs:attribute name="processFile" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of a file to be processed. Otherwise, the input itself is transformed. The character encoding will be read from the XML declaration Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="containerElement" type="xs:string">
      <xs:annotation>
        <xs:documentation>Element name (not an XPath-expression), qualified via attribute &lt;code&gt;namespaceDefs&lt;/code&gt;, used to determine the 'root' of elements to be iterated over, i.e. the root of the set of child elements.
 When empty, the pipe will iterate over each direct child element of the root</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetElement" type="xs:string">
      <xs:annotation>
        <xs:documentation>Element name (not an XPath-expression), qualified via attribute &lt;code&gt;namespaceDefs&lt;/code&gt;, used to determine the type of elements to be iterated over, i.e. the element name of each of the child elements.
 When empty, the pipe will iterate over any direct child element of the root or specified containerElement</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementXPathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath-expression used to determine the set of elements to be iterated over, i.e. the set of child elements. When empty, the effective value is \/*\/*, i.e. the pipe will iterate over each direct child element of the root.
 Be aware that memory consumption appears to increase with file size when this attribute is used. When possible, use containerElement and/or targetElement instead.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt; a Saxon (net.sf.saxon) XSLT processor 2.0 or 3.0 will be used, supporting XPath 2.0 or 3.0 respectively, otherwise an XSLT processor 1.0 (org.apache.xalan), supporting XPath 1.0. N.B. Be aware that setting this other than 1 might cause the input file being read as a whole in to memory, as XSLT Streaming is currently only supported by the XSLT Processor that is used for xsltVersion=1 Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) are removed from the items just before forwarding them to the sender. N.B. This takes place &lt;strong&gt;after&lt;/strong&gt; the transformation for &lt;code&gt;elementXPathExpression&lt;/code&gt; if that is specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ForEachChildElementPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ForEachChildElementPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="StringIteratorPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="GetFromSessionType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="GetFromSessionCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.GetFromSession" />
  </xs:complexType>
  <xs:attributeGroup name="GetFromSessionDeclaredAttributeGroup">
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of the session variable to retrieve the output message from. When left unspecified, the input message is used as the key of the session variable</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type">
      <xs:annotation>
        <xs:documentation>&lt;ul&gt;&lt;li&gt;&lt;code&gt;string&lt;/code&gt;: renders the contents&lt;/li&gt;&lt;li&gt;&lt;code&gt;map&lt;/code&gt;: converts a Map&amp;lt;String, String&amp;gt; object to a xml-string (&amp;lt;items&amp;gt;&amp;lt;item name='...'&amp;gt;...&amp;lt;/item&amp;gt;&amp;lt;item name='...'&amp;gt;...&amp;lt;/item&amp;gt;&amp;lt;/items&amp;gt;)&lt;/li&gt;&lt;/ul&gt; Default: string</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ParameterTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="GetFromSessionCumulativeAttributeGroup">
    <xs:attributeGroup ref="GetFromSessionDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="GetPrincipalPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="GetPrincipalPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.GetPrincipalPipe" />
  </xs:complexType>
  <xs:attributeGroup name="GetPrincipalPipeDeclaredAttributeGroup">
    <xs:attribute name="notFoundForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of forward returned if principal has not been found</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="GetPrincipalPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="GetPrincipalPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="GetTibcoQueuesType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="GetTibcoQueuesCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.tibco.GetTibcoQueues" />
  </xs:complexType>
  <xs:attributeGroup name="GetTibcoQueuesDeclaredAttributeGroup">
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used. When multiple URLs are defined (comma separated list), the first URL is used of which the server has an active state</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipTemporaryQueues" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, temporary queues are skipped Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideMessage" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt;, the length of the queue message is returned instead of the queue message self (when parameter &lt;code&gt;queueName&lt;/code&gt; is not empty) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueRegex" type="xs:string" />
    <xs:attribute name="emsPropertiesFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location to a &lt;code&gt;jndi.properties&lt;/code&gt; file for additional EMS (SSL) properties</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="GetTibcoQueuesCumulativeAttributeGroup">
    <xs:attributeGroup ref="GetTibcoQueuesDeclaredAttributeGroup" />
    <xs:attributeGroup ref="TimeoutGuardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="HashPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="HashPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.HashPipe" />
  </xs:complexType>
  <xs:attributeGroup name="HashPipeDeclaredAttributeGroup">
    <xs:attribute name="algorithm">
      <xs:annotation>
        <xs:documentation>Hash Algorithm to use Default: HmacSHA256</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="HashAlgorithmAttributeValuesType_2 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="encoding" type="xs:string" />
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Character set to use for converting the secret from String to bytes Default: UTF-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hashEncoding">
      <xs:annotation>
        <xs:documentation>Method to use for converting the hash from bytes to String Default: Base64</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="HashEncodingAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="binaryToTextEncoding">
      <xs:simpleType>
        <xs:union memberTypes="HashEncodingAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="secret" type="xs:string">
      <xs:annotation>
        <xs:documentation>The secret to hash with. Only used if no parameter secret is configured. The secret is only used when there is no authAlias specified, by attribute or parameter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>authAlias to retrieve the secret from (password field). Only used if no parameter authAlias is configured</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="HashPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="HashPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IncreaseIntegerPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="IncreaseIntegerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.IncreaseIntegerPipe" />
  </xs:complexType>
  <xs:attributeGroup name="IncreaseIntegerPipeDeclaredAttributeGroup">
    <xs:attribute name="sessionKey" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Reference to the session variable whose value is to be increased</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="increment" type="frankInt">
      <xs:annotation>
        <xs:documentation>amount to increment the value. Can be set from the attribute or the parameter 'increment' Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IncreaseIntegerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="IncreaseIntegerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IsUserInRolePipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="IsUserInRolePipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.IsUserInRolePipe" />
  </xs:complexType>
  <xs:attributeGroup name="IsUserInRolePipeDeclaredAttributeGroup">
    <xs:attribute name="role" type="xs:string">
      <xs:annotation>
        <xs:documentation>the j2ee role(s) to check, if the user in multiple roles, the first specified role will be matched.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notInRoleForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of forward returned if user is not allowed to assume the specified role Default: notInRole</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IsUserInRolePipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="IsUserInRolePipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IsXmlPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="IsXmlPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.IsXmlPipe" />
  </xs:complexType>
  <xs:attributeGroup name="IsXmlPipeDeclaredAttributeGroup">
    <xs:attribute name="thenForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when &lt;code&gt;true&lt;/code&gt; Default: then</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elseForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when 'false' Default: else</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elseForwardOnEmptyInput" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>return elseforward when input is empty (or thenforward) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IsXmlPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="IsXmlPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JsonPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JsonPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.JsonPipe" />
  </xs:complexType>
  <xs:attributeGroup name="JsonPipeDeclaredAttributeGroup">
    <xs:attribute name="direction">
      <xs:annotation>
        <xs:documentation>Direction of the transformation. Default: JSON2XML</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType_8 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="version" type="xs:string" />
    <xs:attribute name="addXmlRootElement" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When direction is JSON2XML, it wraps a root element around the converted message.
 When direction is XML2JSON, it includes the name of the root element as a key in the converted message. Default: TRUE when JSON2XML and FALSE when XML2JSON</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="prettyPrint" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Format the output in easy legible way (currently only for XML)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JsonPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="JsonPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JsonWellFormedCheckerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.JsonWellFormedChecker" />
  </xs:complexType>
  <xs:complexType name="JsonXsltPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JsonXsltPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.JsonXsltPipe" />
  </xs:complexType>
  <xs:attributeGroup name="JsonXsltPipeDeclaredAttributeGroup">
    <xs:attribute name="jsonResult" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the xml result of the transformation is converted back to json Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace definitions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt; definitions Default: j=http://www.w3.org/2013/XSL/json</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JsonXsltPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="JsonXsltPipeDeclaredAttributeGroup" />
    <xs:attribute name="streamingXslt" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, then this pipe will process the XSLT while streaming in a different thread. Can be used to switch streaming xslt off for debugging purposes Default: set by appconstant xslt.streaming.default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey Default: 100</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: XPath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Omit the XML declaration on top of the output. If not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableOutputEscaping" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, any output is reparsed before being handled as XML again. If not set, the stylesheet is searched for &lt;code&gt;@disable-output-escaping='yes'&lt;/code&gt; and the value is set accordingly Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:annotation>
        <xs:documentation>For xpathExpression only Default: text</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="indentXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. If not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="handleLexicalEvents" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the transformer is enabled to handle lexical events, allowing it for example to process comments and to distinghuish CDATA from escaped text.
 Beware that this option can cause spurious NullPointerExceptions due to a race condition in streaming XSLT 1.0 processing in Xalan 2.7.2 Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipEmptyTags" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt; a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto-detect Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, then the XsltPipe stores it result in the session using the supplied sessionKey, and returns its input as result</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XsltPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="XsltPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.XsltPipe" />
  </xs:complexType>
  <xs:attributeGroup name="XsltPipeDeclaredAttributeGroup">
    <xs:attribute name="streamingXslt" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, then this pipe will process the XSLT while streaming in a different thread. Can be used to switch streaming xslt off for debugging purposes Default: set by appconstant xslt.streaming.default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location of stylesheet to apply to the input message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to retrieve stylesheet location. Overrides stylesheetName or xpathExpression attribute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleSheetCacheSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Size of cache of stylesheets retrieved from styleSheetNameSessionKey Default: 100</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alternatively: XPath-expression to create stylesheet from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="omitXmlDeclaration" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Omit the XML declaration on top of the output. If not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableOutputEscaping" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, any output is reparsed before being handled as XML again. If not set, the stylesheet is searched for &lt;code&gt;@disable-output-escaping='yes'&lt;/code&gt; and the value is set accordingly Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some other use cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.
 If left empty, an the xpathExpression will match any namespace</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputType">
      <xs:annotation>
        <xs:documentation>For xpathExpression only Default: text</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="indentXml" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, result is pretty-printed. If not set, the value specified in the stylesheet is followed Default: false, if not set in stylesheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNamespaces" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; namespaces (and prefixes) in the input message are removed before transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="handleLexicalEvents" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the transformer is enabled to handle lexical events, allowing it for example to process comments and to distinghuish CDATA from escaped text.
 Beware that this option can cause spurious NullPointerExceptions due to a race condition in streaming XSLT 1.0 processing in Xalan 2.7.2 Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="skipEmptyTags" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; empty tags in the output are removed after transformation Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt; a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto-detect Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>If set, then the XsltPipe stores it result in the session using the supplied sessionKey, and returns its input as result</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XsltPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="XsltPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="JwtPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JwtPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.JwtPipe" />
  </xs:complexType>
  <xs:attributeGroup name="JwtPipeDeclaredAttributeGroup">
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Auth Alias for the SharedSecret to be used when signing the JWT (using the HmacSHA256 algorithm)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sharedSecret" type="xs:string">
      <xs:annotation>
        <xs:documentation>Shared secret to be used when signing the JWT (using the HmacSHA256 algorithm)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expirationTime" type="frankInt">
      <xs:annotation>
        <xs:documentation>JWT expirationTime in seconds, 0 to disable Default: 600</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JwtPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="JwtPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LabelFormatType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="LabelFormatCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.rekenbox.LabelFormat" />
  </xs:complexType>
  <xs:attributeGroup name="LabelFormatDeclaredAttributeGroup">
    <xs:attribute name="direction" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets transformation direction. Possible values
 &lt;ul&gt;
   &lt;li&gt;"Xml2Label": transform an XML file to ascii&lt;/li&gt;
   &lt;li&gt;"Label2Xml": transform an ascii file to XML&lt;/li&gt;
 &lt;/ul&gt;
 default: None</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LabelFormatCumulativeAttributeGroup">
    <xs:attributeGroup ref="LabelFormatDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LadybugPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="LadybugPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.ibistesttool.LadybugPipe" />
  </xs:complexType>
  <xs:attributeGroup name="LadybugPipeDeclaredAttributeGroup">
    <xs:attribute name="writeToLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>whether or not to write results to the logfile (testtool4&amp;lt;instance.name&amp;gt;) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSystemOut" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>whether or not to write results to system out Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkRoles" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Set to &lt;code&gt;true&lt;/code&gt; when the pipeline is triggered by a user (e.g. using an http based listener
 that will add a securityHandler session key) and you don't want the listener to check whether the user
 is autorised and/or you want the enforce the roles as configured for the Ladybug Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableReportGenerator" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Set to &lt;code&gt;true&lt;/code&gt; to enable Ladybug's report generator for the duration of the scheduled report runs
 then revert it to its original setting Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exclude" type="xs:string">
      <xs:annotation>
        <xs:documentation>When set, reports with a full path (path + name) that matches with the specified regular expression are skipped. For example, \"/Unscheduled/.*\" or \".*SKIP\".</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LadybugPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="LadybugPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LarvaPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="LarvaPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.LarvaPipe" />
  </xs:complexType>
  <xs:attributeGroup name="LarvaPipeDeclaredAttributeGroup">
    <xs:attribute name="writeToLog" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeToSystemOut" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="execute" type="xs:string">
      <xs:annotation>
        <xs:documentation>The scenario sub directory to execute</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logLevel">
      <xs:annotation>
        <xs:documentation>the larva log level: one of [debug], [pipeline messages prepared for diff], [pipeline messages], [wrong pipeline messages prepared for diff], [wrong pipeline messages], [step passed/failed], [scenario passed/failed], [scenario failed], [totals], [error] Default: wrong pipeline messages</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="LarvaLogLevelAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="waitBeforeCleanup" type="xs:string">
      <xs:annotation>
        <xs:documentation>Default: 100ms</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>the larva timeout in milliseconds Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LarvaPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="LarvaPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LdapChallengePipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="LdapChallengePipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.ldap.LdapChallengePipe" />
  </xs:complexType>
  <xs:attributeGroup name="LdapChallengePipeDeclaredAttributeGroup">
    <xs:attribute name="ldapProviderURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>url to the ldap server. &lt;br/&gt;example: ldap://su05b9.itc.intranet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialContextFactoryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>class to use as initial context factory Default: com.sun.jndi.ldap.ldapctxfactory</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>key of session variable used to store cause of errors</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LdapChallengePipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="LdapChallengePipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LdapFindGroupMembershipsPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="LdapFindGroupMembershipsPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="LdapFindGroupMembershipsPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.ldap.LdapFindGroupMembershipsPipe" />
  </xs:complexType>
  <xs:group name="LdapFindGroupMembershipsPipeDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="CacheElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="LdapFindGroupMembershipsPipeCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="LdapFindGroupMembershipsPipeDeclaredChildGroup" />
      <xs:group ref="AbstractPipeDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="LdapFindGroupMembershipsPipeDeclaredAttributeGroup">
    <xs:attribute name="recursiveSearch" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the memberOf attribute is also searched in all the found members Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LdapFindGroupMembershipsPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="LdapFindGroupMembershipsPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="LdapQueryPipeBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="LdapQueryPipeBaseDeclaredAttributeGroup">
    <xs:attribute name="ldapProviderURL" type="xs:string">
      <xs:annotation>
        <xs:documentation>Url to context to search in, e.g. 'ldaps://DOMAIN.EXT'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>Host part of ldapProviderUrl. Only used when ldapProviderUrl not specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>Port of ldapProviderUrl. Only used when ldapProviderUrl not specified</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useSsl" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Indication to use ldap or ldaps in ldapProviderUrl. Only used when ldapProviderUrl not specified Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseDN" type="xs:string">
      <xs:annotation>
        <xs:documentation>BaseDN, e.g. CN=USERS,DC=DOMAIN,DC=EXT Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials to connect to ldap server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username used to obtain credentials to connect to ldap server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password used to obtain credentials to connect to ldap server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notFoundForwardName" type="xs:string" />
    <xs:attribute name="exceptionForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>PipeForward used when an exception is caught</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LdapQueryPipeBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="LdapQueryPipeBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LdapFindMemberPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="LdapFindMemberPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.ldap.LdapFindMemberPipe" />
  </xs:complexType>
  <xs:attributeGroup name="LdapFindMemberPipeDeclaredAttributeGroup">
    <xs:attribute name="dnSearchIn" type="xs:string">
      <xs:annotation>
        <xs:documentation>The dn of the group to search in when the parameter dnSearchIn is not set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dnFind" type="xs:string">
      <xs:annotation>
        <xs:documentation>The dn of the member to search for when the parameter dnFind is not set</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="recursiveSearch" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the member attribute is also searched in all the found members Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LdapFindMemberPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="LdapFindMemberPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="LdapQueryPipeBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LocalFileSystemPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="LocalFileSystemPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.LocalFileSystemPipe" />
  </xs:complexType>
  <xs:attributeGroup name="LocalFileSystemPipeDeclaredAttributeGroup">
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path to the folder that serves as the root of this virtual filesystem. All specifications of folders or files are relative to this root.
 When the root is left unspecified, absolute paths to files and folders can be used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createRootFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Whether the LocalFileSystem tries to create the root folder if it doesn't exist yet. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LocalFileSystemPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="LocalFileSystemPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="FileSystemPipeDeclaredAttributeGroup">
    <xs:attribute name="action">
      <xs:annotation>
        <xs:documentation>If parameter [action] is set, then the attribute action value will be overridden with the value of the parameter.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="FileSystemActionAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="filename" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filename to operate on. If not set, the parameter filename is used. If that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="destination" type="xs:string">
      <xs:annotation>
        <xs:documentation>Destination for move, copy or rename. If not set, the parameter destination is used. If that is not set either, the input is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputFolder" type="xs:string">
      <xs:annotation>
        <xs:documentation>Folder that is scanned for files when action=list. When not set, the root is scanned</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;: if a non-existing folder is part of the fileName, it will be created. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, for actions create, write, move, copy or rename, the destination file is overwritten if it already exists Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateDays" type="frankInt">
      <xs:annotation>
        <xs:documentation>For action=append: If set to a positive number, the file is rotated each day, and this number of files is kept. The inputFolder must point to the directory where the file resides Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rotateSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>For action=append: If set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept. Size is specified in plain bytes, suffixes like 'K', 'M' or 'G' are not recognized. The inputFolder must point to the directory where the file resides Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfBackups" type="frankInt">
      <xs:annotation>
        <xs:documentation>For the actions write and append, with rotateSize&gt;0: the number of backup files that is kept. The inputFolder must point to the directory where the file resides Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to look for in inputFolder e.g. '*.inp'. Works with actions move, copy, delete and list</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="excludeWildcard" type="xs:string">
      <xs:annotation>
        <xs:documentation>Filter of files to be excluded when looking in inputFolder. Works with actions move, copy, delete and list</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeNonEmptyFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt; then the folder and the content of the non empty folder will be deleted.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeLineSeparator" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt; then the system specific line separator will be appended to the file after executing the action. Works with actions write and append Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset to be used for read and write action</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteEmptyFolder" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to true then the folder will be deleted if it is empty after processing the action. Works with actions delete, readDelete and move</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="outputFormat">
      <xs:annotation>
        <xs:documentation>OutputFormat Default: XML</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DocumentFormatAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="typeFilter">
      <xs:annotation>
        <xs:documentation>Filter for action &lt;code&gt;list&lt;/code&gt;. Specify &lt;code&gt;FILES_ONLY&lt;/code&gt;, &lt;code&gt;FOLDERS_ONLY&lt;/code&gt; or &lt;code&gt;FILES_AND_FOLDERS&lt;/code&gt;. Default: FILES_ONLY</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="TypeFilterAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FileSystemPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="FileSystemPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="LogContextPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="LogContextPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.LogContextPipe" />
  </xs:complexType>
  <xs:attributeGroup name="LogContextPipeDeclaredAttributeGroup">
    <xs:attribute name="export" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt; the ThreadContext parameters will be exported from the current PipeLine up in the call tree. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="continueOnError" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set {@code true} the pipe will never forward to the {@code ExceptionForward} even if an error occurred during execution. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="LogContextPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="LogContextPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="MailSenderPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="MessageSendingPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="MessageSendingPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.MailSenderPipe" />
  </xs:complexType>
  <xs:complexType name="ObfuscatePipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ObfuscatePipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.tibco.pipes.ObfuscatePipe" />
  </xs:complexType>
  <xs:attributeGroup name="ObfuscatePipeDeclaredAttributeGroup">
    <xs:attribute name="direction">
      <xs:annotation>
        <xs:documentation>Default: OBFUSCATE</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="DirectionAttributeValuesType_6 variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ObfuscatePipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ObfuscatePipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PGPPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="PGPPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.PGPPipe" />
  </xs:complexType>
  <xs:attributeGroup name="PGPPipeDeclaredAttributeGroup">
    <xs:attribute name="action">
      <xs:annotation>
        <xs:documentation>Action to be taken when pipe is executed.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ActionAttributeValuesType_4 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="recipients" type="xs:string">
      <xs:annotation>
        <xs:documentation>Recipients to be used during encryption stage. If multiple, separate with ';' (semicolon)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verificationAddresses" type="xs:string">
      <xs:annotation>
        <xs:documentation>Emails of the senders. This will be used to verify that all the senders have signed the given message.
 If not set, and the action is verify; this pipe will validate that at least one person has signed.
 For signing action, it needs to be set to the email that was used to generate the private key
 "that is being used for this process.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secretKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path to the private key. It will be used when signing or decrypting.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secretPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password for the private key.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="publicKeys" type="xs:string">
      <xs:annotation>
        <xs:documentation>Path to the recipient's public key. It will be used for encryption and verification.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="PGPPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="PGPPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PasswordGeneratorPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="PasswordGeneratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.PasswordGeneratorPipe" />
  </xs:complexType>
  <xs:attributeGroup name="PasswordGeneratorPipeDeclaredAttributeGroup">
    <xs:attribute name="useSecureRandom" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Whether the secureRandom algorithm is used. Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lCharacters" type="xs:string">
      <xs:annotation>
        <xs:documentation>The lowercase characters to use. Default: ('a'..'z')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uCharacters" type="xs:string">
      <xs:annotation>
        <xs:documentation>The uppercase characters to use. Default: ('A'..'Z')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numbers" type="xs:string">
      <xs:annotation>
        <xs:documentation>The numbers to use. Default: ('0'..'9')</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="signs" type="xs:string">
      <xs:annotation>
        <xs:documentation>The signs to use. Default: (;:_%$#@!&amp;gt;&amp;lt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numOfLCharacters" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of lowercase characters in the generated password. Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numOfDigits" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of digits in the generated password. Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numOfSigns" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of sign characters in the generated password. Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numOfUCharacters" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of uppercase characters in the generated password. Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="PasswordGeneratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="PasswordGeneratorPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PasswordHashPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="PasswordHashPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.PasswordHashPipe" />
  </xs:complexType>
  <xs:attributeGroup name="PasswordHashPipeDeclaredAttributeGroup">
    <xs:attribute name="hashSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of sessionkey that holds the hash which will be used to validate the password (input of the pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rounds" type="frankInt" />
    <xs:attribute name="roundsSessionKey" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="PasswordHashPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="PasswordHashPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PdfPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="PdfPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.aspose.pipe.PdfPipe" />
  </xs:complexType>
  <xs:attributeGroup name="PdfPipeDeclaredAttributeGroup">
    <xs:attribute name="action">
      <xs:simpleType>
        <xs:union memberTypes="DocumentActionAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="mainDocumentSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key that contains the document that the attachments will be attached to. Only used when action is set to 'combine' Default: defaultMainDocumentSessionKey</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="conversionResultDocumentSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>The session key used to store the main conversion result document. Only to be used when action is set to 'convert'. Default: documents</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="conversionResultFilesSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>The session-key in which result files are stored when documents are converted to PDF.

 &lt;p&gt;
 Conversion result files are stored as messages in the session, under keys numbered based
 on the value set here. If #isSaveSeparate() is {@code false} then only the main
 document is stored in the session, if it is {@code true} then each attachment is stored
 separately.
 &lt;/p&gt;
 &lt;p&gt;
     For example, if a file is converted that has 2 attachments and #setSaveSeparate(boolean)
     is set to {@code true} then there will be the following 3 session keys (assuming the default value
     is unchanged):
     &lt;ol&gt;
         &lt;li&gt;{@code pdfConversionResultFiles1}&lt;/li&gt;
         &lt;li&gt;{@code pdfConversionResultFiles2}&lt;/li&gt;
         &lt;li&gt;{@code pdfConversionResultFiles3}&lt;/li&gt;
     &lt;/ol&gt;
     Each session key will contain a FileMessage referencing the contents of that PDF.
 &lt;/p&gt; Default: pdfConversionResultFiles</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filenameToAttachSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>session key that contains the filename to be attached. Only used when the action is set to 'combine' Default: defaultFileNameToAttachSessionKey</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fontsDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>fonts folder to load the fonts. If not set then a temporary folder will be created to extract fonts from fonts.zip everytime. Having fontsDirectory to be set will improve startup time</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unpackCommonFontsArchive" type="frankBoolean" />
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>charset to be used to decode the given input message in case the input is not binary but character stream Default: UTF-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="license" type="xs:string">
      <xs:annotation>
        <xs:documentation>aspose license location including the file name. It can also be used without license but there some restrictions on usage. If license is in resource, license attribute can be license file name. If the license is in somewhere in filesystem then it should be full path to file including filename and starting with file://// prefix. classloader.allowed.protocols property should contain 'file' protocol</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="saveSeparate" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when sets to false, converts the file including the attachments attached to the main file. when it is true, saves each attachment separately Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pdfOutputLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>directory to save resulting pdf files after conversion. If not set then a temporary directory will be created and the conversion results will be stored in that directory.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="loadExternalResources" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when set to true, external resources, such as stylesheets and images found in HTML pages, will be loaded from the internet Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="PdfPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="PdfPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PostboxRetrieverPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="PostboxRetrieverPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="PostboxRetrieverPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.PostboxRetrieverPipe" />
  </xs:complexType>
  <xs:group name="PostboxRetrieverPipeDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="ListenerElementGroup_2" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="ListenerElementGroup_2">
    <xs:choice>
      <xs:element name="Listener">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="ParamElementGroup" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ListenerElementGroupBase_2" />
    </xs:choice>
  </xs:group>
  <xs:group name="ListenerElementGroupBase_2">
    <xs:choice>
      <xs:element name="PullingJmsListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PullingJmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="PostboxRetrieverPipeCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="PostboxRetrieverPipeDeclaredChildGroup" />
      <xs:group ref="AbstractPipeDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="PostboxRetrieverPipeDeclaredAttributeGroup">
    <xs:attribute name="resultOnEmptyPostbox" type="xs:string">
      <xs:annotation>
        <xs:documentation>result when no object is on postbox Default: empty postbox</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="PostboxRetrieverPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="PostboxRetrieverPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PutInSessionType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="PutInSessionCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.PutInSession" />
  </xs:complexType>
  <xs:attributeGroup name="PutInSessionDeclaredAttributeGroup">
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of the session variable to store the input in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string">
      <xs:annotation>
        <xs:documentation>Value to store in the &lt;code&gt;pipeLineSession&lt;/code&gt;. If not set, the input of the pipe is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="PutInSessionCumulativeAttributeGroup">
    <xs:attributeGroup ref="PutInSessionDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="PutParametersInSessionType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.PutParametersInSession" />
  </xs:complexType>
  <xs:complexType name="PutSystemDateInSessionType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="PutSystemDateInSessionCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.PutSystemDateInSession" />
  </xs:complexType>
  <xs:attributeGroup name="PutSystemDateInSessionDeclaredAttributeGroup">
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key of session variable to store systemdate in Default: systemDate</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFormat" type="xs:string">
      <xs:annotation>
        <xs:documentation>Format to store date in Default: full ISO format: DateUtils.fullIsoFormat</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeZone" type="xs:string">
      <xs:annotation>
        <xs:documentation>Time zone to use for the formatter Default: the default time zone for the JVM</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sleepWhenEqualToPrevious" type="frankInt">
      <xs:annotation>
        <xs:documentation>Set to a time &lt;i&gt;in milliseconds&lt;/i&gt; to create a value that is different to the previous returned value by a PutSystemDateInSession pipe in
 this virtual machine or &lt;code&gt;-1&lt;/code&gt; to disable. The thread will sleep for the specified time before recalculating a new value. Set the
 timezone to a value without Daylight Saving Time (like GMT+1) to prevent this pipe to generate two equal value's when the clock is set back.
 &lt;b&gt;note:&lt;/b&gt; When you're looking for a GUID parameter for your XSLT it might be better to use
 &amp;lt;param name=&amp;quot;guid&amp;quot; pattern=&amp;quot;{hostname}_{uid}&amp;quot;/&amp;gt;, see Parameter. Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="returnFixedDate" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the date/time returned will always be 2001-12-17 09:30:47 (for testing purposes only). It is overridden by the value of the pipelinesession key &lt;code&gt;stub4testtool.fixeddate&lt;/code&gt; when it exists Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getCurrentTimeStampInMillis" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to 'true' then current time stamp in millisecond will be stored in the sessionKey Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="PutSystemDateInSessionCumulativeAttributeGroup">
    <xs:attributeGroup ref="PutSystemDateInSessionDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="RekenBoxCallerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="RekenBoxCallerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.rekenbox.RekenBoxCaller" />
  </xs:complexType>
  <xs:attributeGroup name="RekenBoxCallerDeclaredAttributeGroup">
    <xs:attribute name="rekenBoxName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Fixed name of the rekenbox (or wrapper) to be called. If empty, the name is determined from the request</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="runPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory on server where rekenbox-executable can be found</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="templateDir" type="xs:string">
      <xs:annotation>
        <xs:documentation>Rekenbox template directory on server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputOutputDirectory" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory on server where input and output files are (temporarily) stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="commandLineType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Format of commandline of rekenbox. Possible values
 "straight": rekenbox is called like: rekenbox.exe inputFileName outputFileName templateDir
 "switches": rekenbox is called like: rekenbox.exe /IinputFileName /UoutputFileName /PtemplateDir
 "redirected": rekenbox is called like: rekenbox.exe inputFileName templateDir &gt; outputFileName; (This method has not been fully tested)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="executableExtension" type="xs:string">
      <xs:annotation>
        <xs:documentation>Extension of rekenbox-executable</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cleanup" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, input and output files are removed after the call to the rekenbox is finished</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rekenboxSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key in pipeLineSession to store rekenbox name in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dataFilenamePrefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>First part of filenames that communicate requests and replies to rekenbox</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxRequestNumber" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximal number that will be concatenated to dataFilenamePrefix</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="RekenBoxCallerCumulativeAttributeGroup">
    <xs:attributeGroup ref="RekenBoxCallerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="RemoveCacheKeyPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="RemoveCacheKeyPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.cache.RemoveCacheKeyPipe" />
  </xs:complexType>
  <xs:attributeGroup name="RemoveCacheKeyPipeDeclaredAttributeGroup">
    <xs:attribute name="cacheName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the cache from which items are to be removed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyXPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>XPath expression to extract cache key from request message</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyXPathOutputType">
      <xs:annotation>
        <xs:documentation>Output type of xpath expression to extract cache key from request message, must be 'xml' or 'text' Default: text</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="OutputTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keyNamespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for keyXPath. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyStyleSheet" type="xs:string">
      <xs:annotation>
        <xs:documentation>Stylesheet to extract cache key from request message. Use in combination with cacheEmptyKeys to inhibit caching for certain groups of request messages</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyInputSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key to use as input for transformation of request message to key by keyXPath or keyStyleSheet</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="RemoveCacheKeyPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="RemoveCacheKeyPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="RemoveFromSessionType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="RemoveFromSessionCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.RemoveFromSession" />
  </xs:complexType>
  <xs:attributeGroup name="RemoveFromSessionDeclaredAttributeGroup">
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the key of the entry in the &lt;code&gt;pipelinesession&lt;/code&gt; to remove. if this key is empty the input message is interpretted as key. for multiple keys use ',' as delimiter</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="RemoveFromSessionCumulativeAttributeGroup">
    <xs:attributeGroup ref="RemoveFromSessionDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ReplacerPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ReplacerPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.ReplacerPipe" />
  </xs:complexType>
  <xs:attributeGroup name="ReplacerPipeDeclaredAttributeGroup">
    <xs:attribute name="find" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the string that is searched for. Newlines can be represented
 by the #setLineSeparatorSymbol(String).</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replace" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sets the string that will replace each of the occurrences of the find-string. Newlines can be represented
 * by the #setLineSeparatorSymbol(String).</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineSeparatorSymbol" type="xs:string">
      <xs:annotation>
        <xs:documentation>sets the string that will represent the line-separator in the #setFind(String) and #setReplace(String) strings.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceNonXmlChars" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Replace all characters that are non-printable according to the XML specification with
 the value specified in #setNonXmlReplacementCharacter(String).
 &lt;p&gt;
 &lt;b&gt;NB:&lt;/b&gt; This will only replace or remove characters considered non-printable. This
 will not check if a given character is valid in the particular way it is used. Thus it will
 not remove or replace, for instance, a single {@code '&amp;'} character.
 &lt;/p&gt;
 &lt;p&gt;
 See also:
 	&lt;ul&gt;
 	    &lt;li&gt;XmlEncodingUtils replaceNonValidXmlCharacters&lt;/li&gt;
 	    &lt;li&gt;&lt;a href="https://www.w3.org/TR/xml/#charsets"&gt;Character ranges specified in the XML Specification&lt;/a&gt;&lt;/li&gt;
 	&lt;/ul&gt;
 &lt;/p&gt; Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nonXmlReplacementCharacter" type="xs:string">
      <xs:annotation>
        <xs:documentation>character that will replace each non-valid xml character (empty string is also possible) (use &amp;amp;#x00bf; for inverted question mark) Default: empty string</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceNonXmlChar" type="xs:string" />
    <xs:attribute name="allowUnicodeSupplementaryCharacters" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Whether to allow Unicode supplementary characters (like a smiley) during replaceNonValidXmlCharacters Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="substituteVars" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Should properties (values between &lt;code&gt;${&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;) be resolved. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ReplacerPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ReplacerPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ResultSetIteratingPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="IteratingPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JdbcIteratingPipeBaseCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.jdbc.ResultSetIteratingPipe" />
  </xs:complexType>
  <xs:complexType name="Samba1PipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="Samba1PipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.Samba1Pipe" />
  </xs:complexType>
  <xs:attributeGroup name="Samba1PipeDeclaredAttributeGroup">
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>The destination, aka smb://xxx/yyy share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SMB share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SMB share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain credentials for the SMB share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domainName" type="xs:string">
      <xs:annotation>
        <xs:documentation>logon/authentication domain, in case the user account is bound to a domain such as Active Directory.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="force" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, intermediate directories are created also Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="listHiddenFiles" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls whether hidden files are seen or not Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Samba1PipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="Samba1PipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Samba2PipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="Samba2PipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.Samba2Pipe" />
  </xs:complexType>
  <xs:attributeGroup name="Samba2PipeDeclaredAttributeGroup">
    <xs:attribute name="hostname" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Hostname of the SMB share.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="frankInt">
      <xs:annotation>
        <xs:documentation>Port to connect to. Default: 445</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authType">
      <xs:annotation>
        <xs:documentation>Type of the authentication either 'NTLM' or 'SPNEGO'.
 When setting SPNEGO, the host must use the FQDN, and must be registered on the KDC with a valid SPN. Default: SPNEGO</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="Samba2AuthTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for the smb share</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share username</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>the smb share password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="domainName" type="xs:string">
      <xs:annotation>
        <xs:documentation>NTLM only: logon/authentication domain, in case the user account is bound to a domain such as Active Directory.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="share" type="xs:string">
      <xs:annotation>
        <xs:documentation>May not contain '\\' characters. The destination share, aka smb://xxx/yyy share.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="kdc" type="xs:string">
      <xs:annotation>
        <xs:documentation>SPNEGO only:
 Key Distribution Center, typically hosted on a domain controller.
 Stored in &lt;code&gt;java.security.krb5.kdc&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>SPNEGO only:
 Kerberos Realm, case sensitive. Typically upper case and the same as the domain name.
 An Active Directory domain acts as a Kerberos Realm.
 Stored in &lt;code&gt;java.security.krb5.realm&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Samba2PipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="Samba2PipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FileSystemPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SambaPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="Samba2PipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.SambaPipe" />
  </xs:complexType>
  <xs:complexType name="SapLUWManagerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SapLUWManagerCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.sap.jco3.SapLUWManager" />
  </xs:complexType>
  <xs:attributeGroup name="SapLUWManagerDeclaredAttributeGroup">
    <xs:attribute name="sapSystemName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the SapSystem used by this object</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="action" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of: begin, commit, rollback, release</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="luwHandleSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key under which information is stored</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SapLUWManagerCumulativeAttributeGroup">
    <xs:attributeGroup ref="SapLUWManagerDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ScanTibcoSolutionPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ScanTibcoSolutionPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.svn.ScanTibcoSolutionPipe" />
  </xs:complexType>
  <xs:attributeGroup name="ScanTibcoSolutionPipeDeclaredAttributeGroup">
    <xs:attribute name="url" type="xs:string" />
    <xs:attribute name="level" type="frankInt" />
  </xs:attributeGroup>
  <xs:attributeGroup name="ScanTibcoSolutionPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ScanTibcoSolutionPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SendTibcoMessageType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SendTibcoMessageCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.extensions.tibco.SendTibcoMessage" />
  </xs:complexType>
  <xs:attributeGroup name="SendTibcoMessageDeclaredAttributeGroup">
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>URL or base of URL to be used. When multiple URLs are defined (comma separated list), the first URL is used of which the server has an active state</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>alias used to obtain credentials for authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>username used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>password used in authentication to host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queueName" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the queue which is used for browsing one queue</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageProtocol">
      <xs:annotation>
        <xs:documentation>Protocol of Tibco service to be called</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="MessageProtocolAttributeValuesType_3 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="replyTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Maximum time in milliseconds to wait for a reply. 0 means no timeout. (Only for messageProtocol=RR) Default: 5000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="soapAction" type="xs:string">
      <xs:annotation>
        <xs:documentation>If empty then derived from queueName (if $messagingLayer='P2P' then '$applicationFunction' else '$operationName_$operationVersion)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emsPropertiesFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>Location to a &lt;code&gt;jndi.properties&lt;/code&gt; file for additional EMS (SSL) properties</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SendTibcoMessageCumulativeAttributeGroup">
    <xs:attributeGroup ref="SendTibcoMessageDeclaredAttributeGroup" />
    <xs:attributeGroup ref="TimeoutGuardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SenderPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="MessageSendingPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.SenderPipe" />
  </xs:complexType>
  <xs:group name="SenderPipeDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="MessageLogElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="InputWrapperElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="InputValidatorElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="SenderElementGroup" minOccurs="1" maxOccurs="1" />
      <xs:group ref="ListenerElementGroup_3" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:group name="ListenerElementGroup_3">
    <xs:choice>
      <xs:element name="Listener">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="ParamElementGroup" />
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="ListenerElementGroupBase_3" />
    </xs:choice>
  </xs:group>
  <xs:group name="ListenerElementGroupBase_3">
    <xs:choice>
      <xs:element name="PullingJmsListener">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="PullingJmsListenerType">
              <xs:attribute name="elementRole" type="xs:string" fixed="listener" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="SenderPipeCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="SenderPipeDeclaredChildGroup" />
      <xs:group ref="OutputValidatorElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="OutputWrapperElementGroup" minOccurs="0" maxOccurs="1" />
      <xs:group ref="AbstractPipeDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:complexType name="SignaturePipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SignaturePipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.SignaturePipe" />
  </xs:complexType>
  <xs:attributeGroup name="SignaturePipeDeclaredAttributeGroup">
    <xs:attribute name="action">
      <xs:annotation>
        <xs:documentation>Action to be taken when pipe is executed. Default: SIGN</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ActionAttributeValuesType_5 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="algorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>The signing algorithm Default: ALGORITHM_DEFAULT</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="provider" type="xs:string">
      <xs:annotation>
        <xs:documentation>Cryptography provider</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="signatureBase64" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>if true, the signature is (expected to be) base64 encoded Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystore" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Keystore to obtain signing key</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreType">
      <xs:annotation>
        <xs:documentation>Type of keystore, can be pkcs12 or pem Default: pkcs12</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="keystoreAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>Keystore password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias in keystore</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasAuthAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Alias used to obtain keystoreAlias password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keystoreAliasPassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>KeystoreAlias password</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyManagerAlgorithm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Key manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SignaturePipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="SignaturePipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="SizePipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.SizePipe" />
  </xs:complexType>
  <xs:complexType name="SkipPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SkipPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.SkipPipe" />
  </xs:complexType>
  <xs:attributeGroup name="SkipPipeDeclaredAttributeGroup">
    <xs:attribute name="skip" type="frankInt">
      <xs:annotation>
        <xs:documentation>Number of bytes (for binary input) or characters (for character input) to skip. An empty byte array or string is returned when skip is larger than the length of the input. Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="length" type="frankInt">
      <xs:annotation>
        <xs:documentation>If length&gt;=0 only these number of bytes (for binary input) or characters (for character input) is returned. Default: -1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SkipPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="SkipPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="Stream2StringPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.Stream2StringPipe" />
  </xs:complexType>
  <xs:complexType name="Text2XmlPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="Text2XmlPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.Text2XmlPipe" />
  </xs:complexType>
  <xs:attributeGroup name="Text2XmlPipeDeclaredAttributeGroup">
    <xs:attribute name="xmlTag" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The xml tag to encapsulate the text in</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="splitLines" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether the lines of the input are places in separated &amp;lt;line&amp;gt; tags Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="replaceNonXmlChars" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Replace all non xml chars (not in the &lt;a href="http://www.w3.org/tr/2006/rec-xml-20060816/#nt-char"&gt;character range as specified by the xml specification&lt;/a&gt;)
 with the inverted question mark (0x00bf) Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useCdataSection" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Controls whether the text to encapsulate should be put in a cdata section Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="Text2XmlPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="Text2XmlPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="TextSplitterPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="TextSplitterPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.TextSplitterPipe" />
  </xs:complexType>
  <xs:attributeGroup name="TextSplitterPipeDeclaredAttributeGroup">
    <xs:attribute name="maxBlockLength" type="frankInt">
      <xs:annotation>
        <xs:documentation>Set the maximum number of characters of a block Default: 160</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="softSplit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, try to break up the message at spaces, instead of in the middle of words Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="TextSplitterPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="TextSplitterPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="UUIDGeneratorPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="UUIDGeneratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.UUIDGeneratorPipe" />
  </xs:complexType>
  <xs:attributeGroup name="UUIDGeneratorPipeDeclaredAttributeGroup">
    <xs:attribute name="type">
      <xs:annotation>
        <xs:documentation>Format of generated string. Default: alphanumeric</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="TypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="UUIDGeneratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="UUIDGeneratorPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="UnzipPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="UnzipPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.UnzipPipe" />
  </xs:complexType>
  <xs:attributeGroup name="UnzipPipeDeclaredAttributeGroup">
    <xs:attribute name="directory" type="xs:string">
      <xs:annotation>
        <xs:documentation>Directory to extract the archive to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="directorySessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Sessionkey with a directory value to extract the archive to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteOnExit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If true, file is automatically deleted upon normal JVM termination Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectResults" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;false&lt;/code&gt;, only a small summary (count of items in zip) is returned Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectFileContents" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the contents of the files in the zip are returned in the result xml message of this pipe. Please note this can consume a lot of memory for large files or a large number of files Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collectFileContentsBase64Encoded" type="xs:string">
      <xs:annotation>
        <xs:documentation>Comma separated list of file extensions. Files with an extension which is part of this list will be base64 encoded. All other files are assumed to have UTF-8 when reading it from the zip and are added as escaped xml with non-unicode-characters being replaced by inverted question mark appended with #, the character number and ; Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keepOriginalFileName" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;false&lt;/code&gt;, a suffix is added to the original filename to be sure it is unique Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="createSubDirectories" type="frankBoolean" />
    <xs:attribute name="keepOriginalFilePath" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the path of the zip entry will be preserved. Otherwise, the zip entries will be extracted to the root folder Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="assumeDirectoryExists" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, validation of directory is ignored Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="checkDirectory" type="frankBoolean" />
    <xs:attribute name="processFile" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of a file to be processed. Otherwise, the input itself is used. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="UnzipPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="UnzipPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="WsdlGeneratorPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="WsdlGeneratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.WsdlGeneratorPipe" />
  </xs:complexType>
  <xs:attributeGroup name="WsdlGeneratorPipeDeclaredAttributeGroup">
    <xs:attribute name="from" type="xs:string">
      <xs:annotation>
        <xs:documentation>either parent (adapter of pipeline which contains this pipe) or input (name of adapter specified by input of pipe), adapter must be within the same Configuration Default: parent</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="WsdlGeneratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="WsdlGeneratorPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XQueryPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="XQueryPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.XQueryPipe" />
  </xs:complexType>
  <xs:attributeGroup name="XQueryPipeDeclaredAttributeGroup">
    <xs:attribute name="xqueryName" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file (resource) on the classpath to read the xquery from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xqueryFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the file on the file system to read the xquery from</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XQueryPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="XQueryPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlBuilderPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="XmlBuilderPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.XmlBuilderPipe" />
  </xs:complexType>
  <xs:attributeGroup name="XmlBuilderPipeDeclaredAttributeGroup">
    <xs:attribute name="substringStart" type="xs:string">
      <xs:annotation>
        <xs:documentation>substring to start translation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="substringEnd" type="xs:string">
      <xs:annotation>
        <xs:documentation>substring to end translation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlBuilderPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlBuilderPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlFileElementIteratorPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="IteratingPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="XmlFileElementIteratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.XmlFileElementIteratorPipe" />
  </xs:complexType>
  <xs:attributeGroup name="XmlFileElementIteratorPipeDeclaredAttributeGroup">
    <xs:attribute name="elementName" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the element to iterate over (alternatively: &lt;code&gt;elementChain&lt;/code&gt;)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elementChain" type="xs:string">
      <xs:annotation>
        <xs:documentation>the name of the element to iterate over, preceded with all ancestor elements and separated by semicolons (e.g. adapter;pipeline;pipe)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlFileElementIteratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlFileElementIteratorPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="IteratingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlIfType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="XmlIfCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.XmlIf" />
  </xs:complexType>
  <xs:attributeGroup name="XmlIfDeclaredAttributeGroup">
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the key in the &lt;code&gt;pipelinesession&lt;/code&gt; to retrieve the input-message from. if not set, the current input message of the pipe is taken. n.b. same as &lt;code&gt;getinputfromsessionkey&lt;/code&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expressionValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>a string to compare the result of the xpathExpression (or the input-message itself) to. If not specified, a non-empty result leads to the 'then'-forward, an empty result to 'else'-forward</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="thenForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when output is &lt;code&gt;true&lt;/code&gt; Default: then</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elseForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>forward returned when output is &lt;code&gt;false&lt;/code&gt; Default: else</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath expression to be applied to the input-message. if not set, no transformation is done</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="regex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to be applied to the input-message (ignored if &lt;code&gt;xpathExpression&lt;/code&gt; is specified).
 The input-message &lt;b&gt;fully&lt;/b&gt; matching the given regular expression leads to the 'then'-forward</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt; a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan) Default: 2</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>namespace definitions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt; definitions.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of XSLT transformation Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlIfCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlIfDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="XmlSwitchType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="XmlSwitchCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.pipes.XmlSwitch" />
  </xs:complexType>
  <xs:attributeGroup name="XmlSwitchDeclaredAttributeGroup">
    <xs:attribute name="styleSheetName" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet may return a string representing the forward to look up Default: &lt;i&gt;a stylesheet that returns the name of the root-element&lt;/i&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="serviceSelectionStylesheetFilename" type="xs:string">
      <xs:annotation>
        <xs:documentation>stylesheet may return a string representing the forward to look up Default: &lt;i&gt;a stylesheet that returns the name of the root-element&lt;/i&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xpathExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>xpath-expression that returns a string representing the forward to look up. It's possible to refer to a parameter (which e.g. contains a value from a sessionkey) by using the parameter name prefixed with $</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceDefs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of &lt;code&gt;prefix=namespaceuri&lt;/code&gt;-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the key in the &lt;code&gt;PipeLineSession&lt;/code&gt; to retrieve the input message from, if a styleSheetName or a xpathExpression is specified.
 If no styleSheetName or xpathExpression is specified, the value of the session variable is used as the name of the forward.
 If none of sessionKey, styleSheetName or xpathExpression are specified, the element name of the root node of the input message is taken as the name of forward.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notFoundForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Forward returned when the pipename derived from the stylesheet could not be found.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emptyForwardName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Forward returned when the content, on which the switch is performed, is empty. if &lt;code&gt;emptyforwardname&lt;/code&gt; is not specified, &lt;code&gt;notfoundforwardname&lt;/code&gt; is used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xsltVersion" type="frankInt">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt; a Saxon (net.sf.saxon) xslt processor 2.0 or 3.0 respectively will be used, otherwise xslt processor 1.0 (org.apache.xalan). &lt;code&gt;0&lt;/code&gt; will auto-detect Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="storeForwardInSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Selected forward name will be stored in the specified session key.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forwardNameSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key that will be used to get the forward name from.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespaceAware" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>controls namespace-awareness of XSLT transformation Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="XmlSwitchCumulativeAttributeGroup">
    <xs:attributeGroup ref="XmlSwitchDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ZipIteratorPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="IteratingPipeCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ZipIteratorPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.compression.ZipIteratorPipe" />
  </xs:complexType>
  <xs:attributeGroup name="ZipIteratorPipeDeclaredAttributeGroup">
    <xs:attribute name="contentsSessionKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key used to store contents of each zip entry Default: zipdata</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="streamingContents" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;false&lt;/code&gt;, a string containing the contents of the entry is placed under the session key, instead of the inputstream to the contents Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeInputstreamOnExit" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the inputstream is not closed after it has been used Default: true</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="charset" type="xs:string">
      <xs:annotation>
        <xs:documentation>Charset used when reading the contents of the entry (only used if streamingContents=false) Default: utf-8</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processFile" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, each entry is assumed to be the name of a file to be compressed. Otherwise, the input itself is compressed. Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ZipIteratorPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ZipIteratorPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="IteratingPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="ZipWriterPipeType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="AbstractPipeDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ZipWriterPipeCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.compression.ZipWriterPipe" />
  </xs:complexType>
  <xs:attributeGroup name="ZipWriterPipeDeclaredAttributeGroup">
    <xs:attribute name="zipWriterHandle" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key used to refer to zip session. Must be specified with another value if ZipWriterPipes are nested. Deprecated, use collectionName instead. Default: zipwriterhandle</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="completeFileHeader" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>Only for action='write': If set to &lt;code&gt;true&lt;/code&gt;, the fields 'crc-32', 'compressed size' and 'uncompressed size' in the zip entry file header are set explicitly (note: compression ratio is zero) Default: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backwardsCompatibility" type="frankBoolean">
      <xs:annotation>
        <xs:documentation>When action is OPEN: If input is a string, it's assumed it's the location where to save the Zip Archive.
 When action is WRITE: Input will be 'piped' to the output, and the message will be preserved.
 Avoid using this if possible.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ZipWriterPipeCumulativeAttributeGroup">
    <xs:attributeGroup ref="ZipWriterPipeDeclaredAttributeGroup" />
    <xs:attributeGroup ref="CollectorPipeBaseCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="CollectorPipeBaseDeclaredAttributeGroup">
    <xs:attribute name="action">
      <xs:annotation>
        <xs:documentation>Collectors must be opened before you can write content to them, after it's closed you can no longer write to it. Default: WRITE</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="ActionAttributeValuesType_3 variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="collectionName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Session key used to refer to collection. Must be specified with another value if multiple CollectorPipes are active at the same time in the same session Default: collection</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CollectorPipeBaseCumulativeAttributeGroup">
    <xs:attributeGroup ref="CollectorPipeBaseDeclaredAttributeGroup" />
    <xs:attributeGroup ref="FixedForwardPipeCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="JobElementGroup">
    <xs:choice>
      <xs:element name="Job">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element name="DirectoryCleaner" type="DirectoryCleanerType" />
              <xs:element name="Locker" type="LockerType" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="job" />
          <xs:attribute name="className" type="xs:string" default="org.frankframework.scheduler.job.Job" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="JobElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="JobElementGroupBase">
    <xs:choice>
      <xs:element name="ActionJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ActionJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CheckReloadJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CheckReloadJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CleanupDatabaseJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CleanupDatabaseJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="CleanupFileSystemJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CleanupFileSystemJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ExecuteQueryJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ExecuteQueryJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="IbisActionJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="IbisActionJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="LoadDatabaseSchedulesJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LoadDatabaseSchedulesJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="RecoverAdaptersJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="RecoverAdaptersJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SendMessageJob">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SendMessageJobType">
              <xs:attribute name="elementRole" type="xs:string" fixed="job" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="ActionJobType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JobDefDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ActionJobCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.scheduler.job.ActionJob" />
  </xs:complexType>
  <xs:attributeGroup name="ActionJobDeclaredAttributeGroup">
    <xs:attribute name="action" use="required">
      <xs:simpleType>
        <xs:union memberTypes="AvailableActionAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="configurationName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Configuration on which job operates</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="adapterName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Adapter on which job operates</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="receiverName" type="xs:string">
      <xs:annotation>
        <xs:documentation>Receiver on which job operates</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ActionJobCumulativeAttributeGroup">
    <xs:attributeGroup ref="ActionJobDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="JobDefDeclaredChildGroup">
    <xs:sequence>
      <xs:element name="Locker" minOccurs="0" maxOccurs="1" type="LockerType" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="JobDefDeclaredAttributeGroup">
    <xs:attribute name="jobGroup" type="xs:string" />
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Name of the job</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>Description of the job</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cronExpression" type="xs:string">
      <xs:annotation>
        <xs:documentation>CRON expression that determines the frequency of execution.
 Can &lt;b&gt;not&lt;/b&gt; be used in combination with Interval.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="interval" type="frankInt">
      <xs:annotation>
        <xs:documentation>Triggers the Job at the specified number of milliseconds. Keep cronExpression empty in order to use interval.
 Value &lt;code&gt;0&lt;/code&gt; may be used to run once at startup of the application.
 A value of 0 in combination with function 'sendMessage' will set dependencyTimeout on the IbisLocalSender to -1 to keep waiting indefinitely instead of 60 seconds for the adapter to start.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numThreads" type="frankInt">
      <xs:annotation>
        <xs:documentation>Number of threads that may execute concurrently Default: 1</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="messageKeeperSize" type="frankInt">
      <xs:annotation>
        <xs:documentation>Number of messages displayed in ibisconsole Default: 10</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="JobDefCumulativeAttributeGroup">
    <xs:attributeGroup ref="JobDefDeclaredAttributeGroup" />
    <xs:attributeGroup ref="TransactionAttributesDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CheckReloadJobType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JobDefDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.scheduler.job.CheckReloadJob" />
  </xs:complexType>
  <xs:complexType name="CleanupDatabaseJobType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JobDefDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="CleanupDatabaseJobCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.scheduler.job.CleanupDatabaseJob" />
  </xs:complexType>
  <xs:attributeGroup name="CleanupDatabaseJobDeclaredAttributeGroup">
    <xs:attribute name="queryTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of seconds the database driver will wait for a statement to execute. If the limit is exceeded, a TimeoutException is thrown. 0 means no timeout Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="CleanupDatabaseJobCumulativeAttributeGroup">
    <xs:attributeGroup ref="CleanupDatabaseJobDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="CleanupFileSystemJobType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="CleanupFileSystemJobCumulativeChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.scheduler.job.CleanupFileSystemJob" />
  </xs:complexType>
  <xs:group name="CleanupFileSystemJobDeclaredChildGroup">
    <xs:sequence>
      <xs:element name="DirectoryCleaner" minOccurs="0" maxOccurs="unbounded" type="DirectoryCleanerType" />
    </xs:sequence>
  </xs:group>
  <xs:group name="CleanupFileSystemJobCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="CleanupFileSystemJobDeclaredChildGroup" />
      <xs:group ref="JobDefDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:complexType name="ExecuteQueryJobType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JobDefDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ExecuteQueryJobCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.scheduler.job.ExecuteQueryJob" />
  </xs:complexType>
  <xs:attributeGroup name="ExecuteQueryJobDeclaredAttributeGroup">
    <xs:attribute name="query" type="xs:string">
      <xs:annotation>
        <xs:documentation>The SQL query text to be executed</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datasourceName" type="xs:string">
      <xs:annotation>
        <xs:documentation>JNDI name of datasource to be used Default: jdbc.datasource.default</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="queryTimeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>The number of seconds the database driver will wait for a statement to execute. If the limit is exceeded, a TimeoutException is thrown. 0 means no timeout Default: 0</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ExecuteQueryJobCumulativeAttributeGroup">
    <xs:attributeGroup ref="ExecuteQueryJobDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:complexType name="IbisActionJobType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JobDefDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="ActionJobCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.scheduler.job.IbisActionJob" />
  </xs:complexType>
  <xs:complexType name="LoadDatabaseSchedulesJobType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JobDefDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.scheduler.job.LoadDatabaseSchedulesJob" />
  </xs:complexType>
  <xs:complexType name="RecoverAdaptersJobType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JobDefDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.scheduler.job.RecoverAdaptersJob" />
  </xs:complexType>
  <xs:complexType name="SendMessageJobType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="JobDefDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="SendMessageJobCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.scheduler.job.SendMessageJob" />
  </xs:complexType>
  <xs:attributeGroup name="SendMessageJobDeclaredAttributeGroup">
    <xs:attribute name="javaListener" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>JavaListener to send the message to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="message" type="xs:string">
      <xs:annotation>
        <xs:documentation>message to be sent into the pipeline</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SendMessageJobCumulativeAttributeGroup">
    <xs:attributeGroup ref="SendMessageJobDeclaredAttributeGroup" />
    <xs:attributeGroup ref="JobDefCumulativeAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="SapSystemElementGroup">
    <xs:choice>
      <xs:element name="SapSystem">
        <xs:complexType>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="sapSystem" />
          <xs:attribute name="className" type="xs:string" default="org.frankframework.extensions.sap.SapSystem" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="SapSystemElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="SapSystemElementGroupBase">
    <xs:choice />
  </xs:group>
  <xs:group name="DestinationElementGroup">
    <xs:choice>
      <xs:element name="Destination">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="SenderElementGroup" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="destination" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="DestinationElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="DestinationElementGroupBase">
    <xs:choice>
      <xs:element name="SenderMonitorAdapterDestination">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="SenderMonitorAdapterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="destination" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="SenderMonitorAdapterType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="SenderMonitorAdapterDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="MonitorDestinationBaseDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.monitoring.SenderMonitorAdapter" />
  </xs:complexType>
  <xs:group name="SenderMonitorAdapterDeclaredChildGroup">
    <xs:sequence>
      <xs:group ref="SenderElementGroup" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="MonitorDestinationBaseDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of the object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:group name="TriggerElementGroup">
    <xs:choice>
      <xs:element name="Trigger">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element name="Adapterfilter" type="AdapterfilterType" />
              <xs:element name="Event" minOccurs="0" maxOccurs="unbounded" type="xs:string" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="trigger" />
          <xs:attribute name="className" type="xs:string" default="org.frankframework.monitoring.Trigger" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="TriggerElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="TriggerElementGroupBase">
    <xs:choice>
      <xs:element name="AlarmTrigger">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="AlarmType">
              <xs:attribute name="elementRole" type="xs:string" fixed="trigger" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ClearingTrigger">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ClearingType">
              <xs:attribute name="elementRole" type="xs:string" fixed="trigger" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="AlarmType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="TriggerDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="TriggerDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.monitoring.Alarm" />
  </xs:complexType>
  <xs:complexType name="TriggerType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="TriggerDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="TriggerDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.monitoring.Trigger" />
  </xs:complexType>
  <xs:group name="TriggerDeclaredChildGroup">
    <xs:sequence>
      <xs:element name="Event" minOccurs="0" maxOccurs="unbounded" type="xs:string" />
      <xs:element name="Adapterfilter" minOccurs="0" maxOccurs="unbounded" type="AdapterfilterType" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="TriggerDeclaredAttributeGroup">
    <xs:attribute name="eventCode" type="xs:string" />
    <xs:attribute name="threshold" type="frankInt" />
    <xs:attribute name="period" type="frankInt" />
    <xs:attribute name="severity">
      <xs:simpleType>
        <xs:union memberTypes="SeverityAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="sourceFiltering">
      <xs:simpleType>
        <xs:union memberTypes="SourceFilteringAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="triggerType">
      <xs:simpleType>
        <xs:union memberTypes="TriggerTypeAttributeValuesType variableRef" />
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="ClearingType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="TriggerDeclaredChildGroup" />
      </xs:choice>
    </xs:sequence>
    <xs:attributeGroup ref="TriggerDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.monitoring.Clearing" />
  </xs:complexType>
  <xs:group name="SharedResourceElementGroup">
    <xs:choice>
      <xs:element name="SharedResource">
        <xs:complexType>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="sharedResource" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="SharedResourceElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="SharedResourceElementGroupBase">
    <xs:choice>
      <xs:element name="HttpSessionSharedResource">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="HttpSessionType">
              <xs:attribute name="elementRole" type="xs:string" fixed="sharedResource" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="HttpSessionType">
    <xs:attributeGroup ref="HttpSessionCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.http.HttpSession" />
  </xs:complexType>
  <xs:attributeGroup name="HttpSessionDeclaredAttributeGroup">
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The functional name of the object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="HttpSessionCumulativeAttributeGroup">
    <xs:attributeGroup ref="HttpSessionDeclaredAttributeGroup" />
    <xs:attribute name="timeout" type="frankInt">
      <xs:annotation>
        <xs:documentation>Timeout in ms of obtaining a connection/result. Default: 10000</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="maxConnections" />
    <xs:attribute ref="maxExecuteRetries" />
    <xs:attribute name="authAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>Authentication alias used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="authDomain" />
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>Password used for authentication to the host</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute ref="tokenEndpoint" />
    <xs:attribute ref="tokenExpiry" />
    <xs:attribute ref="clientAlias" />
    <xs:attribute ref="clientId" />
    <xs:attribute ref="clientSecret" />
    <xs:attribute ref="scope" />
    <xs:attribute ref="authenticatedTokenRequest" />
    <xs:attribute ref="proxyHost" />
    <xs:attribute ref="proxyPort" />
    <xs:attribute ref="proxyAuthAlias" />
    <xs:attribute ref="proxyUsername" />
    <xs:attribute ref="proxyPassword" />
    <xs:attribute ref="proxyRealm" />
    <xs:attribute ref="prefillProxyAuthCache" />
    <xs:attribute ref="disableCookies" />
    <xs:attribute ref="keystore" />
    <xs:attribute ref="keystoreType" />
    <xs:attribute ref="keystoreAuthAlias" />
    <xs:attribute ref="keystorePassword" />
    <xs:attribute ref="keyManagerAlgorithm" />
    <xs:attribute ref="keystoreAlias" />
    <xs:attribute ref="keystoreAliasAuthAlias" />
    <xs:attribute ref="keystoreAliasPassword" />
    <xs:attribute ref="truststore" />
    <xs:attribute ref="truststoreAuthAlias" />
    <xs:attribute ref="truststorePassword" />
    <xs:attribute ref="truststoreType" />
    <xs:attribute ref="trustManagerAlgorithm" />
    <xs:attribute ref="verifyHostname" />
    <xs:attribute ref="allowSelfSignedCertificates" />
    <xs:attribute ref="ignoreCertificateExpiredException" />
    <xs:attribute ref="followRedirects" />
    <xs:attribute ref="ignoreRedirects" />
    <xs:attribute ref="staleChecking" />
    <xs:attribute ref="staleTimeout" />
    <xs:attribute ref="connectionTimeToLive" />
    <xs:attribute ref="connectionIdleTimeout" />
    <xs:attribute ref="protocol" />
    <xs:attribute ref="supportedCipherSuites" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:simpleType name="ParameterModeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[iI][nN][pP][uU][tT]" />
      <xs:pattern value="[oO][uU][tT][pP][uU][tT]" />
      <xs:pattern value="[iI][nN][oO][uU][tT]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ParameterTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[sS][tT][rR][iI][nN][gG]" />
      <xs:pattern value="[xX][mM][lL]" />
      <xs:pattern value="[nN][oO][dD][eE]" />
      <xs:pattern value="[dD][oO][mM][dD][oO][cC]" />
      <xs:pattern value="[dD][aA][tT][eE]" />
      <xs:pattern value="[tT][iI][mM][eE]" />
      <xs:pattern value="[dD][aA][tT][eE][tT][iI][mM][eE]" />
      <xs:pattern value="[tT][iI][mM][eE][sS][tT][aA][mM][pP]" />
      <xs:pattern value="[xX][mM][lL][dD][aA][tT][eE][tT][iI][mM][eE]" />
      <xs:pattern value="[nN][uU][mM][bB][eE][rR]" />
      <xs:pattern value="[iI][nN][tT][eE][gG][eE][rR]" />
      <xs:pattern value="[bB][oO][oO][lL][eE][aA][nN]" />
      <xs:pattern value="[iI][nN][pP][uU][tT][sS][tT][rR][eE][aA][mM]" />
      <xs:pattern value="[bB][yY][tT][eE][sS]" />
      <xs:pattern value="[bB][iI][nN][aA][rR][yY]" />
      <xs:pattern value="[cC][hH][aA][rR][aA][cC][tT][eE][rR]" />
      <xs:pattern value="[lL][iI][sS][tT]" />
      <xs:pattern value="[mM][aA][pP]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DateFormatTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[dD][aA][tT][eE]" />
      <xs:pattern value="[dD][aA][tT][eE][tT][iI][mM][eE]" />
      <xs:pattern value="[tT][iI][mM][eE][sS][tT][aA][mM][pP]" />
      <xs:pattern value="[tT][iI][mM][eE]" />
      <xs:pattern value="[xX][mM][lL][dD][aA][tT][eE][tT][iI][mM][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="OutputTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[tT][eE][xX][tT]" />
      <xs:pattern value="[xX][mM][lL]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FileSystemActionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[lL][iI][sS][tT]" />
      <xs:pattern value="[iI][nN][fF][oO]" />
      <xs:pattern value="[rR][eE][aA][dD]" />
      <xs:pattern value="[dD][oO][wW][nN][lL][oO][aA][dD]" />
      <xs:pattern value="[rR][eE][aA][dD][dD][eE][lL][eE][tT][eE]" />
      <xs:pattern value="[mM][oO][vV][eE]" />
      <xs:pattern value="[cC][oO][pP][yY]" />
      <xs:pattern value="[dD][eE][lL][eE][tT][eE]" />
      <xs:pattern value="[mM][kK][dD][iI][rR]" />
      <xs:pattern value="[rR][mM][dD][iI][rR]" />
      <xs:pattern value="[wW][rR][iI][tT][eE]" />
      <xs:pattern value="[uU][pP][lL][oO][aA][dD]" />
      <xs:pattern value="[aA][pP][pP][eE][nN][dD]" />
      <xs:pattern value="[cC][rR][eE][aA][tT][eE]" />
      <xs:pattern value="[rR][eE][nN][aA][mM][eE]" />
      <xs:pattern value="[fF][oO][rR][wW][aA][rR][dD]" />
      <xs:pattern value="[lL][iI][sS][tT][aA][tT][tT][aA][cC][hH][mM][eE][nN][tT][sS]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DocumentFormatAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[xX][mM][lL]" />
      <xs:pattern value="[jJ][sS][oO][nN]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TypeFilterAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[fF][iI][lL][eE][sS][__][oO][nN][lL][yY]" />
      <xs:pattern value="[fF][oO][lL][dD][eE][rR][sS][__][oO][nN][lL][yY]" />
      <xs:pattern value="[fF][iI][lL][eE][sS][__][aA][nN][dD][__][fF][oO][lL][dD][eE][rR][sS]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="LinkMethodAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[mM][eE][sS][sS][aA][gG][eE][iI][dD]" />
      <xs:pattern value="[cC][oO][rR][rR][eE][lL][aA][tT][iI][oO][nN][iI][dD]" />
      <xs:pattern value="[cC][oO][rR][rR][eE][lL][aA][tT][iI][oO][nN][iI][dD][__][fF][rR][oO][mM][__][mM][eE][sS][sS][aA][gG][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DeliveryModeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[nN][oO][tT][__][sS][eE][tT]" />
      <xs:pattern value="[pP][eE][rR][sS][iI][sS][tT][eE][nN][tT]" />
      <xs:pattern value="[nN][oO][nN][__][pP][eE][rR][sS][iI][sS][tT][eE][nN][tT]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MessageClassAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[aA][uU][tT][oO]" />
      <xs:pattern value="[tT][eE][xX][tT]" />
      <xs:pattern value="[bB][yY][tT][eE][sS]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DestinationTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[qQ][uU][eE][uU][eE]" />
      <xs:pattern value="[tT][oO][pP][iI][cC]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AcknowledgeModeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[nN][oO][nN][eE]" />
      <xs:pattern value="[aA][uU][tT][oO]" />
      <xs:pattern value="[cC][lL][iI][eE][nN][tT]" />
      <xs:pattern value="[dD][uU][pP][sS]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SubscriberTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[dD][uU][rR][aA][bB][lL][eE]" />
      <xs:pattern value="[tT][rR][aA][nN][sS][iI][eE][nN][tT]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CmisActionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[cC][rR][eE][aA][tT][eE]" />
      <xs:pattern value="[dD][eE][lL][eE][tT][eE]" />
      <xs:pattern value="[gG][eE][tT]" />
      <xs:pattern value="[fF][iI][nN][dD]" />
      <xs:pattern value="[uU][pP][dD][aA][tT][eE]" />
      <xs:pattern value="[fF][eE][tT][cC][hH]" />
      <xs:pattern value="[dD][yY][nN][aA][mM][iI][cC]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="BindingTypesAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[aA][tT][oO][mM][pP][uU][bB]" />
      <xs:pattern value="[wW][eE][bB][sS][eE][rR][vV][iI][cC][eE][sS]" />
      <xs:pattern value="[bB][rR][oO][wW][sS][eE][rR]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="KeystoreTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[pP][kK][cC][sS][11][22]" />
      <xs:pattern value="[pP][eE][mM]" />
      <xs:pattern value="[jJ][kK][sS]" />
      <xs:pattern value="[jJ][cC][eE][kK][sS]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="QueryTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[sS][eE][lL][eE][cC][tT]" />
      <xs:pattern value="[uU][pP][dD][aA][tT][eE][bB][lL][oO][bB]" />
      <xs:pattern value="[uU][pP][dD][aA][tT][eE][cC][lL][oO][bB]" />
      <xs:pattern value="[pP][aA][cC][kK][aA][gG][eE]" />
      <xs:pattern value="[oO][tT][hH][eE][rR]" />
      <xs:pattern value="[iI][nN][sS][eE][rR][tT]" />
      <xs:pattern value="[dD][eE][lL][eE][tT][eE]" />
      <xs:pattern value="[uU][pP][dD][aA][tT][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DirectionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[eE][nN][cC][oO][dD][eE]" />
      <xs:pattern value="[dD][eE][cC][oO][dD][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MessageProtocolAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:pattern value="[fF][fF]" />
      <xs:pattern value="[rR][rR]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ScopeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[jJ][vV][mM]" />
      <xs:pattern value="[dD][lL][lL]" />
      <xs:pattern value="[aA][dD][aA][pP][tT][eE][rR]" />
      <xs:pattern value="[lL][iI][sS][tT][eE][nN][eE][rR]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FtpTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[fF][tT][pP]" />
      <xs:pattern value="[fF][tT][pP][sS][iI]" />
      <xs:pattern value="[fF][tT][pP][sS][xX][((][tT][lL][sS][))]" />
      <xs:pattern value="[fF][tT][pP][sS][xX][((][sS][sS][lL][))]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FileTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[aA][sS][cC][iI][iI]" />
      <xs:pattern value="[bB][iI][nN][aA][rR][yY]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TransportTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[dD][iI][rR][eE][cC][tT]" />
      <xs:pattern value="[hH][tT][tT][pP]" />
      <xs:pattern value="[sS][oO][cC][kK][sS]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ProtAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[cC]" />
      <xs:pattern value="[sS]" />
      <xs:pattern value="[eE]" />
      <xs:pattern value="[pP]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="PostTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[rR][aA][wW]" />
      <xs:pattern value="[bB][iI][nN][aA][rR][yY]" />
      <xs:pattern value="[uU][rR][lL][eE][nN][cC][oO][dD][eE][dD]" />
      <xs:pattern value="[fF][oO][rR][mM][dD][aA][tT][aA]" />
      <xs:pattern value="[mM][tT][oO][mM]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="HttpMethodAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:pattern value="[gG][eE][tT]" />
      <xs:pattern value="[pP][oO][sS][tT]" />
      <xs:pattern value="[pP][uU][tT]" />
      <xs:pattern value="[pP][aA][tT][cC][hH]" />
      <xs:pattern value="[dD][eE][lL][eE][tT][eE]" />
      <xs:pattern value="[hH][eE][aA][dD]" />
      <xs:pattern value="[rR][eE][pP][oO][rR][tT]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ActionAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:pattern value="[dD][iI][rR][eE][cC][tT][oO][rR][yY]" />
      <xs:pattern value="[rR][eE][sS][pP][oO][nN][sS][eE]" />
      <xs:pattern value="[aA][uU][tT][hH][eE][nN][tT][iI][cC][aA][tT][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="JavaScriptEnginesAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[jJ][22][vV][88]" />
      <xs:pattern value="[gG][rR][aA][aA][lL][jJ][sS]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="OperationAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[rR][eE][aA][dD]" />
      <xs:pattern value="[cC][rR][eE][aA][tT][eE]" />
      <xs:pattern value="[uU][pP][dD][aA][tT][eE]" />
      <xs:pattern value="[dD][eE][lL][eE][tT][eE]" />
      <xs:pattern value="[sS][eE][aA][rR][cC][hH]" />
      <xs:pattern value="[dD][eE][eE][pP][sS][eE][aA][rR][cC][hH]" />
      <xs:pattern value="[gG][eE][tT][sS][uU][bB][cC][oO][nN][tT][eE][xX][tT][sS]" />
      <xs:pattern value="[gG][eE][tT][tT][rR][eE][eE]" />
      <xs:pattern value="[cC][hH][aA][lL][lL][eE][nN][gG][eE]" />
      <xs:pattern value="[cC][hH][aA][nN][gG][eE][uU][nN][iI][cC][oO][dD][eE][pP][wW][dD]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ManipulationAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[eE][nN][tT][rR][yY]" />
      <xs:pattern value="[aA][tT][tT][rR][iI][bB][uU][tT][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SortOrderAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[nN][oO][nN][eE]" />
      <xs:pattern value="[aA][sS][cC]" />
      <xs:pattern value="[dD][eE][sS][cC]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="HideMethodAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[aA][lL][lL]" />
      <xs:pattern value="[fF][iI][rR][sS][tT][hH][aA][lL][fF]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MongoActionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[iI][nN][sS][eE][rR][tT][oO][nN][eE]" />
      <xs:pattern value="[iI][nN][sS][eE][rR][tT][mM][aA][nN][yY]" />
      <xs:pattern value="[fF][iI][nN][dD][oO][nN][eE]" />
      <xs:pattern value="[fF][iI][nN][dD][mM][aA][nN][yY]" />
      <xs:pattern value="[uU][pP][dD][aA][tT][eE][oO][nN][eE]" />
      <xs:pattern value="[uU][pP][dD][aA][tT][eE][mM][aA][nN][yY]" />
      <xs:pattern value="[dD][eE][lL][eE][tT][eE][oO][nN][eE]" />
      <xs:pattern value="[dD][eE][lL][eE][tT][eE][mM][aA][nN][yY]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="HashAlgorithmAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[mM][dD][55]" />
      <xs:pattern value="[sS][hH][aA][11]" />
      <xs:pattern value="[sS][hH][aA][22][55][66]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ActionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[dD][uU]" />
      <xs:pattern value="[dD][iI][rR]" />
      <xs:pattern value="[dD][eE][lL][eE][tT][eE]" />
      <xs:pattern value="[uU][pP][lL][oO][aA][dD]" />
      <xs:pattern value="[mM][kK][dD][iI][rR]" />
      <xs:pattern value="[rR][mM][dD][iI][rR]" />
      <xs:pattern value="[rR][eE][nN][aA][mM][eE]" />
      <xs:pattern value="[mM][tT][iI][mM][eE]" />
      <xs:pattern value="[dD][oO][wW][nN][lL][oO][aA][dD]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Samba2AuthTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[nN][tT][lL][mM]" />
      <xs:pattern value="[sS][pP][nN][eE][gG][oO]" />
      <xs:pattern value="[aA][nN][oO][nN][yY][mM][oO][uU][sS]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TransportTypeAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:pattern value="[hH][tT][tT][pP]" />
      <xs:pattern value="[sS][oO][cC][kK][sS][44]" />
      <xs:pattern value="[sS][oO][cC][kK][sS][55]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FileOptionTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[cC][rR][eE][aA][tT][eE]" />
      <xs:pattern value="[aA][pP][pP][eE][nN][dD]" />
      <xs:pattern value="[rR][eE][pP][lL][aA][cC][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CarriageFlagTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[yY][eE][sS]" />
      <xs:pattern value="[vV][lL][rR]" />
      <xs:pattern value="[vV][lL][rR][22]" />
      <xs:pattern value="[mM][pP][aA][cC][kK]" />
      <xs:pattern value="[xX][pP][aA][cC][kK]" />
      <xs:pattern value="[nN][oO]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CodeTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[eE][bB][cC][dD][iI][cC]" />
      <xs:pattern value="[aA][sS][cC][iI][iI]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CompressTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[yY][eE][sS]" />
      <xs:pattern value="[cC][oO][mM][pP][aA][cC][tT]" />
      <xs:pattern value="[lL][zZ][lL][aA][rR][gG][eE]" />
      <xs:pattern value="[lL][zZ][mM][eE][dD][iI][uU][mM]" />
      <xs:pattern value="[lL][zZ][sS][mM][aA][lL][lL]" />
      <xs:pattern value="[rR][lL][eE]" />
      <xs:pattern value="[nN][oO]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="HttpMethodAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[gG][eE][tT]" />
      <xs:pattern value="[pP][uU][tT]" />
      <xs:pattern value="[pP][oO][sS][tT]" />
      <xs:pattern value="[pP][aA][tT][cC][hH]" />
      <xs:pattern value="[dD][eE][lL][eE][tT][eE]" />
      <xs:pattern value="[hH][eE][aA][dD]" />
      <xs:pattern value="[oO][pP][tT][iI][oO][nN][sS]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MediaTypesAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:pattern value="[aA][nN][yY]" />
      <xs:pattern value="[dD][eE][tT][eE][cC][tT]" />
      <xs:pattern value="[tT][eE][xX][tT]" />
      <xs:pattern value="[xX][mM][lL]" />
      <xs:pattern value="[jJ][sS][oO][nN]" />
      <xs:pattern value="[pP][dD][fF]" />
      <xs:pattern value="[oO][cC][tT][eE][tT]" />
      <xs:pattern value="[mM][uU][lL][tT][iI][pP][aA][rR][tT][__][rR][eE][lL][aA][tT][eE][dD]" />
      <xs:pattern value="[mM][uU][lL][tT][iI][pP][aA][rR][tT][__][fF][oO][rR][mM][dD][aA][tT][aA]" />
      <xs:pattern value="[mM][uU][lL][tT][iI][pP][aA][rR][tT]" />
      <xs:pattern value="[tT][xX][tT]" />
      <xs:pattern value="[cC][sS][sS]" />
      <xs:pattern value="[cC][sS][vV]" />
      <xs:pattern value="[mM][jJ][sS]" />
      <xs:pattern value="[hH][tT][mM][lL]" />
      <xs:pattern value="[jJ][aA][rR]" />
      <xs:pattern value="[dD][oO][cC]" />
      <xs:pattern value="[eE][pP][uU][bB]" />
      <xs:pattern value="[vV][sS][dD]" />
      <xs:pattern value="[aA][zZ][wW]" />
      <xs:pattern value="[pP][pP][tT]" />
      <xs:pattern value="[xX][lL][sS]" />
      <xs:pattern value="[rR][aA][rR]" />
      <xs:pattern value="[rR][tT][fF]" />
      <xs:pattern value="[iI][cC][oO]" />
      <xs:pattern value="[iI][cC][sS]" />
      <xs:pattern value="[bB][mM][pP]" />
      <xs:pattern value="[gG][iI][fF]" />
      <xs:pattern value="[pP][nN][gG]" />
      <xs:pattern value="[sS][vV][gG]" />
      <xs:pattern value="[tT][iI][fF][fF]" />
      <xs:pattern value="[jJ][pP][gG]" />
      <xs:pattern value="[oO][tT][fF]" />
      <xs:pattern value="[tT][tT][fF]" />
      <xs:pattern value="[wW][oO][fF][fF]" />
      <xs:pattern value="[wW][oO][fF][fF][22]" />
      <xs:pattern value="[mM][pP][eE][gG]" />
      <xs:pattern value="[mM][pP][33]" />
      <xs:pattern value="[mM][pP][44]" />
      <xs:pattern value="[mM][iI][dD][iI]" />
      <xs:pattern value="[aA][aA][cC]" />
      <xs:pattern value="[aA][vV][iI]" />
      <xs:pattern value="[tT][sS]" />
      <xs:pattern value="[wW][aA][vV]" />
      <xs:pattern value="[wW][eE][bB][aA]" />
      <xs:pattern value="[wW][eE][bB][mM]" />
      <xs:pattern value="[wW][eE][bB][pP]" />
      <xs:pattern value="[gG][zZ]" />
      <xs:pattern value="[tT][aA][rR]" />
      <xs:pattern value="[bB][zZ]" />
      <xs:pattern value="[bB][zZ][22]" />
      <xs:pattern value="[zZ][iI][pP]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AuthenticationMethodsAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[nN][oO][nN][eE]" />
      <xs:pattern value="[cC][oO][oO][kK][iI][eE]" />
      <xs:pattern value="[hH][eE][aA][dD][eE][rR]" />
      <xs:pattern value="[aA][uU][tT][hH][rR][oO][lL][eE]" />
      <xs:pattern value="[jJ][wW][tT]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CacheModeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[cC][aA][cC][hH][eE][__][nN][oO][nN][eE]" />
      <xs:pattern value="[cC][aA][cC][hH][eE][__][cC][oO][nN][nN][eE][cC][tT][iI][oO][nN]" />
      <xs:pattern value="[cC][aA][cC][hH][eE][__][sS][eE][sS][sS][iI][oO][nN]" />
      <xs:pattern value="[cC][aA][cC][hH][eE][__][cC][oO][nN][sS][uU][mM][eE][rR]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MessageProtocolAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[fF][fF]" />
      <xs:pattern value="[rR][rR]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MessageFieldTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[sS][tT][rR][iI][nN][gG]" />
      <xs:pattern value="[cC][lL][oO][bB]" />
      <xs:pattern value="[bB][lL][oO][bB]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MediaTypesAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[xX][mM][lL]" />
      <xs:pattern value="[jJ][sS][oO][nN]" />
      <xs:pattern value="[tT][eE][xX][tT]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="OnErrorAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[cC][oO][nN][tT][iI][nN][uU][eE]" />
      <xs:pattern value="[rR][eE][cC][oO][vV][eE][rR]" />
      <xs:pattern value="[cC][lL][oO][sS][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CheckForDuplicatesMethodAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[mM][eE][sS][sS][aA][gG][eE][iI][dD]" />
      <xs:pattern value="[cC][oO][rR][rR][eE][lL][aA][tT][iI][oO][nN][iI][dD]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TransactionAttributeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[rR][eE][qQ][uU][iI][rR][eE][dD]" />
      <xs:pattern value="[sS][uU][pP][pP][oO][rR][tT][sS]" />
      <xs:pattern value="[mM][aA][nN][dD][aA][tT][oO][rR][yY]" />
      <xs:pattern value="[rR][eE][qQ][uU][iI][rR][eE][sS][nN][eE][wW]" />
      <xs:pattern value="[nN][oO][tT][sS][uU][pP][pP][oO][rR][tT][eE][dD]" />
      <xs:pattern value="[nN][eE][vV][eE][rR]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="LockTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[tT]" />
      <xs:pattern value="[pP]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SoapVersionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[11][..][11]" />
      <xs:pattern value="[11][..][22]" />
      <xs:pattern value="[nN][oO][nN][eE]" />
      <xs:pattern value="[aA][uU][tT][oO]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DirectionAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:pattern value="[iI][nN][pP][uU][tT]" />
      <xs:pattern value="[oO][uU][tT][pP][uU][tT]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ModeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[iI][22][tT]" />
      <xs:pattern value="[rR][eE][gG]" />
      <xs:pattern value="[bB][iI][sS]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DirectionAttributeValuesType_3">
    <xs:restriction base="xs:string">
      <xs:pattern value="[sS][eE][nN][dD]" />
      <xs:pattern value="[rR][eE][cC][eE][iI][vV][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DirectionAttributeValuesType_4">
    <xs:restriction base="xs:string">
      <xs:pattern value="[wW][rR][aA][pP]" />
      <xs:pattern value="[uU][nN][wW][rR][aA][pP]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ExitStateAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[sS][uU][cC][cC][eE][sS][sS]" />
      <xs:pattern value="[eE][rR][rR][oO][rR]" />
      <xs:pattern value="[rR][eE][jJ][eE][cC][tT][eE][dD]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DirectionAttributeValuesType_5">
    <xs:restriction base="xs:string">
      <xs:pattern value="[xX][mM][lL][22][aA][dD][iI][oO][sS]" />
      <xs:pattern value="[aA][dD][iI][oO][sS][22][xX][mM][lL]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="LinkMethodAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:pattern value="[mM][eE][sS][sS][aA][gG][eE][iI][dD]" />
      <xs:pattern value="[cC][oO][rR][rR][eE][lL][aA][tT][iI][oO][nN][iI][dD]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ChecksumTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[mM][dD][55]" />
      <xs:pattern value="[sS][hH][aA]" />
      <xs:pattern value="[sS][hH][aA][22][55][66]" />
      <xs:pattern value="[sS][hH][aA][55][11][22]" />
      <xs:pattern value="[cC][rR][cC][33][22]" />
      <xs:pattern value="[aA][dD][lL][eE][rR][33][22]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FileFormatAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[gG][zZ]" />
      <xs:pattern value="[zZ][iI][pP]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="HeaderCaseAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[lL][oO][wW][eE][rR][cC][aA][sS][eE]" />
      <xs:pattern value="[uU][pP][pP][eE][rR][cC][aA][sS][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DirectionAttributeValuesType_7">
    <xs:restriction base="xs:string">
      <xs:pattern value="[eE][nN][cC][oO][dD][eE]" />
      <xs:pattern value="[dD][eE][cC][oO][dD][eE]" />
      <xs:pattern value="[cC][dD][aA][tT][aA][22][tT][eE][xX][tT]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="EtagActionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[gG][eE][nN][eE][rR][aA][tT][eE]" />
      <xs:pattern value="[gG][eE][tT]" />
      <xs:pattern value="[sS][eE][tT]" />
      <xs:pattern value="[dD][eE][lL][eE][tT][eE]" />
      <xs:pattern value="[fF][lL][uU][sS][hH]" />
      <xs:pattern value="[cC][lL][eE][aA][rR]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="HashAlgorithmAttributeValuesType_2">
    <xs:restriction base="xs:string">
      <xs:pattern value="[hH][mM][aA][cC][mM][dD][55]" />
      <xs:pattern value="[hH][mM][aA][cC][sS][hH][aA][11]" />
      <xs:pattern value="[hH][mM][aA][cC][sS][hH][aA][22][55][66]" />
      <xs:pattern value="[hH][mM][aA][cC][sS][hH][aA][33][88][44]" />
      <xs:pattern value="[hH][mM][aA][cC][sS][hH][aA][55][11][22]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="HashEncodingAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[bB][aA][sS][eE][66][44]" />
      <xs:pattern value="[hH][eE][xX]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DirectionAttributeValuesType_8">
    <xs:restriction base="xs:string">
      <xs:pattern value="[jJ][sS][oO][nN][22][xX][mM][lL]" />
      <xs:pattern value="[xX][mM][lL][22][jJ][sS][oO][nN]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="LarvaLogLevelAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[dD][eE][bB][uU][gG]" />
      <xs:pattern value="[pP][iI][pP][eE][lL][iI][nN][eE][__][mM][eE][sS][sS][aA][gG][eE][sS][__][pP][rR][eE][pP][aA][rR][eE][dD][__][fF][oO][rR][__][dD][iI][fF][fF]" />
      <xs:pattern value="[pP][iI][pP][eE][lL][iI][nN][eE][__][mM][eE][sS][sS][aA][gG][eE][sS]" />
      <xs:pattern value="[wW][rR][oO][nN][gG][__][pP][iI][pP][eE][lL][iI][nN][eE][__][mM][eE][sS][sS][aA][gG][eE][sS][__][pP][rR][eE][pP][aA][rR][eE][dD][__][fF][oO][rR][__][dD][iI][fF][fF]" />
      <xs:pattern value="[wW][rR][oO][nN][gG][__][pP][iI][pP][eE][lL][iI][nN][eE][__][mM][eE][sS][sS][aA][gG][eE][sS]" />
      <xs:pattern value="[sS][tT][eE][pP][__][pP][aA][sS][sS][eE][dD][__][fF][aA][iI][lL][eE][dD]" />
      <xs:pattern value="[sS][cC][eE][nN][aA][rR][iI][oO][__][pP][aA][sS][sS][eE][dD][__][fF][aA][iI][lL][eE][dD]" />
      <xs:pattern value="[sS][cC][eE][nN][aA][rR][iI][oO][__][fF][aA][iI][lL][eE][dD]" />
      <xs:pattern value="[tT][oO][tT][aA][lL][sS]" />
      <xs:pattern value="[eE][rR][rR][oO][rR]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DirectionAttributeValuesType_6">
    <xs:restriction base="xs:string">
      <xs:pattern value="[oO][bB][fF][uU][sS][cC][aA][tT][eE]" />
      <xs:pattern value="[dD][eE][oO][bB][fF][uU][sS][cC][aA][tT][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ActionAttributeValuesType_4">
    <xs:restriction base="xs:string">
      <xs:pattern value="[eE][nN][cC][rR][yY][pP][tT]" />
      <xs:pattern value="[sS][iI][gG][nN]" />
      <xs:pattern value="[dD][eE][cC][rR][yY][pP][tT]" />
      <xs:pattern value="[vV][eE][rR][iI][fF][yY]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DocumentActionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[cC][oO][nN][vV][eE][rR][tT]" />
      <xs:pattern value="[cC][oO][mM][bB][iI][nN][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MessageProtocolAttributeValuesType_3">
    <xs:restriction base="xs:string">
      <xs:pattern value="[rR][rR]" />
      <xs:pattern value="[fF][fF]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ActionAttributeValuesType_5">
    <xs:restriction base="xs:string">
      <xs:pattern value="[sS][iI][gG][nN]" />
      <xs:pattern value="[vV][eE][rR][iI][fF][yY]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[aA][lL][pP][hH][aA][nN][uU][mM][eE][rR][iI][cC]" />
      <xs:pattern value="[nN][uU][mM][eE][rR][iI][cC]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ActionAttributeValuesType_3">
    <xs:restriction base="xs:string">
      <xs:pattern value="[oO][pP][eE][nN]" />
      <xs:pattern value="[wW][rR][iI][tT][eE]" />
      <xs:pattern value="[lL][aA][sS][tT]" />
      <xs:pattern value="[cC][lL][oO][sS][eE]" />
      <xs:pattern value="[sS][tT][rR][eE][aA][mM]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MessageLogLevelAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[oO][fF][fF]" />
      <xs:pattern value="[iI][nN][fF][oO]" />
      <xs:pattern value="[bB][aA][sS][iI][cC]" />
      <xs:pattern value="[dD][eE][bB][uU][gG]" />
      <xs:pattern value="[tT][eE][rR][sS][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AvailableActionAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[sS][tT][oO][pP][aA][dD][aA][pP][tT][eE][rR]" />
      <xs:pattern value="[sS][tT][aA][rR][tT][aA][dD][aA][pP][tT][eE][rR]" />
      <xs:pattern value="[sS][tT][oO][pP][rR][eE][cC][eE][iI][vV][eE][rR]" />
      <xs:pattern value="[sS][tT][aA][rR][tT][rR][eE][cC][eE][iI][vV][eE][rR]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SeverityAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[hH][aA][rR][mM][lL][eE][sS][sS]" />
      <xs:pattern value="[wW][aA][rR][nN][iI][nN][gG]" />
      <xs:pattern value="[cC][rR][iI][tT][iI][cC][aA][lL]" />
      <xs:pattern value="[fF][aA][tT][aA][lL]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SourceFilteringAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[nN][oO][nN][eE]" />
      <xs:pattern value="[aA][dD][aA][pP][tT][eE][rR]" />
      <xs:pattern value="[sS][oO][uU][rR][cC][eE]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TriggerTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[aA][lL][aA][rR][mM]" />
      <xs:pattern value="[cC][lL][eE][aA][rR][iI][nN][gG]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="EventTypeAttributeValuesType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[tT][eE][cC][hH][nN][iI][cC][aA][lL]" />
      <xs:pattern value="[fF][uU][nN][cC][tT][iI][oO][nN][aA][lL]" />
      <xs:pattern value="[hH][eE][aA][rR][tT][bB][eE][aA][tT]" />
      <xs:pattern value="[cC][lL][eE][aA][rR][iI][nN][gG]" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attribute name="value" type="xs:string">
    <xs:annotation>
      <xs:documentation>The value of the parameter, or the base for transformation using xpathExpression or stylesheet, or formatting.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="contextKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>key of message context variable to use as source, instead of the message found from input message or sessionKey itself</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="sessionKeyXPath" type="xs:string">
    <xs:annotation>
      <xs:documentation>Instead of a fixed &lt;code&gt;sessionKey&lt;/code&gt; it's also possible to use a XPath expression applied to the input message to extract the name of the session-variable.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="defaultValue" type="xs:string">
    <xs:annotation>
      <xs:documentation>If the result of sessionKey, xpathExpression and/or stylesheet returns null or an empty string, this value is returned</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="defaultValueMethods" type="xs:string">
    <xs:annotation>
      <xs:documentation>Comma separated list of methods (&lt;code&gt;defaultValue&lt;/code&gt;, &lt;code&gt;sessionKey&lt;/code&gt;, &lt;code&gt;pattern&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;input&lt;/code&gt;) to use as default value. Used in the order they appear until a non-null value is found. Default: &lt;code&gt;defaultValue&lt;/code&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="pattern" type="xs:string">
    <xs:annotation>
      <xs:documentation>Value of parameter is determined using substitution and formatting, following MessageFormat syntax with named parameters. The expression can contain references
 to &lt;code&gt;session-variables&lt;/code&gt; or other &lt;code&gt;parameters&lt;/code&gt; using the {name-of-parameter} and is formatted using java.text.MessageFormat.
 &lt;br/&gt;&lt;b&gt;NB: When referencing other &lt;code&gt;parameters&lt;/code&gt; these MUST be defined before the parameter using pattern substitution.&lt;/b&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 If for instance &lt;code&gt;fname&lt;/code&gt; is a parameter or session-variable that resolves to Eric, then the pattern
 'Hi {fname}, how do you do?' resolves to 'Hi Eric, do you do?'.&lt;br/&gt;
 The following predefined reference can be used in the expression too:&lt;ul&gt;
 &lt;li&gt;{now}: the current system time&lt;/li&gt;
 &lt;li&gt;{uid}: an unique identifier, based on the IP address and java.rmi.server.UID&lt;/li&gt;
 &lt;li&gt;{uuid}: an unique identifier, based on the IP address and java.util.UUID&lt;/li&gt;
 &lt;li&gt;{hostname}: the name of the machine the application runs on&lt;/li&gt;
 &lt;li&gt;{username}: username from the credentials found using authAlias, or the username attribute&lt;/li&gt;
 &lt;li&gt;{password}: password from the credentials found using authAlias, or the password attribute&lt;/li&gt;
 &lt;li&gt;{fixeddate}: fake date, for testing only&lt;/li&gt;
 &lt;li&gt;{fixeduid}: fake uid, for testing only&lt;/li&gt;
 &lt;li&gt;{fixedhostname}: fake hostname, for testing only&lt;/li&gt;
 &lt;/ul&gt;
 A guid can be generated using {hostname}_{uid}, see also
 &lt;a href="http://java.sun.com/j2se/1.4.2/docs/api/java/rmi/server/uid.html"&gt;http://java.sun.com/j2se/1.4.2/docs/api/java/rmi/server/uid.html&lt;/a&gt; for more information about (g)uid's or
 &lt;a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/uuid.html"&gt;http://docs.oracle.com/javase/1.5.0/docs/api/java/util/uuid.html&lt;/a&gt; for more information about uuid's.
 &lt;br/&gt;
 When combining a date or time &lt;code&gt;pattern&lt;/code&gt; like {now} or {fixeddate} with a DATE, TIME, DATETIME or TIMESTAMP &lt;code&gt;type&lt;/code&gt;, the effective value of the attribute
 &lt;code&gt;formatString&lt;/code&gt; must match the effective value of the formatString in the &lt;code&gt;pattern&lt;/code&gt;.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="ignoreUnresolvablePatternElements" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; pattern elements that cannot be resolved to a parameter or sessionKey are silently resolved to an empty string</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="minLength" type="frankInt">
    <xs:annotation>
      <xs:documentation>If set (&gt;=0) and the length of the value of the parameter falls short of this minimum length, the value is padded Default: -1</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="maxLength" type="frankInt">
    <xs:annotation>
      <xs:documentation>If set (&gt;=0) and the length of the value of the parameter exceeds this maximum length, the length is trimmed to this maximum length Default: -1</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="hidden" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the value of the parameter will not be shown in the log (replaced by asterisks) Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="mode">
    <xs:annotation>
      <xs:documentation>Set the mode of the parameter, which determines if the parameter is an INPUT, OUTPUT, or INOUT.
 This parameter only has effect for StoredProcedureQuerySender.
 An OUTPUT parameter does not need to have a value specified, but does need to have the type specified.
 Parameter values will not be updated, but output values will be put into the result of the
 StoredProcedureQuerySender.
 &lt;b/&gt;
 If not specified, the default is INPUT.</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="ParameterModeAttributeValuesType variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="destinationParam" type="xs:string">
    <xs:annotation>
      <xs:documentation>Parameter that is used, if specified and not empty, to determine the destination. Overrides the &lt;code&gt;destination&lt;/code&gt; attribute</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="replyToName" type="xs:string">
    <xs:annotation>
      <xs:documentation>Name of the queue the reply is expected on. This value is sent in the JMSReplyTo-header with the message. Default: a dynamically generated temporary destination</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="linkMethod">
    <xs:annotation>
      <xs:documentation>(Only used when &lt;code&gt;synchronous=true&lt;/code&gt; and &lt;code&gt;replyToName&lt;/code&gt; is set). Indicates whether the server uses the correlationId from the pipeline,
 the correlationId from the message or the messageId in the correlationId field of the reply. This requires the sender to have set the correlationId at the time of sending. Default: MESSAGEID</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="LinkMethodAttributeValuesType variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="messageType" type="xs:string">
    <xs:annotation>
      <xs:documentation>Value of the JMSType field Default: not set by application</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="priority" type="frankInt">
    <xs:annotation>
      <xs:documentation>Sets the priority that is used to deliver the message. Ranges from 0 to 9. Defaults to -1, meaning not set. Effectively the default priority is set by JMS to 4 Default: -1</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="encodingStyleURI" type="xs:string">
    <xs:annotation>
      <xs:documentation>SOAP encoding style URI</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="serviceNamespaceURI" type="xs:string">
    <xs:annotation>
      <xs:documentation>SOAP service namespace URI</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="soapHeaderParam" type="xs:string">
    <xs:annotation>
      <xs:documentation>Name of parameter containing SOAP header Default: soapHeader</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="replySoapHeaderSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>session key to store SOAP header of reply Default: replySoapHeader</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="responseHeadersToSessionKeys" type="xs:string">
    <xs:annotation>
      <xs:documentation>A list of JMS headers of the response to add to the PipeLineSession</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="messageClass">
    <xs:annotation>
      <xs:documentation>The JMS jakarta.jms.Message class for the outgoing message.
 Currently supported are MessageClass#TEXT for JMS TextMessage,
 MessageClass#BYTES for JMS BytesMessage, or MessageClass#AUTO for auto-determination
 based on whether the input Message is binary or character.
 &lt;p&gt;
 Defaults to MessageClass#AUTO, unless the default is overridden in AppConstants with property {@code jms.messageClass.default}
 &lt;/p&gt;</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="MessageClassAttributeValuesType variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="destinationType">
    <xs:annotation>
      <xs:documentation>Type of the messageing destination.
 This function also sets the &lt;code&gt;useTopicFunctions&lt;/code&gt; field,
 that controls whether Topic functions are used or Queue functions. Default: QUEUE</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="DestinationTypeAttributeValuesType variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="acknowledgeMode">
    <xs:annotation>
      <xs:documentation>If not transacted, the way the application informs the JMS provider that it has successfully received a message. Default: auto</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="AcknowledgeModeAttributeValuesType variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="persistent" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Controls whether messages are processed persistently.

 When set &lt;code&gt;true&lt;/code&gt;, the JMS provider ensures that messages aren't lost when the application might crash.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="subscriberType">
    <xs:annotation>
      <xs:documentation>Only applicable for topics Default: DURABLE</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="SubscriberTypeAttributeValuesType variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="queueConnectionFactoryName" type="xs:string">
    <xs:annotation>
      <xs:documentation>Used when destinationType = QUEUE.
 The JNDI-name of the queueConnectionFactory to use to connect to a &lt;code&gt;queue&lt;/code&gt; if #isTransacted() returns &lt;code&gt;false&lt;/code&gt;.
 The corresponding connection factory should be configured not to support XA transactions.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="topicConnectionFactoryName" type="xs:string">
    <xs:annotation>
      <xs:documentation>Used when destinationType = TOPIC.
 The JNDI-name of the connection factory to use to connect to a &lt;i&gt;topic&lt;/i&gt; if #isTransacted() returns &lt;code&gt;false&lt;/code&gt;.
 The corresponding connection factory should be configured not to support XA transactions.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="jmsTransacted" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Controls the use of JMS transacted session.
 In versions prior to 4.1, this attribute was called plainly 'transacted'. The transacted
 attribute, however, is now in uses to indicate the use of XA-transactions. XA transactions can be used
 in a pipeline to simultaneously (in one transaction) commit or rollback messages send to a number of queues, or
 even together with database actions.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="correlationIdToHex" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Transform the value of the correlationid to a hexadecimal value if it starts with id: (preserving the id: part).
 Useful when sending messages to MQ which expects this value to be in hexadecimal format when it starts with id:, otherwise generating the error: MQJMS1044: String is not a valid hexadecimal number Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="correlationIdToHexPrefix" type="xs:string">
    <xs:annotation>
      <xs:documentation>Prefix to check before executing correlationIdToHex. If empty (and correlationIdToHex equals true) all correlationid's are transformed, this is useful in case you want the entire correlationId to be transformed (for example when the receiving party doesn't allow characters like a colon to be present in the correlationId). Default: id:</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="messageTimeToLive" type="frankInt">
    <xs:annotation>
      <xs:documentation>The time &lt;i&gt;in milliseconds&lt;/i&gt; it takes for the message to expire. If the message is not consumed before, it will be lost. Must be a positive value for request/reply type of messages, 0 disables the expiry timeout Default: 0</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="correlationIdMaxLength" type="frankInt">
    <xs:annotation>
      <xs:documentation>If set (&gt;=0) and the length of the correlationId exceeds this maximum length, the correlationId is trimmed from the left side of a string to this maximum length Default: -1</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="messageSelector" type="xs:string">
    <xs:annotation>
      <xs:documentation>If set, the value of this attribute is used as a selector to filter messages. Default: 0 (unlimited)</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="lookupDestination" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;false&lt;/code&gt;, the destinationName is used directly instead of performing a JNDI lookup Default: true</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="authentication" type="xs:string">
    <xs:annotation>
      <xs:documentation>maps to the field context.security_authentication</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="credentials" type="xs:string">
    <xs:annotation>
      <xs:documentation>username to connect to context, maps to context.security_credentials</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="initialContextFactoryName" type="xs:string">
    <xs:annotation>
      <xs:documentation>class to use as initial context factory</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="providerURL" type="xs:string">
    <xs:annotation>
      <xs:documentation>Sets the value of providerURL</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="securityProtocol" type="xs:string">
    <xs:annotation>
      <xs:documentation>maps to the field context.security_protocol</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="urlPkgPrefixes" type="xs:string">
    <xs:annotation>
      <xs:documentation>maps to the field context.url_pkg_prefixes</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="jmsRealm" type="xs:string">
    <xs:annotation>
      <xs:documentation>loads JNDI (and other) properties from a JmsRealm</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="principal" type="xs:string">
    <xs:annotation>
      <xs:documentation>username to connect to context, maps to context.security_principal</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="jndiAuthAlias" type="xs:string">
    <xs:annotation>
      <xs:documentation>authentication alias, may be used to override principal and credential-settings</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="jndiContextPrefix" type="xs:string" />
  <xs:attribute name="jndiProperties" type="xs:string" />
  <xs:attribute name="datasourceName" type="xs:string">
    <xs:annotation>
      <xs:documentation>JNDI name of datasource to be used, can be configured via jmsRealm, too Default: jdbc.datasource.default</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="connectionsArePooled" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>informs the sender that the obtained connection is from a pool (and thus connections are reused and never closed) Default: true</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="packageContent" type="xs:string">
    <xs:annotation>
      <xs:documentation>Controls if the returned package content is db2 format or xml format.
 Possible values:
 &lt;ul&gt;
 &lt;li&gt;select:&lt;/li&gt; xml content s expected
 &lt;li&gt;&lt;i&gt;anything else&lt;/i&gt;:&lt;/li&gt; db2 content is expected
 &lt;/ul&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="scalar" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the value of the first column of the first row (or the startrow) is returned as the only result, as a simple non-xml value Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="scalarExtended" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>When &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;scalar&lt;/code&gt; is also &lt;code&gt;true&lt;/code&gt;, but returns no value, one of the following is returned:
 &lt;ul&gt;
 &lt;li&gt;'[absent]' no row is found&lt;/li&gt;
 &lt;li&gt;'[null]' a row is found, but the value is a SQL-NULL&lt;/li&gt;
 &lt;li&gt;'[empty]' a row is found, but the value is a empty string&lt;/li&gt;
 &lt;/ul&gt; Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="nullValue" type="xs:string">
    <xs:annotation>
      <xs:documentation>Value used in result as contents of fields that contain no value (sql-null) Default: &lt;i&gt;empty string&lt;/i&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="resultQuery" type="xs:string">
    <xs:annotation>
      <xs:documentation>Query that can be used to obtain result of side-effect of update-query, like generated value of sequence. Example: SELECT mysequence.currval FROM dual</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="useNamedParams" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Named parameters will be auto-detected by default. Every string in the query which equals &lt;code&gt;?{paramname}&lt;/code&gt; will be replaced by the value of the corresponding parameter. The parameters don't need to be in the correct order and unused parameters are skipped.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="includeFieldDefinition" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>when &lt;code&gt;true&lt;/code&gt;, the result contains besides the returned rows also includes a header with information about the fetched fields Default: application default (true)</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="trimSpaces" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Remove trailing blanks from all result values. Default: true</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="streamResultToServlet" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set, the result is streamed to the HttpServletResponse object of the RestServiceDispatcher (instead of passed as bytes or as a String) Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="synchronous" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>When &lt;code&gt;true&lt;/code&gt;, the result of sendMessage is the reply of the request. Default: true</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="closeInputstreamOnExit" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Inputstream is not closed after it has been used to update a BLOB or CLOB Default: true</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="closeOutputstreamOnExit" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>When set to &lt;code&gt;false&lt;/code&gt;, the Outputstream is not closed after BLOB or CLOB has been written to it Default: true</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="streamCharset" type="xs:string">
    <xs:annotation>
      <xs:documentation>Charset used when reading a stream (that is e.g. going to be written to a BLOB or CLOB). When empty, the stream is copied directly to the BLOB, without conversion</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="prettyPrint" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If true and scalar=false, multiline indented XML is produced Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="batchSize" type="frankInt">
    <xs:annotation>
      <xs:documentation>When set larger than 0 and used as a child of an IteratingPipe, then the database calls are made in batches of this size. Only for queryType=other. Default: 0</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="url" type="xs:string">
    <xs:annotation>
      <xs:documentation>URL or base of URL to be used</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="urlParam" type="xs:string">
    <xs:annotation>
      <xs:documentation>Parameter that is used to obtain URL; overrides url-attribute. Default: url</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="methodType">
    <xs:annotation>
      <xs:documentation>The HTTP Method used to execute the request Default: &lt;code&gt;GET&lt;/code&gt;</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="HttpMethodAttributeValuesType_2 variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="contentType" type="xs:string">
    <xs:annotation>
      <xs:documentation>Content-Type (superset of mimetype + charset) of the request, for &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;PATCH&lt;/code&gt; methods Default: text/html, when postType=&lt;code&gt;RAW&lt;/code&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="charSet" type="xs:string">
    <xs:annotation>
      <xs:documentation>Charset of the request. Typically only used on &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; requests. Default: UTF-8</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="certificate" type="xs:string" />
  <xs:attribute name="certificateType">
    <xs:simpleType>
      <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="certificateAuthAlias" type="xs:string" />
  <xs:attribute name="certificatePassword" type="xs:string" />
  <xs:attribute name="headersParams" type="xs:string">
    <xs:annotation>
      <xs:documentation>Comma separated list of parameter names which should be set as HTTP headers</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="parametersToSkipWhenEmpty" type="xs:string">
    <xs:annotation>
      <xs:documentation>Comma separated list of parameter names that should not be added as request or body parameter, or as HTTP header, if they are empty. Set to '*' for this behaviour for all parameters</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="xhtml" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the HTML response is transformed to XHTML Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="resultStatusCodeSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>If set, the status code of the HTTP response is put in the specified sessionKey and the (error or okay) response message is returned.
 Setting this property has a side effect. If a 4xx or 5xx result code is returned and if the configuration does not implement
 the specific forward for the returned HTTP result code, then the success forward is followed instead of the exception forward.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="sharedResourceRef" type="xs:string" />
  <xs:attribute name="maxConnections" type="frankInt">
    <xs:annotation>
      <xs:documentation>The maximum number of concurrent connections Default: 10</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="maxExecuteRetries" type="frankInt">
    <xs:annotation>
      <xs:documentation>The maximum number of times the execution is retried Default: 1 (for repeatable messages) else 0</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="authDomain" type="xs:string">
    <xs:annotation>
      <xs:documentation>Corporate domain name. Should only be used in combination with sAMAccountName, never with an UPN.&lt;br/&gt;
 &lt;br/&gt;
 Assuming the following user:&lt;br/&gt;
 UPN: john.doe@CorpDomain.biz&lt;br/&gt;
 sAMAccountName: CORPDOMAIN\john.doe&lt;br/&gt;
 &lt;br/&gt;
 The username attribute may be set to &lt;code&gt;john.doe&lt;/code&gt;&lt;br/&gt;
 The AuthDomain attribute may be set to &lt;code&gt;CORPDOMAIN&lt;/code&gt;&lt;br/&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="tokenEndpoint" type="xs:string">
    <xs:annotation>
      <xs:documentation>Endpoint to obtain OAuth accessToken. If &lt;code&gt;authAlias&lt;/code&gt; or &lt;code&gt;username&lt;/code&gt;( and &lt;code&gt;password&lt;/code&gt;) are specified,
 then a PasswordGrant is used, otherwise a ClientCredentials grant. The obtained accessToken will be added to the regular requests
 in an HTTP Header 'Authorization' with a 'Bearer' prefix.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="tokenExpiry" type="frankInt">
    <xs:annotation>
      <xs:documentation>If set to a non-negative value, then determines the time (in seconds) after which the token will be refreshed. Otherwise the token
 will be refreshed when it is half way its lifetime as defined by the &lt;code&gt;expires_in&lt;/code&gt; clause of the token response,
 or when the regular server returns a 401 status with a challenge.
 If not specified, and the accessTokens lifetime is not found in the token response, the accessToken will not be refreshed preemptively. Default: -1</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="clientAlias" type="xs:string">
    <xs:annotation>
      <xs:documentation>Alias used to obtain client_id and client_secret for authentication to &lt;code&gt;tokenEndpoint&lt;/code&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="clientId" type="xs:string">
    <xs:annotation>
      <xs:documentation>Client_id used in authentication to &lt;code&gt;tokenEndpoint&lt;/code&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="clientSecret" type="xs:string">
    <xs:annotation>
      <xs:documentation>Client_secret used in authentication to &lt;code&gt;tokenEndpoint&lt;/code&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="scope" type="xs:string">
    <xs:annotation>
      <xs:documentation>Space or comma separated list of scope items requested for accessToken, e.g. &lt;code&gt;read write&lt;/code&gt;. Only used when &lt;code&gt;tokenEndpoint&lt;/code&gt; is specified</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="authenticatedTokenRequest" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>if set true, clientId and clientSecret will be added as Basic Authentication header to the tokenRequest, instead of as request parameters</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="proxyHost" type="xs:string">
    <xs:annotation>
      <xs:documentation>Proxy host</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="proxyPort" type="frankInt">
    <xs:annotation>
      <xs:documentation>Proxy port Default: 80</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="proxyAuthAlias" type="xs:string">
    <xs:annotation>
      <xs:documentation>Alias used to obtain credentials for authentication to proxy</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="proxyUsername" type="xs:string">
    <xs:annotation>
      <xs:documentation>Proxy username</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="proxyPassword" type="xs:string">
    <xs:annotation>
      <xs:documentation>Proxy password</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="proxyRealm" type="xs:string">
    <xs:annotation>
      <xs:documentation>Proxy realm</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="prefillProxyAuthCache" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Create a pre-emptive login context for the proxy connection(s).</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="disableCookies" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Disables the use of cookies, making the sender completely stateless Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="keystore" type="xs:string">
    <xs:annotation>
      <xs:documentation>resource URL to keystore or certificate to be used for authentication. If none specified, the JVMs default keystore will be used.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="keystoreType">
    <xs:annotation>
      <xs:documentation>Type of keystore Default: pkcs12</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="keystoreAuthAlias" type="xs:string">
    <xs:annotation>
      <xs:documentation>Authentication alias used to obtain keystore password</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="keystorePassword" type="xs:string">
    <xs:annotation>
      <xs:documentation>Default password to access keystore</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="keyManagerAlgorithm" type="xs:string">
    <xs:annotation>
      <xs:documentation>Key manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="keystoreAlias" type="xs:string">
    <xs:annotation>
      <xs:documentation>Alias to obtain specific certificate or key in keystore</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="keystoreAliasAuthAlias" type="xs:string">
    <xs:annotation>
      <xs:documentation>Authentication alias to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="keystoreAliasPassword" type="xs:string">
    <xs:annotation>
      <xs:documentation>Default password to authenticate access to certificate or key indicated by &lt;code&gt;keystoreAlias&lt;/code&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="truststore" type="xs:string">
    <xs:annotation>
      <xs:documentation>Resource URL to truststore to be used for authenticating peer. If none specified, the JVMs default truststore will be used.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="truststoreAuthAlias" type="xs:string">
    <xs:annotation>
      <xs:documentation>Authentication alias used to obtain truststore password</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="truststorePassword" type="xs:string">
    <xs:annotation>
      <xs:documentation>Default password to access truststore</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="truststoreType">
    <xs:annotation>
      <xs:documentation>Type of truststore Default: jks</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="KeystoreTypeAttributeValuesType variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="trustManagerAlgorithm" type="xs:string">
    <xs:annotation>
      <xs:documentation>Trust manager algorithm. Can be left empty to use the servers default algorithm</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="verifyHostname" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the hostname in the certificate will be checked against the actual hostname of the peer</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="allowSelfSignedCertificates" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, self signed certificates are accepted Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="ignoreCertificateExpiredException" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, CertificateExpiredExceptions are ignored Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="followRedirects" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, a redirect request will be honoured, e.g. to switch to HTTPS Default: true</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="ignoreRedirects" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="staleChecking" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Controls whether connections checked to be stale, i.e. appear open, but are not. Default: true</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="staleTimeout" type="frankInt">
    <xs:annotation>
      <xs:documentation>Used when &lt;code&gt;staleChecking&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Timeout after which an idle connection will be validated before being used. Default: 5000 ms</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="connectionTimeToLive" type="frankInt">
    <xs:annotation>
      <xs:documentation>Maximum Time to Live for connections in the pool. No connection will be re-used past its timeToLive value. Default: 900 s</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="connectionIdleTimeout" type="frankInt">
    <xs:annotation>
      <xs:documentation>Maximum Time for connection to stay idle in the pool. Connections that are idle longer will periodically be evicted from the pool Default: 10 s</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="protocol" type="xs:string">
    <xs:annotation>
      <xs:documentation>Secure socket protocol (such as 'TLSv1.2') to use when a SSLContext object is generated. Default: TLSv1.2</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="supportedCipherSuites" type="xs:string">
    <xs:annotation>
      <xs:documentation>Allows you to choose which CipherSuites are used when connecting to an endpoint. Works in tandem with {@code protocol} as the provided Suite may not be valid for the provided Protocol
 See the Java Security Standard Algorithm Names Specification for all available options. Note that these may differ depending on the JRE you're using.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="correlationIdFieldIndex" type="frankInt">
    <xs:annotation>
      <xs:documentation>Index of the field in the ImportParameterList of the RFC function that contains the correlationId Default: 0</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="correlationIdFieldName" type="xs:string">
    <xs:annotation>
      <xs:documentation>Name of the field in the ImportParameterList of the RFC function that contains the correlationId</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="requestFieldIndex" type="frankInt">
    <xs:annotation>
      <xs:documentation>Index of the field in the ImportParameterList of the RFC function that contains the whole request message contents Default: 0</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="requestFieldName" type="xs:string">
    <xs:annotation>
      <xs:documentation>Name of the field in the ImportParameterList of the RFC function that contains the whole request message contents</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="replyFieldIndex" type="frankInt">
    <xs:annotation>
      <xs:documentation>Index of the field in the ExportParameterList of the RFC function that contains the whole reply message contents Default: 0</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="replyFieldName" type="xs:string">
    <xs:annotation>
      <xs:documentation>Name of the field in the ExportParameterList of the RFC function that contains the whole reply message contents</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="debugInput" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt; the input is written to the log file, at DEBUG level Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="userId" type="xs:string">
    <xs:annotation>
      <xs:documentation>userId on the smtphost</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="defaultSubject" type="xs:string">
    <xs:annotation>
      <xs:documentation>Set the default value of the subject: header, if not specified in message itself</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="defaultFrom" type="xs:string">
    <xs:annotation>
      <xs:documentation>Set the default from: header, if not specified in message itself</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="defaultAttachmentName" type="xs:string">
    <xs:annotation>
      <xs:documentation>When this name is used, it will be followed by a number which is equal to the node's position Default: attachment</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="defaultMessageType" type="xs:string">
    <xs:annotation>
      <xs:documentation>when messageType is not specified defaultMessageType will be used Default: text/plain</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="defaultMessageBase64" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>when messageBase64 is not specified defaultMessageBase64 will be used Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="bounceAddress" type="xs:string">
    <xs:annotation>
      <xs:documentation>NDR return address when mail cannot be delivered. This adds a Return-Path header Default: MAIL FROM attribute</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="domainWhitelist" type="xs:string">
    <xs:annotation>
      <xs:documentation>Comma separated list of domains to which mails can be send, domains not on the list are filtered out. Empty allows all domains</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="type" type="xs:string">
    <xs:annotation>
      <xs:documentation>Possible values are &lt;code&gt;E&lt;/code&gt; (error store), &lt;code&gt;M&lt;/code&gt; (message store), &lt;code&gt;L&lt;/code&gt; (message log for Pipe) or &lt;code&gt;A&lt;/code&gt; (message log for Receiver).&lt;br/&gt;
 Receiver will always set type to &lt;code&gt;E&lt;/code&gt; for errorStorage and always set type to &lt;code&gt;A&lt;/code&gt; for messageLog. SenderPipe will set type to &lt;code&gt;L&lt;/code&gt; for messageLog (when type isn't specified).&lt;br/&gt;
 See MessageStoreSender for type &lt;code&gt;M&lt;/code&gt;. Default: &lt;code&gt;E&lt;/code&gt; for errorStorage on Receiver&lt;br/&gt;&lt;code&gt;A&lt;/code&gt; for messageLog on Receiver&lt;br/&gt;&lt;code&gt;L&lt;/code&gt; for messageLog on Pipe</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="slotIdField" type="xs:string">
    <xs:annotation>
      <xs:documentation>The name of the column slotids are stored in Default: SLOTID</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="typeField" type="xs:string">
    <xs:annotation>
      <xs:documentation>The name of the column types are stored in Default: TYPE</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="hostField" type="xs:string">
    <xs:annotation>
      <xs:documentation>The name of the column that stores the hostname of the server Default: HOST</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="sequenceName" type="xs:string">
    <xs:annotation>
      <xs:documentation>The name of the sequence used to generate the primary key, for DBMSes that use sequences, like Oracle Default: seq_ibisstore</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="checkIfTableExists" type="frankBoolean" />
  <xs:attribute name="checkTable" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, checks are performed if the table exists and is properly created Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="createTable" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the table is created if it does not exist Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="messageFieldType" type="xs:string">
    <xs:annotation>
      <xs:documentation>The type of the column message themselves are stored in</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="keyFieldType" type="xs:string">
    <xs:annotation>
      <xs:documentation>The type of the column that contains the primary key of the table</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="dateFieldType" type="xs:string">
    <xs:annotation>
      <xs:documentation>The type of the column the timestamps are stored in</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="textFieldType" type="xs:string">
    <xs:annotation>
      <xs:documentation>The type of the columns messageId and correlationId, slotId and comments are stored in. N.B. &lt;code&gt;(100)&lt;/code&gt; is appended for id's, &lt;code&gt;(1000)&lt;/code&gt; is appended for comments.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="retention" type="frankInt">
    <xs:annotation>
      <xs:documentation>The time (in days) to keep the record in the database before making it eligible for deletion by a cleanup process. when set to -1, the record will live on forever Default: 30</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="schemaOwner4Check" type="xs:string">
    <xs:annotation>
      <xs:documentation>Schema owner to be used to check the database Default: &amp;lt;current_schema&amp;gt; (only for oracle)</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="storeFullMessage" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the full message is stored with the log. Can be set to &lt;code&gt;false&lt;/code&gt; to reduce table size, by avoiding to store the full message Default: true</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="replyDestinationName" type="xs:string">
    <xs:annotation>
      <xs:documentation>Name of the JMS destination (queue or topic) to use for sending replies. If &lt;code&gt;useReplyTo=true&lt;/code&gt;,
 the sender specified reply destination takes precedence over this one.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="replyMessageType" type="xs:string">
    <xs:annotation>
      <xs:documentation>Value of the JMSType field of the reply message Default: not set by application</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="replyDeliveryMode">
    <xs:annotation>
      <xs:documentation>Controls mode that reply messages are sent with Default: NON_PERSISTENT</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="DeliveryModeAttributeValuesType variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="replyPriority" type="frankInt">
    <xs:annotation>
      <xs:documentation>Sets the priority that is used to deliver the reply message. Ranges from 0 to 9. Effectively the default priority is set by JMS to 4, &lt;code&gt;-1&lt;/code&gt; means not set and thus uses the JMS default Default: -1</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="replyMessageTimeToLive" type="frankInt">
    <xs:annotation>
      <xs:documentation>Time &lt;i&gt;in milliseconds&lt;/i&gt; after which the reply-message will expire Default: 0</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="replyEncodingStyleURI" type="xs:string" />
  <xs:attribute name="replyNamespaceURI" type="xs:string" />
  <xs:attribute name="replySoapAction" type="xs:string" />
  <xs:attribute name="soapHeaderSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>sessionKey to store the SOAP header of the incoming message Default: soapHeader</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="inputFolder" type="xs:string">
    <xs:annotation>
      <xs:documentation>Folder that is scanned for files. If not set, the root is scanned</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="inProcessFolder" type="xs:string">
    <xs:annotation>
      <xs:documentation>Folder where files are stored &lt;i&gt;while&lt;/i&gt; being processed</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="processedFolder" type="xs:string">
    <xs:annotation>
      <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="errorFolder" type="xs:string">
    <xs:annotation>
      <xs:documentation>Folder where files are stored &lt;i&gt;after&lt;/i&gt; being processed, in case the exit-state was not equal to &lt;code&gt;success&lt;/code&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="holdFolder" type="xs:string">
    <xs:annotation>
      <xs:documentation>Folder where messages from the error folder can be put on Hold, temporarily</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="logFolder" type="xs:string">
    <xs:annotation>
      <xs:documentation>Folder where a copy of every file that is received is stored</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="createFolders" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the folders to look for files and to move files to when being processed and after being processed are created if they are specified and do not exist Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="delete" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the file processed will be deleted after being processed, and not stored Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="numberOfBackups" type="frankInt">
    <xs:annotation>
      <xs:documentation>Number of copies held of a file with the same name. Backup files have a dot and a number suffixed to their name. If set to 0, no backups will be kept. Default: 0</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="overwrite" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the destination file will be deleted if it already exists Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="fileTimeSensitive" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If &lt;code&gt;true&lt;/code&gt;, the file modification time is used in addition to the filename to determine if a file has been seen before Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="minStableTime" type="frankInt">
    <xs:annotation>
      <xs:documentation>Minimal age of file &lt;i&gt;in milliseconds&lt;/i&gt;, to avoid receiving a file while it is still being written Default: 1000</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="messageIdPropertyKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>Key of Property to use as messageId. If not set, the filename of the file as it was received in the inputFolder is used as the messageId Default: for MailFileSystems: Message-ID</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="disableMessageBrowsers" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, no browsers for process folders are generated Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="wildcard" type="xs:string">
    <xs:annotation>
      <xs:documentation>Filter of files to look for in inputFolder e.g. '*.inp'.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="excludeWildcard" type="xs:string">
    <xs:annotation>
      <xs:documentation>Filter of files to be excluded when looking in inputFolder.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="storeMetadataInSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>If set, an XML with all message properties is provided under this key</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="peekUntransacted" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>when true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true. This avoids rolling back a lot of XA transactions, that appears to be problematic on MS SQL Server Default: true</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="peekQuery" type="xs:string">
    <xs:annotation>
      <xs:documentation>(only used when &lt;code&gt;peekUntransacted&lt;/code&gt;=&lt;code&gt;true&lt;/code&gt;) peek query to determine if the select query should be executed. Peek queries are, unlike select queries, executed without a transaction and without a rowlock Default: selectQuery</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="blobCharset" type="xs:string">
    <xs:annotation>
      <xs:documentation>Charset used to read BLOB. When specified, then the BLOB will be converted into a string</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="trace" type="frankBoolean" />
  <xs:attribute name="tableAlias" type="xs:string">
    <xs:annotation>
      <xs:documentation>Alias of the table, that can be used in selectCondition Default: t</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="orderField" type="xs:string">
    <xs:annotation>
      <xs:documentation>(optional) Comma separated list of fields determining the order in which messages are processed</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="maxCommentLength" type="frankInt">
    <xs:annotation>
      <xs:documentation>(optional) Maximum length of strings to be stored in commentField, or -1 for unlimited Default: 1000</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="selectCondition" type="xs:string">
    <xs:annotation>
      <xs:documentation>Additional condition for a row to belong to this TableListener. Impacts all process states</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="transactionTimeout" type="frankInt">
    <xs:annotation>
      <xs:documentation>Timeout (in seconds) of transaction started to process a message. Default: &lt;code&gt;0&lt;/code&gt; (use system default)</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="transactionAttribute">
    <xs:annotation>
      <xs:documentation>The &lt;code&gt;transactionAttribute&lt;/code&gt; declares transactional behavior of execution. It applies both to database transactions and XA transactions.
 The pipeline uses this to start a new transaction or suspend the current one when required.
 For developers: it is equal to &lt;a href=\"https://docs.oracle.com/javaee/7/tutorial/transactions003.htm\"&gt;EJB transaction attribute&lt;/a&gt;.
 Possible values for transactionAttribute:
   &lt;table border=\"1\"&gt;
     &lt;tr&gt;&lt;th&gt;transactionAttribute&lt;/th&gt;&lt;th&gt;callers Transaction&lt;/th&gt;&lt;th&gt;Pipeline excecuted in Transaction&lt;/th&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td colspan=\"1\" rowspan=\"2\"&gt;Required&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;
 											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td colspan=\"1\" rowspan=\"2\"&gt;RequiresNew&lt;/td&gt; &lt;td&gt;none&lt;/td&gt;&lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;
 											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T2&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td colspan=\"1\" rowspan=\"2\"&gt;Mandatory&lt;/td&gt;   &lt;td&gt;none&lt;/td&gt;&lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;
 											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td colspan=\"1\" rowspan=\"2\"&gt;NotSupported&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;
 											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td colspan=\"1\" rowspan=\"2\"&gt;Supports&lt;/td&gt;    &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;
  										      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;T1&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td colspan=\"1\" rowspan=\"2\"&gt;Never&lt;/td&gt;       &lt;td&gt;none&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;
 											      &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;  &lt;td&gt;error&lt;/td&gt;&lt;/tr&gt;
   &lt;/table&gt; Default: Supports</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="TransactionAttributeAttributeValuesType variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="getInputFromSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>If set, input is taken from this session key, instead of regular input</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="getInputFromFixedValue" type="xs:string">
    <xs:annotation>
      <xs:documentation>If set, this fixed value is taken as input, instead of regular input</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="emptyInputReplacement" type="xs:string">
    <xs:annotation>
      <xs:documentation>If set and the input is empty, this fixed value is taken as input</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="preserveInput" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the result of the pipe is replaced with the original input (i.e. the input before configured replacements of &lt;code&gt;getInputFromSessionKey&lt;/code&gt;, &lt;code&gt;getInputFromFixedValue&lt;/code&gt; or &lt;code&gt;emptyInputReplacement&lt;/code&gt;)</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="storeResultInSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>If set, the pipe result is copied to a session key that has the name defined by this attribute. The
 pipe result is still written as the output message as usual.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="maxThreads" type="frankInt">
    <xs:annotation>
      <xs:documentation>The maximum number of threads that may messages simultaneously.
 A value of 0 indicates an unlimited number of threads. Default: 0</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="chompCharSize" type="xs:string">
    <xs:annotation>
      <xs:documentation>If set (&gt;=0) and the character data length inside a xml element exceeds this size, the character data is chomped (with a clear comment)</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="elementToMove" type="xs:string">
    <xs:annotation>
      <xs:documentation>If set, the character data in this element is stored under a session key and in the message replaced by a reference to this session key: {sessionKey: + &lt;code&gt;elementToMoveSessionKey&lt;/code&gt; + }</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="elementToMoveSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>(Only used when &lt;code&gt;elementToMove&lt;/code&gt; is set) Name of the session key under which the character data is stored Default: ref_ + the name of the element</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="elementToMoveChain" type="xs:string">
    <xs:annotation>
      <xs:documentation>Like &lt;code&gt;elementToMove&lt;/code&gt; but element is preceded with all ancestor elements and separated by semicolons (e.g. 'adapter;pipeline;pipe')</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="durationThreshold" type="frankInt">
    <xs:annotation>
      <xs:documentation>If durationThreshold &gt;=0 and the duration of the message processing exceeded the value specified (in milliseconds) the message is logged informatory to be analyzed Default: -1</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="removeCompactMsgNamespaces" type="frankBoolean" />
  <xs:attribute name="restoreMovedElements" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, compacted messages in the result are restored to their original format (see also  #setElementToMove(java.lang.String))</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="sizeStatistics" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Collect and aggregate Message size statistics</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="writeToSecLog" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>when set to &lt;code&gt;true&lt;/code&gt; a record is written to the security log when the pipe has finished successfully</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="secLogSessionKeys" type="xs:string">
    <xs:annotation>
      <xs:documentation>(only used when &lt;code&gt;writeToSecLog=true&lt;/code&gt;) comma separated list of keys of session variables that is appended to the security log record</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="logIntermediaryResults" type="xs:string">
    <xs:annotation>
      <xs:documentation>when set, the value in AppConstants is overwritten (for this pipe only)</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="hideRegex" type="xs:string">
    <xs:annotation>
      <xs:documentation>Regular expression to mask strings in the log. For example, the regular expression &lt;code&gt;(?&amp;lt;=&amp;lt;password&amp;gt;).*?(?=&amp;lt;/password&amp;gt;)&lt;/code&gt;
 will replace every character between keys '&amp;lt;password&amp;gt;' and '&amp;lt;/password&amp;gt;'. &lt;b&gt;note:&lt;/b&gt; this feature is used at adapter level,
 so a {@code hideRegex} set on one pipe affects all pipes in the pipeline (and multiple values in different pipes are combined into a single regex).
 The regular expressions are matched against part of the log lines. See int)
 with {@code mode = 0} for how regular expressions are matched and replaced.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="root" type="xs:string">
    <xs:annotation>
      <xs:documentation>always envelope (not allowed to change) Default: envelope</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="outputSoapBody" type="xs:string">
    <xs:annotation>
      <xs:documentation>Identical to the &lt;code&gt;soapBody&lt;/code&gt; attribute except that it's used for the output message instead of the input message. For more information see &lt;a href=\"#note1\"&gt;note 1&lt;/a&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="soapHeader" type="xs:string">
    <xs:annotation>
      <xs:documentation>Name of the child element of the SOAP header, or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="soapHeaderNamespace" type="xs:string">
    <xs:annotation>
      <xs:documentation>Can be used when the SOAP header element exists multiple times</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="soapVersion">
    <xs:annotation>
      <xs:documentation>SOAP envelope XSD version to use Default: 1.1</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="SoapVersionAttributeValuesType variableRef" />
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="allowPlainXml" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Allow plain XML, without a SOAP Envelope, too. Be aware that setting this true inhibits the capability to test for exit specific response roots in SOAP messages Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="ignoreUnknownNamespaces" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Ignore namespaces in the input message which are unknown. If the XSD used has elementFormDefault=unqualified, it is necessary to set this to true. Be aware, however, that
 this will inhibit the validator to detect validation failures of namespaceless subelements of the SoapBody. Default: true when &lt;code&gt;schema&lt;/code&gt; or &lt;code&gt;noNamespaceSchemaLocation&lt;/code&gt; is used, false otherwise</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="schema" type="xs:string">
    <xs:annotation>
      <xs:documentation>The filename of the schema on the classpath. It is not possible to specify a namespace using this attribute. (effectively the same as noNamespaceSchemaLocation)
 An example value would be "xml/xsd/GetPartyDetail.xsd".
 The value of the schema attribute is only used if the schemaLocation attribute and the noNamespaceSchemaLocation are not set.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="schemaLocation" type="xs:string">
    <xs:annotation>
      <xs:documentation>Pairs of URI references (one for the namespace name, and one for a hint as to the location of a schema document defining names for that namespace name).&lt;br/&gt;
 The syntax is the same as for schemaLocation attributes in instance documents: e.g, "http://www.example.com file%20name.xsd".&lt;br/&gt;
 The user can specify more than one XML Schema in the list.&lt;br/&gt;
 &lt;b&gt;Note&lt;/b&gt; that spaces are considered separators for this attributed. This means that, for example, spaces in filenames should be escaped to %20.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="noNamespaceSchemaLocation" type="xs:string">
    <xs:annotation>
      <xs:documentation>A uri reference as a hint as to the location of a schema document with no target namespace.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="responseRoot" type="xs:string">
    <xs:annotation>
      <xs:documentation>Name of the response root element, or a comma separated list of element names. The validation fails if the root element is not present in the list. N.B. for WSDL generation only the first element is used</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="fullSchemaChecking" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Enable full schema grammar constraint checking, including checking which
 may be time-consuming or memory intensive. Currently, particle unique
 attribution constraint checking and particle derivation restriction
 checking are controlled by this option.
 &lt;p&gt;
 see property
 http://apache.org/xml/features/validation/schema-full-checking
 &lt;/p&gt; Default: &lt;code&gt;false&lt;/code&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="throwException" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Should the XmlValidator throw a PipeRunexception on a validation error. If not, a forward with name 'failure' must be defined. Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="reasonSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>If set: key of session variable to store reasons of mis-validation in Default: failureReason</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="xmlReasonSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>Like &lt;code&gt;reasonSessionKey&lt;/code&gt; but stores reasons in xml format and more extensive Default: xmlFailureReason</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="validateFile" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the input is assumed to be the name of the file to be validated. Otherwise the input itself is validated Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="addNamespaceToSchema" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the namespace from schemalocation is added to the schema document as targetnamespace Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="importedSchemaLocationsToIgnore" type="xs:string">
    <xs:annotation>
      <xs:documentation>Comma separated list of schemaLocations which are excluded from an import or include in the schema document</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="useBaseImportedSchemaLocationsToIgnore" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the comparison for importedSchemaLocationsToIgnore is done on base filename without any path Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="importedNamespacesToIgnore" type="xs:string">
    <xs:annotation>
      <xs:documentation>Comma separated list of namespaces which are excluded from an import or include in the schema document</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="warn" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, send warnings to logging and console about syntax problems in the configured schema('s).
 Alternatively, warnings can be switched off using suppression properties XSD_VALIDATION_WARNINGS_SUPPRESS_KEY, XSD_VALIDATION_ERROR_SUPPRESS_KEY and XSD_VALIDATION_FATAL_ERROR_SUPPRESS_KEY Default: true</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="ignoreCaching" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the number for caching validators in appConstants is ignored and no caching is done (for this validator only) Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="xmlSchemaVersion" type="xs:string">
    <xs:annotation>
      <xs:documentation>If set to &lt;code&gt;1.0&lt;/code&gt;, Xerces's previous XML Schema factory will be used, which would make all XSD 1.1 features illegal. The default behaviour can also be set with &lt;code&gt;xsd.processor.version&lt;/code&gt; property. Default: &lt;code&gt;1.1&lt;/code&gt;</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="soapNamespace" type="xs:string">
    <xs:annotation>
      <xs:documentation>The namespace of the SOAP envelope, when this property has a value and the input message is a SOAP message,
 the content of the SOAP Body is used for validation, hence the SOAP Envelope and SOAP Body elements are not considered part of the message to validate.
 Please note that this functionality is deprecated, using SoapValidator is now the preferred solution in case a SOAP
 message needs to be validated, in other cases give this property an empty value. Default: http://schemas.xmlsoap.org/soap/envelope/</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="rootElementSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>Key of session variable to store the name of the root element</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="rootNamespaceSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>Key of session variable to store the namespace of the root element</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="schemaSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>Session key for retrieving a schema</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="forwardFailureToSuccess" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>If set &lt;code&gt;true&lt;/code&gt;, the failure forward is replaced by the success forward (like a warning mode)</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="itemNoSessionKey" type="xs:string">
    <xs:annotation>
      <xs:documentation>Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed. When handling the first item, the value will be 1.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="maxItems" type="frankInt">
    <xs:annotation>
      <xs:documentation>The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned. Special forward maxItemsReached can be configured to follow Default: 0</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="stopConditionXPathExpression" type="xs:string">
    <xs:annotation>
      <xs:documentation>Expression evaluated on each result and forwards to [stopConditionMet] forward if configured.
 Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression &lt;code&gt;*[@finished='yes']&lt;/code&gt; can be used.
 This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use &lt;code&gt;maxItems&lt;/code&gt;.
 Previous versions documented that &lt;code&gt;position()=2&lt;/code&gt; could be used. This is not working as expected; Use maxItems instead</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="ignoreExceptions" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>When &lt;code&gt;true&lt;/code&gt; ignore any exception thrown by executing sender Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="collectResults" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Controls whether all the results of each iteration will be collected in one result message. If set &lt;code&gt;false&lt;/code&gt;, only a small summary is returned.
 Setting this attributes to &lt;code&gt;false&lt;/code&gt; is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too Default: true</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="removeXmlDeclarationInResults" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="addInputToResult" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>When &lt;code&gt;true&lt;/code&gt; the input is added to the result in an input element Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="removeDuplicates" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>When &lt;code&gt;true&lt;/code&gt; duplicate input elements are removed, i.e. they are handled only once Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="parallel" type="frankBoolean">
    <xs:annotation>
      <xs:documentation>When set &lt;code&gt;true&lt;/code&gt;, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set &lt;code&gt;true&lt;/code&gt;, this pipe will wait for all calls to finish before results are collected and pipe result is returned Default: false</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="maxChildThreads" type="frankInt">
    <xs:annotation>
      <xs:documentation>Maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe). Use &lt;code&gt;0&lt;/code&gt; for unlimited threads Default: 0</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:simpleType name="frankBoolean">
    <xs:restriction base="xs:string">
      <xs:pattern value="(true|false)|($\{[^\}]+\})" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="frankInt">
    <xs:restriction base="xs:string">
      <xs:pattern value="((\+|-)?[0-9]+)|($\{[^\}]+\})" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attribute name="active">
    <xs:annotation>
      <xs:documentation>If defined and empty or false, then this element and all its children are ignored</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:string">
        <xs:pattern value="!?(($\{[^\}]+\})|([tT][rR][uU][eE])|([fF][aA][lL][sS][eE]))" />
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:simpleType name="variableRef">
    <xs:restriction base="xs:string">
      <xs:pattern value="$\{[^\}]+\}" />
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
