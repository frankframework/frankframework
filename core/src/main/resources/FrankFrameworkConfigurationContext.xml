<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	Beans defined in this file are unique for every configuration. If you want 
	to reuse a bean over multiple configurations, add it to the SpringCommon.xml
	Singleton beans are managed by Spring and will be closed upon configuration unload.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	default-autowire="byName"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean
		name="configurationDigester"
		class="nl.nn.adapterframework.configuration.ConfigurationDigester"
		autowire="byName"
		scope="singleton"
	/>

	<bean name="lifecycleProcessor" class="nl.nn.adapterframework.lifecycle.ConfiguringLifecycleProcessor" />

	<bean
		name="adapterManager"
		class="nl.nn.adapterframework.configuration.AdapterManager"
		autowire="byType"
		scope="singleton"
	/>

	<bean
		name="scheduleManager"
		class="nl.nn.adapterframework.configuration.ScheduleManager"
		autowire="byType"
		scope="singleton"
	/>

	<!--
	Beans created from Configuration.xml, but prototyped here for
	extra dependencies which cannot be created otherwise.
	Bean names are prefixed with 'proto-' so that autowiring by
	name doesn't create instances unnecessarily.
	-->

	<bean
		name="proto-jmsRealm"
		class="nl.nn.adapterframework.jms.JmsRealm"
		autowire="byName"
		scope="prototype"
		>
		<property name="jndiContextPrefix" ref="jndiContextPrefix"/>
	</bean>

	<bean
		name="proto-locker"
		class="nl.nn.adapterframework.util.Locker"
		autowire="byName"
		scope="prototype"
		>
		<property name="jndiContextPrefix" ref="jndiContextPrefix"/>
	</bean>

	<bean
		name="proto-adapter"
		class="nl.nn.adapterframework.core.Adapter"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-errorMessageFormatter"
		class="nl.nn.adapterframework.errormessageformatters.XslErrorMessageFormatter"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-forward"
		class="nl.nn.adapterframework.core.PipeForward"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-exit"
		class="nl.nn.adapterframework.core.PipeLineExit"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-pipeline"
		class="nl.nn.adapterframework.core.PipeLine"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-param"
		class="nl.nn.adapterframework.parameters.Parameter"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-receiver"
		class="nl.nn.adapterframework.receivers.Receiver"
		autowire="byName"
		scope="prototype"
	/>

	<!-- Default pipe is a message-sending pipe -->
	<bean
		name="proto-pipe"
		class="nl.nn.adapterframework.pipes.SenderPipe"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-sender"
		class="nl.nn.adapterframework.core.ISender"
		autowire="byName"
		scope="prototype"
	/>
	<bean
		name="proto-RecordHandlingFlow"
		class="nl.nn.adapterframework.batch.RecordHandlingFlow"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-monitor"
		class="nl.nn.adapterframework.monitoring.Monitor"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-trigger"
		class="nl.nn.adapterframework.monitoring.Trigger"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-alarm"
		class="nl.nn.adapterframework.monitoring.Trigger"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-clearing"
		class="nl.nn.adapterframework.monitoring.Trigger"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-job"
		class="nl.nn.adapterframework.scheduler.JobDef"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-directoryCleaner"
		class="nl.nn.adapterframework.util.DirectoryCleaner"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-statisticsHandlers"
		class="nl.nn.adapterframework.statistics.StatisticsKeeperIterationHandlerCollection"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-statisticsHandler"
		class="nl.nn.adapterframework.statistics.StatisticsKeeperIterationHandler"
		autowire="byName"
		scope="prototype"
	/>

	<bean
		name="proto-cache"
		class="nl.nn.adapterframework.cache.EhCache"
		autowire="byName"
		scope="prototype"
	/>
</beans>
