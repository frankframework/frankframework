/*
   Copyright 2017, 2020 Nationale-Nederlanden, 2024 WeAreFrank!

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package org.frankframework.extensions.akamai;

import java.net.URI;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.codec.binary.Base64;
import org.frankframework.extensions.akamai.NetStorageUtils.KeyedHashAlgorithm;
import org.frankframework.util.CredentialFactory;
import org.frankframework.util.UUIDUtil;


/**
 * The NetStorageCMSv35Signer is responsible for brokering the communication between the software layer and the API. This
 * includes the signing and formatting the request appropriately so that the implementation detail is abstracted from
 * calling libraries. The intended calling library is the NetStorage class, but this layer can be called directly and is
 * offered as a convenience interface for enhanced implementations.
 *
 * @author Niels Meijer
 */
public class NetStorageCmsSigner {
	//Main headers used for communication to the API
	protected static final String ACTION_HEADER = "X-Akamai-ACS-Action";
	protected static final String AUTH_DATA_HEADER = "X-Akamai-ACS-Auth-Data";
	protected static final String AUTH_SIGN_HEADER = "X-Akamai-ACS-Auth-Sign";

	/**
	 * Currently only 3 signing hash types are supported. Each are indicated with a version. They are:
	 * Hmac-MD5 = v3
	 * Hmac-SHA1 = v4
	 * Hmac-SHA256 = v5
	 * <p>
	 * (don't ask what v1 and v2 were. You don't want to know. It will make you cry.)
	 */
	public enum SignType {
		HMACMD5(KeyedHashAlgorithm.HMACMD5, 3),
		HMACSHA1(KeyedHashAlgorithm.HMACSHA1, 4),
		HMACSHA256(KeyedHashAlgorithm.HMACSHA256, 5);
		private final int value;
		private final KeyedHashAlgorithm algorithm;

		SignType(KeyedHashAlgorithm algorithm, int value) {
			this.value = value;
			this.algorithm = algorithm;
		}

		public int getValue() {
			return this.value;
		}

		public KeyedHashAlgorithm getAlgorithm() {
			return this.algorithm;
		}
	}

	private final URI uri;
	private final String nonce;
	private final String accessToken;
	private final SignType signType;

	/**
	 * Primary invocation for an API communication. This constructor is used for convenience when not uploading content
	 *
	 * @param uri the url to interact with (eg: http://example.akamaihd.net/254462 )
	 * @param nonce provisioned nonce from the Luna portal
	 * @param accessToken the associated accessToken generated by the portal
	 */
	public NetStorageCmsSigner(URI uri, String nonce, String accessToken) {
		this(uri, nonce, accessToken, SignType.HMACSHA256);
	}

	/**
	 * Primary invocation for an API communication. This constructor is used for convenience when not uploading content
	 *
	 * @param uri the url to interact with (eg: http://example.akamaihd.net/254462 )
	 * @param nonce provisioned nonce from the Luna portal
	 * @param accessToken the associated accessToken generated by the portal
	 * @param signType the base64 encoded signature algorithm
	 */
	public NetStorageCmsSigner(URI uri, String nonce, String accessToken, SignType signType) {
		this.uri = uri;
		this.nonce = nonce;
		this.accessToken = accessToken;
		this.signType = signType;
	}

	public NetStorageCmsSigner(URI uri, CredentialFactory accessTokenCf, SignType signType) {
		this(uri, accessTokenCf.getUsername(), accessTokenCf.getPassword(), signType);
	}

	/**
	 * Computes the value for the the X-Akamai-ACS-Action: header. This is an url query-string encoded separated
	 * list of parameters in the form of name=value&name2=value2.
	 * @param action the set of action parameters to be sent in the API request
	 * @return an url encoded query string of name-value pairs from the {@link NetStorageRequest}
	 */
	protected String getActionHeaderValue(NetStorageRequest action) {
		return action.compileHeader();
	}

	/**
	 * Constructs the X-Akamai-ACS-Auth-Data header which contains the signing version, the current time, a random number
	 * and the nonce that is used to sign the data.
	 *
	 * @return the data field in a comma separated list
	 */
	protected String getAuthDataHeaderValue() {
		Date currentTime = new Date();
		int rand = UUIDUtil.RANDOM.nextInt(Integer.MAX_VALUE);

		return
				"%d, 0.0.0.0, 0.0.0.0, %d, %d, %s".formatted(
				signType.getValue(),
				currentTime.getTime() / 1000,
				rand,
				nonce);
	}

	/**
	 * Computes the X-Akamai-ACS-Auth-Sign header for a given Action and Data header values. This results in a base64
	 * encoded representation of the hash as required by the spec. The api server will compute this same hash to validate
	 * the request
	 *
	 * @param action action header values {@link #getActionHeaderValue(NetStorageRequest)}
	 * @param authData data header values {@link #getAuthDataHeaderValue()}
	 * @return a base64 encoded return string
	 */
	protected String getAuthSignHeaderValue(String action, String authData) {
		String signData =
				"%s%s\n%s:%s\n".formatted(
				authData,
				uri.getPath(),
				NetStorageCmsSigner.ACTION_HEADER.toLowerCase(),
				action);
		byte[] hash = NetStorageUtils.computeKeyedHash(signData.getBytes(), accessToken, signType.getAlgorithm());

		return Base64.encodeBase64String(hash);
	}

	/**
	 * Assembles the HTTP Headers necessary for API communication
	 * @param netStorageAction the set of action parameters to be sent in the API request
	 * @return Map of name-value pairs representing HTTP Headers and values.
	 */
	public Map<String, String> computeHeaders(NetStorageRequest netStorageAction) {
		final Map<String, String> headers = new HashMap<>(3);
		final String action = getActionHeaderValue(netStorageAction);
		final String authData = getAuthDataHeaderValue();
		final String authSign = getAuthSignHeaderValue(action, authData);

		headers.put(NetStorageCmsSigner.ACTION_HEADER, action);
		headers.put(NetStorageCmsSigner.AUTH_DATA_HEADER, authData);
		headers.put(NetStorageCmsSigner.AUTH_SIGN_HEADER, authSign);
		return headers;
	}
}
